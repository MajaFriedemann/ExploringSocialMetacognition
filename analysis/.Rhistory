DE$newId <- -1
q <- Inf
id <- 0
for (i in 1:nrow(DE)) {
if (DE$qNumber[i] <= q) {
id <- id + 1
}
q <- DE$qNumber[i]
DE$newId[i] <- id
}
DE$oldId <- DE$id
DE$id <- factor(DE$newId)
DE$newId <- NULL
}
if (F) {
# pad out short testing data with simulated stuff
for (id in unique(DE$id)) {
tmp <- NULL
n = sum(DE$id == id)
if (n < 30) {
for (i in 1:(30 - n)) {
# random question not yet answered
q <- base::sample(unique(DE$qPrompt[!(DE$qPrompt %in% DE$qPrompt[DE$id == id])]), 1)
qRow <- DE[DE$qPrompt == q, ][1, ]
r <- DE[DE$id == id, ][1, ]
r$qPrompt <- q
r$qTarget <- qRow$qTarget
r$qTopic <- qRow$qTopic
r$timeA <- 100
r$estimate <- rnorm(1, r$qTarget, 10)
r$after <- rnorm(1, r$estimate - 10, 5)
r$before <- rnorm(1, r$estimate + 10, 5)
tmp <- rbind(tmp, r)
}
}
DE <- rbind(DE, tmp)
}
}
DE$okayResponse <- factor(T)
levels(DE$okayResponse) <- c(T,
"Estimate out of range",
"After out of range",
"Before out of range",
"After after estimate",
"Before before estimate")
DE$okayResponse[DE$estimate > 1975 | DE$estimate < 1825] <- "Estimate out of range"
DE$okayResponse[DE$after < 1800] <- "After out of range"
DE$okayResponse[DE$before > 2000] <- "Before out of range"
DE$okayResponse[DE$after > DE$estimate] <- "After after estimate"
DE$okayResponse[DE$before < DE$estimate] <- "Before before estimate"
kable(table(DE$okayResponse))
DE.pSummary <- NULL
for (id in unique(DE$id)) {
tmp <- DE[DE$id == id, ]
tmp$error <- abs(tmp$estimate - tmp$qTarget)
x <- tibble(id,
questionCount = nrow(tmp),
hitRate = mean(tmp$estimate == tmp$qTarget),
bracketRate = mean(tmp$after <= tmp$qTarget &
tmp$before >= tmp$qTarget),
goodAnswerRate = mean(tmp$okayResponse == T),
meanError = mean(tmp$error),
sdError = sd(tmp$error),
meanBracketWidth = mean(tmp$before - tmp$after),
sdBracketWidth = sd(tmp$before - tmp$after),
meanRT = mean(tmp$timeA))
DE.pSummary <- rbind(DE.pSummary, x)
}
DE.general[, 4:6] <- DE.general[, 4:6] / 100
DE.pSummary <- left_join(DE.pSummary, DE.general[, 3:6], by = "id")
kable(num2str(DE.pSummary[order(DE.pSummary$bracketRate, decreasing = T), ]))
DE$error <- abs(DE$estimate - DE$qTarget)
DE$bracketed <- as.numeric(DE$after <= DE$qTarget & DE$before >= DE$qTarget)
DE$bWidth <- DE$before - DE$after
DE$hit <- as.numeric(DE$estimate == DE$qTarget)
vars <- c('error', 'timeA', 'bracketed', 'bWidth', 'hit')
DE.p <- NULL
for (id in unique(DE$id)) {
tmp <- DE[DE$id == id, ]
for (v in vars) {
cl <- mean_cl_normal(tmp[[v]])
myRow <- tibble(id, variable = v, mean = cl$y,
cl95L = cl$ymin, cl95H = cl$ymax)
DE.p <- rbind(DE.p, myRow)
}
}
ggplot(DE.p, aes(x = "",
y = mean, ymin = cl95L, ymax = cl95H, colour = id)) +
geom_violin(aes(group = 1), color = NA, fill = "grey90") +
geom_boxplot(aes(group = 1), fill = NA, outlier.color = NA) +
geom_point(position = position_dodge(width = .75), alpha = .5) +
facet_wrap(.~variable, labeller = label_both, scales = "free_y") +
labs(x = "", y = "mean +/- 95% CI") +
theme_light()
# remove dumb responses
DE <- DE[DE$okayResponse == T, ]
# remove bad participants
DE.pSummary$include <- T
DE.pSummary$include[DE.pSummary$questionCount != 50] <- "qCount"
DE.pSummary$include[DE.pSummary$goodAnswerRate < .80] <- "badAnswers"
ok <- DE.pSummary$id[DE.pSummary$include == T]
DE.pSummary <- DE.pSummary[DE.pSummary$include == T, ]
DE <- DE[DE$id %in% ok, ]
DE.pSummary$include[abs(scale(DE.pSummary$hitRate)) > 2] <- "accuracy>2sd"
DE.pSummary$include[abs(scale(DE.pSummary$meanBracketWidth)) > 2] <- "bracketWidth>2sd"
ok <- DE.pSummary$id[DE.pSummary$include == T]
DE.pSummary <- DE.pSummary[DE.pSummary$include == T, ]
DE <- DE[DE$id %in% ok, ]
tmp <- NULL
for (v in colnames(DE.pSummary)) {
if (is.numeric(DE.pSummary[[v]])) {
m <- mean(DE.pSummary[[v]])
s <- sd(DE.pSummary[[v]])
tmp <- rbind(tmp, tibble(mean = m, sd = s, var = v))
}
}
kable(num2str(tmp))
ggplot(DE.p, aes(x = "",
y = mean, ymin = cl95L, ymax = cl95H, colour = id)) +
geom_violin(aes(group = 1), color = NA, fill = "grey90") +
geom_boxplot(aes(group = 1), fill = NA, outlier.color = NA) +
geom_point(position = position_dodge(width = .75), alpha = .5) +
facet_wrap(.~variable, labeller = label_both, scales = "free_y") +
labs(x = "", y = "mean +/- 95% CI") +
theme_light()
DE.feedback <- gather(DE.pSummary, key = "question", value = "rating", hard_easy:tooLong_tooShort)
ggplot(DE.feedback,  aes(x = "", y = rating, colour = id)) +
geom_violin(aes(group = 1), colour = NA, fill = "grey90") +
geom_point(position = position_dodge(width = .75), alpha = .5) +
stat_summary(geom = "point", aes(group = 1), fun.y = mean) +
stat_summary(geom = "errorbar", aes(group = 1), fun.data = mean_cl_normal) +
facet_wrap(.~question, labeller = label_both) +
labs(x = "", y = "mean rating") +
theme_light()
eq <- lm(hitRate ~ hard_easy, DE.pSummary)
ggplot(DE.pSummary, aes(x = hard_easy, y = hitRate, color = id)) +
geom_point() +
geom_smooth(method = "lm", aes(group = 1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(limits = c(0, 1)) +
coord_fixed() +
annotate(geom = "text", x = .5, y = 1, label =
paste0("y = ", round(eq$coefficients[2], 2), "x + ",
round(eq$coefficients[1], 2), "\n",
"p = ", round(summary(eq)$coefficients[2,4], 3))) +
theme_light()
eq <- lm(bracketRate ~ hard_easy, DE.pSummary)
ggplot(DE.pSummary, aes(x = hard_easy, y = bracketRate, color = id)) +
geom_point() +
geom_smooth(method = "lm", aes(group = 1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(limits = c(0, 1)) +
coord_fixed() +
annotate(geom = "text", x = .5, y = 1, label =
paste0("y = ", round(eq$coefficients[2], 2), "x + ",
round(eq$coefficients[1], 2), "\n",
"p = ", round(summary(eq)$coefficients[2,4], 3))) +
theme_light()
eq <- lm(bracketRate ~ meanBracketWidth, DE.pSummary)
ggplot(DE.pSummary, aes(x = meanBracketWidth, y = bracketRate, color = id)) +
geom_point() +
geom_smooth(method = "lm", aes(group = 1)) +
scale_y_continuous(limits = c(0, 1)) +
annotate(geom = "text", x = .5, y = 1, hjust = 0,
label = paste0("y = ", round(eq$coefficients[2], 2), "x + ",
round(eq$coefficients[1], 2), "\n",
"p = ", round(summary(eq)$coefficients[2,4], 3))) +
theme_light()
DE.i <- NULL
DE.iW <- NULL # wide version
for (q in unique(DE$qPrompt)) {
tmp <- DE[DE$qPrompt == q, ]
wRow <- tibble(q,
qShort = substr(q, 0, 20),
target = tmp$qTarget[1],
topic = tmp$qTopic[1],
n = nrow(tmp))
for (v in vars) {
cl <- mean_cl_normal(tmp[[v]])
myRow <- tibble(q,
qShort = substr(q, 0, 20),
target = tmp$qTarget[1],
topic = tmp$qTopic[1],
n = nrow(tmp),
variable = v,
mean = mean(tmp[[v]]),
sd = sd(tmp[[v]]))
DE.i <- rbind(DE.i, myRow)
x <- tibble(mean = mean(tmp[[v]]), sd = sd(tmp[[v]]))
names(x) <- paste(v, c("m", "sd"), sep = ".")
wRow <- cbind(wRow, x)
}
DE.iW <- rbind(DE.iW, wRow)
}
DE.iW <- as.tibble(DE.iW)
kable(num2str(DE.iW[order(DE.iW$bracketed.m, DE.iW$n, decreasing = T), -1]))
DE.i <- DE.i[order(DE.i$topic), ]
DE.i$qShort <- factor(DE.i$qShort, levels = unique(DE.i$qShort))
m <- aggregate(mean ~ variable, DE.i, mean)
for (cat in unique(DE.i$topic)) {
tmp <- DE.i[DE.i$topic == cat, ]
gg <- ggplot(tmp, aes(x = qShort,
y = mean, ymin = mean - sd, ymax = mean + sd)) +
geom_hline(aes(yintercept = mean),
data = aggregate(mean ~ variable, DE.i, mean)) +
geom_point() +
geom_errorbar() +
facet_grid(variable~., labeller = label_value, scales = "free_y") +
labs(x = "", y = "mean +/- SD") +
theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(gg)
}
DE.qs <- DE.iW
DE.qs$error.a <- sapply(1:nrow(DE.qs), function(x)
mean(DE$after[DE$qPrompt == DE.qs$q[x]] - DE.qs$target[x]))
DE.qs$error.b <- sapply(1:nrow(DE.qs), function(x)
mean(DE$before[DE$qPrompt == DE.qs$q[x]] - DE.qs$target[x]))
DE.qs$include <- rep(T, nrow(DE.qs))
DE.qs$include[DE.qs$error.m > DE.qs$error.a] <- "afterCloser"
DE.qs$include[DE.qs$include == T & DE.qs$error.m > DE.qs$error.b] <- "beforeCloser"
DE.qs$include[DE.qs$hit.m > .33] <- "accuracyTooHigh"
DE.qs$include[DE.qs$include == T & DE.qs$bracketed.m <= .50] <- "bracketRateTooLow"
x <- quantile(DE.qs$timeA.m[DE.qs$include == T])
y <- quantile(DE.qs$bWidth.m[DE.qs$include == T])
DE.qs$include[DE.qs$include == T & DE.qs$bWidth.m < y[2]] <- paste0("bracketWidth<",
round(y[2],2))
DE.qs$include[DE.qs$include == T & DE.qs$bWidth.m > y[4]] <- paste0("bracketWidth>",
round(y[4],2))
DE.qs$include[DE.qs$include == T & DE.qs$timeA.m < x[2]] <- paste0("rt<",
round(x[2],2))
DE.qs$include[DE.qs$include == T & DE.qs$timeA.m > x[4]] <- paste0("rt>",
round(x[4],2))
kable(table(DE.qs$include))
DE.qs <- DE.qs[DE.qs$include == T, ]
library(knitr)
library(tidyverse)
library(lsr)
library(prettyMD)
opts_chunk$set('echo' = F)
set.seed(20190402)
DE <- as.tibble(read.csv("../data/public/dateCheck_trialStream.csv"))
DE.general <- as.tibble(read.csv("../data/private/dateCheck_general-feedback.csv"))
if (F) {
# assign new ids by sequential qNumber
DE$newId <- -1
q <- Inf
id <- 0
for (i in 1:nrow(DE)) {
if (DE$qNumber[i] <= q) {
id <- id + 1
}
q <- DE$qNumber[i]
DE$newId[i] <- id
}
DE$oldId <- DE$id
DE$id <- factor(DE$newId)
DE$newId <- NULL
}
if (F) {
# pad out short testing data with simulated stuff
for (id in unique(DE$id)) {
tmp <- NULL
n = sum(DE$id == id)
if (n < 30) {
for (i in 1:(30 - n)) {
# random question not yet answered
q <- base::sample(unique(DE$qPrompt[!(DE$qPrompt %in% DE$qPrompt[DE$id == id])]), 1)
qRow <- DE[DE$qPrompt == q, ][1, ]
r <- DE[DE$id == id, ][1, ]
r$qPrompt <- q
r$qTarget <- qRow$qTarget
r$qTopic <- qRow$qTopic
r$timeA <- 100
r$estimate <- rnorm(1, r$qTarget, 10)
r$after <- rnorm(1, r$estimate - 10, 5)
r$before <- rnorm(1, r$estimate + 10, 5)
tmp <- rbind(tmp, r)
}
}
DE <- rbind(DE, tmp)
}
}
DE$okayResponse <- factor(T)
levels(DE$okayResponse) <- c(T,
"Estimate out of range",
"After out of range",
"Before out of range",
"After after estimate",
"Before before estimate")
DE$okayResponse[DE$estimate > 1975 | DE$estimate < 1825] <- "Estimate out of range"
DE$okayResponse[DE$after < 1800] <- "After out of range"
DE$okayResponse[DE$before > 2000] <- "Before out of range"
DE$okayResponse[DE$after > DE$estimate] <- "After after estimate"
DE$okayResponse[DE$before < DE$estimate] <- "Before before estimate"
kable(table(DE$okayResponse))
DE.pSummary <- NULL
for (id in unique(DE$id)) {
tmp <- DE[DE$id == id, ]
tmp$error <- abs(tmp$estimate - tmp$qTarget)
x <- tibble(id,
questionCount = nrow(tmp),
hitRate = mean(tmp$estimate == tmp$qTarget),
bracketRate = mean(tmp$after <= tmp$qTarget &
tmp$before >= tmp$qTarget),
goodAnswerRate = mean(tmp$okayResponse == T),
meanError = mean(tmp$error),
sdError = sd(tmp$error),
meanBracketWidth = mean(tmp$before - tmp$after),
sdBracketWidth = sd(tmp$before - tmp$after),
meanRT = mean(tmp$timeA))
DE.pSummary <- rbind(DE.pSummary, x)
}
DE.general[, 4:6] <- DE.general[, 4:6] / 100
DE.pSummary <- left_join(DE.pSummary, DE.general[, 3:6], by = "id")
kable(num2str(DE.pSummary[order(DE.pSummary$bracketRate, decreasing = T), ]))
DE$error <- abs(DE$estimate - DE$qTarget)
DE$bracketed <- as.numeric(DE$after <= DE$qTarget & DE$before >= DE$qTarget)
DE$bWidth <- DE$before - DE$after
DE$hit <- as.numeric(DE$estimate == DE$qTarget)
vars <- c('error', 'timeA', 'bracketed', 'bWidth', 'hit')
DE.p <- NULL
for (id in unique(DE$id)) {
tmp <- DE[DE$id == id, ]
for (v in vars) {
cl <- mean_cl_normal(tmp[[v]])
myRow <- tibble(id, variable = v, mean = cl$y,
cl95L = cl$ymin, cl95H = cl$ymax)
DE.p <- rbind(DE.p, myRow)
}
}
ggplot(DE.p, aes(x = "",
y = mean, ymin = cl95L, ymax = cl95H, colour = id)) +
geom_violin(aes(group = 1), color = NA, fill = "grey90") +
geom_boxplot(aes(group = 1), fill = NA, outlier.color = NA) +
geom_point(position = position_dodge(width = .75), alpha = .5) +
facet_wrap(.~variable, labeller = label_both, scales = "free_y") +
labs(x = "", y = "mean +/- 95% CI") +
theme_light()
# remove dumb responses
DE <- DE[DE$okayResponse == T, ]
# remove bad participants
DE.pSummary$include <- T
DE.pSummary$include[DE.pSummary$questionCount != 50] <- "qCount"
DE.pSummary$include[DE.pSummary$goodAnswerRate < .80] <- "badAnswers"
ok <- DE.pSummary$id[DE.pSummary$include == T]
DE.pSummary <- DE.pSummary[DE.pSummary$include == T, ]
DE <- DE[DE$id %in% ok, ]
DE.pSummary$include[abs(scale(DE.pSummary$hitRate)) > 2] <- "accuracy>2sd"
DE.pSummary$include[abs(scale(DE.pSummary$meanBracketWidth)) > 2] <- "bracketWidth>2sd"
ok <- DE.pSummary$id[DE.pSummary$include == T]
DE.pSummary <- DE.pSummary[DE.pSummary$include == T, ]
DE <- DE[DE$id %in% ok, ]
tmp <- NULL
for (v in colnames(DE.pSummary)) {
if (is.numeric(DE.pSummary[[v]])) {
m <- mean(DE.pSummary[[v]])
s <- sd(DE.pSummary[[v]])
tmp <- rbind(tmp, tibble(mean = m, sd = s, var = v))
}
}
kable(num2str(tmp))
ggplot(DE.p, aes(x = "",
y = mean, ymin = cl95L, ymax = cl95H, colour = id)) +
geom_violin(aes(group = 1), color = NA, fill = "grey90") +
geom_boxplot(aes(group = 1), fill = NA, outlier.color = NA) +
geom_point(position = position_dodge(width = .75), alpha = .5) +
facet_wrap(.~variable, labeller = label_both, scales = "free_y") +
labs(x = "", y = "mean +/- 95% CI") +
theme_light()
DE.feedback <- gather(DE.pSummary, key = "question", value = "rating", hard_easy:tooLong_tooShort)
ggplot(DE.feedback,  aes(x = "", y = rating, colour = id)) +
geom_violin(aes(group = 1), colour = NA, fill = "grey90") +
geom_point(position = position_dodge(width = .75), alpha = .5) +
stat_summary(geom = "point", aes(group = 1), fun.y = mean) +
stat_summary(geom = "errorbar", aes(group = 1), fun.data = mean_cl_normal) +
facet_wrap(.~question, labeller = label_both) +
labs(x = "", y = "mean rating") +
theme_light()
eq <- lm(hitRate ~ hard_easy, DE.pSummary)
ggplot(DE.pSummary, aes(x = hard_easy, y = hitRate, color = id)) +
geom_point() +
geom_smooth(method = "lm", aes(group = 1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(limits = c(0, 1)) +
coord_fixed() +
annotate(geom = "text", x = .5, y = 1, label =
paste0("y = ", round(eq$coefficients[2], 2), "x + ",
round(eq$coefficients[1], 2), "\n",
"p = ", round(summary(eq)$coefficients[2,4], 3))) +
theme_light()
eq <- lm(bracketRate ~ hard_easy, DE.pSummary)
ggplot(DE.pSummary, aes(x = hard_easy, y = bracketRate, color = id)) +
geom_point() +
geom_smooth(method = "lm", aes(group = 1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(limits = c(0, 1)) +
coord_fixed() +
annotate(geom = "text", x = .5, y = 1, label =
paste0("y = ", round(eq$coefficients[2], 2), "x + ",
round(eq$coefficients[1], 2), "\n",
"p = ", round(summary(eq)$coefficients[2,4], 3))) +
theme_light()
eq <- lm(bracketRate ~ meanBracketWidth, DE.pSummary)
ggplot(DE.pSummary, aes(x = meanBracketWidth, y = bracketRate, color = id)) +
geom_point() +
geom_smooth(method = "lm", aes(group = 1)) +
scale_y_continuous(limits = c(0, 1)) +
annotate(geom = "text", x = .5, y = 1, hjust = 0,
label = paste0("y = ", round(eq$coefficients[2], 2), "x + ",
round(eq$coefficients[1], 2), "\n",
"p = ", round(summary(eq)$coefficients[2,4], 3))) +
theme_light()
DE.i <- NULL
DE.iW <- NULL # wide version
for (q in unique(DE$qPrompt)) {
tmp <- DE[DE$qPrompt == q, ]
wRow <- tibble(q,
qShort = substr(q, 0, 20),
target = tmp$qTarget[1],
topic = tmp$qTopic[1],
n = nrow(tmp))
for (v in vars) {
cl <- mean_cl_normal(tmp[[v]])
myRow <- tibble(q,
qShort = substr(q, 0, 20),
target = tmp$qTarget[1],
topic = tmp$qTopic[1],
n = nrow(tmp),
variable = v,
mean = mean(tmp[[v]]),
sd = sd(tmp[[v]]))
DE.i <- rbind(DE.i, myRow)
x <- tibble(mean = mean(tmp[[v]]), sd = sd(tmp[[v]]))
names(x) <- paste(v, c("m", "sd"), sep = ".")
wRow <- cbind(wRow, x)
}
DE.iW <- rbind(DE.iW, wRow)
}
DE.iW <- as.tibble(DE.iW)
kable(num2str(DE.iW[order(DE.iW$bracketed.m, DE.iW$n, decreasing = T), -1]))
DE.i <- DE.i[order(DE.i$topic), ]
DE.i$qShort <- factor(DE.i$qShort, levels = unique(DE.i$qShort))
m <- aggregate(mean ~ variable, DE.i, mean)
for (cat in unique(DE.i$topic)) {
tmp <- DE.i[DE.i$topic == cat, ]
gg <- ggplot(tmp, aes(x = qShort,
y = mean, ymin = mean - sd, ymax = mean + sd)) +
geom_hline(aes(yintercept = mean),
data = aggregate(mean ~ variable, DE.i, mean)) +
geom_point() +
geom_errorbar() +
facet_grid(variable~., labeller = label_value, scales = "free_y") +
labs(x = "", y = "mean +/- SD") +
theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(gg)
}
DE.qs <- DE.iW
DE.qs$error.a <- sapply(1:nrow(DE.qs), function(x)
mean(DE$after[DE$qPrompt == DE.qs$q[x]] - DE.qs$target[x]))
DE.qs$error.b <- sapply(1:nrow(DE.qs), function(x)
mean(DE$before[DE$qPrompt == DE.qs$q[x]] - DE.qs$target[x]))
DE.qs$include <- rep(T, nrow(DE.qs))
DE.qs$include[DE.qs$error.m > DE.qs$error.a] <- "afterCloser"
DE.qs$include[DE.qs$include == T & DE.qs$error.m > DE.qs$error.b] <- "beforeCloser"
DE.qs$include[DE.qs$hit.m > .33] <- "accuracyTooHigh"
DE.qs$include[DE.qs$include == T & DE.qs$bracketed.m <= .50] <- "bracketRateTooLow"
x <- quantile(DE.qs$timeA.m[DE.qs$include == T])
y <- quantile(DE.qs$bWidth.m[DE.qs$include == T])
DE.qs$include[DE.qs$include == T & DE.qs$bWidth.m < y[2]] <- paste0("bracketWidth<",
round(y[2],2))
DE.qs$include[DE.qs$include == T & DE.qs$bWidth.m > y[4]] <- paste0("bracketWidth>",
round(y[4],2))
DE.qs$include[DE.qs$include == T & DE.qs$timeA.m < x[2]] <- paste0("rt<",
round(x[2],2))
DE.qs$include[DE.qs$include == T & DE.qs$timeA.m > x[4]] <- paste0("rt>",
round(x[4],2))
kable(table(DE.qs$include))
# DE.qs <- DE.qs[DE.qs$include == T, ]
DE.qs$error.b
DE.qs$error.m
num2str(DE.qs$error.m)
num2str(DE.qs$error.a)
num2str(DE.qs$error.b)
DE.qs <- DE.iW
DE.qs$error.a <- sapply(1:nrow(DE.qs), function(x)
abs(mean(DE$after[DE$qPrompt == DE.qs$q[x]] - DE.qs$target[x])))
DE.qs$error.b <- sapply(1:nrow(DE.qs), function(x)
abs(mean(DE$before[DE$qPrompt == DE.qs$q[x]] - DE.qs$target[x])))
DE.qs$include <- rep(T, nrow(DE.qs))
DE.qs$include[DE.qs$error.m > DE.qs$error.a] <- "afterCloser"
DE.qs$include[DE.qs$include == T & DE.qs$error.m > DE.qs$error.b] <- "beforeCloser"
DE.qs$include[DE.qs$hit.m > .33] <- "accuracyTooHigh"
DE.qs$include[DE.qs$include == T & DE.qs$bracketed.m <= .50] <- "bracketRateTooLow"
x <- quantile(DE.qs$timeA.m[DE.qs$include == T])
y <- quantile(DE.qs$bWidth.m[DE.qs$include == T])
DE.qs$include[DE.qs$include == T & DE.qs$bWidth.m < y[2]] <- paste0("bracketWidth<",
round(y[2],2))
DE.qs$include[DE.qs$include == T & DE.qs$bWidth.m > y[4]] <- paste0("bracketWidth>",
round(y[4],2))
DE.qs$include[DE.qs$include == T & DE.qs$timeA.m < x[2]] <- paste0("rt<",
round(x[2],2))
DE.qs$include[DE.qs$include == T & DE.qs$timeA.m > x[4]] <- paste0("rt>",
round(x[4],2))
kable(table(DE.qs$include))
# DE.qs <- DE.qs[DE.qs$include == T, ]
DE.qs[DE.qs$include == "afterCloser"]
DE.qs[DE.qs$include == "afterCloser",]
DE.qs[DE.qs$include == "afterCloser", q:error.m]
DE.qs[DE.qs$include == "afterCloser", c(1,3,6,16,17)]
DE.qs[DE.qs$include == T, c(1,3,6,16,17)]
