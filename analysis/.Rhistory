participants <- participants[participants$excluded==F, ]
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
# Remove excluded participants' data from other data frames
trials <- trials[trials$pid %in% participants$pid, ]
advisors <- advisors[advisors$pid %in% participants$pid, ]
questionnaires <- questionnaires[questionnaires$pid %in% participants$pid, ]
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
t.test(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
t.test(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
ttestBF(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
# Ability
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
tmp
tmp.2 <- aggregate(influence ~ adviceType + pid + hasChoice,
data = trials, FUN = mean)
tmp.2
# Ability
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
tmp <- sapply(1:nrow(tmp), function(i) {
if(tmp$timepoint[i]==1)
return(NULL)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
})
tmp
# Ability
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
lapply(1:nrow(tmp), function(i) {
if(tmp$timepoint[i]==1)
return(NULL)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
})
as.data.frame(lapply(1:nrow(tmp), function(i) {
if(tmp$timepoint[i]==1)
return(NULL)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
}))
# Ability
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
sapply(1:nrow(tmp), function(i) {
if(tmp$timepoint[i]==1)
return(NULL)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
})
tmp
# Ability
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
for(i in 1:nrow(tmp))
if(tmp$timepoint[i]==2)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
tmp
tmp.2 <- aggregate(influence ~ adviceType + pid + hasChoice,
data = trials, FUN = mean)
sapply(1:nrow(tmp), function(i){tmp.2$influence[tmp.2$hasChoice
& tmp.2$pid == tmp$pid[i]
& tmp.2$adviceType == tmp$adviceType[i]]})
tmp$influence <- sapply(1:nrow(tmp), function(i){tmp.2$influence[tmp.2$hasChoice
& tmp.2$pid == tmp$pid[i]
& tmp.2$adviceType == tmp$adviceType[i]]})
tmp
cor.test(tmp$ability, tmp$influence)
# Beneveolence
cor.test(tmp$benevolence, tmp$influence)
# Likeability
cor.test(tmp$likeability, tmp$influence)
lm(influence ~ ability, data = tmp)
summary(lm(influence ~ ability, data = tmp))
summary(lm(influence ~ ability + benevolence + likeability, data = tmp))
melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid'))
melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid'),
variable.name = 'trust dimension', value.name = 'influence')
#   10.ii) Graph: Questionnaire-influence correlation ####
#MISSING!!!!####
tmp <- melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid'),
variable.name = 'trust dimension', value.name = 'influence')
ggplot(tmp, aes(x = adviceType, y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_wrap(~'trust dimension') +
style
ggplot(tmp, aes(x = adviceType, y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_wrap(~`trust dimension`) +
style
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
# calculate difference scores
for(i in 1:nrow(tmp))
if(tmp$timepoint[i]==2)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
tmp.2 <- aggregate(influence ~ adviceType + pid + hasChoice,
data = trials, FUN = mean)
tmp$influence <- sapply(1:nrow(tmp), function(i){tmp.2$influence[tmp.2$hasChoice
& tmp.2$pid == tmp$pid[i]
& tmp.2$adviceType == tmp$adviceType[i]]})
#   10.ii) Graph: Questionnaire-influence correlation ####
#MISSING!!!!####
tmp <- melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid', 'timepoint'),
variable.name = 'trust dimension', value.name = 'influence')
ggplot(tmp, aes(x = adviceType, y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_wrap(~`trust dimension`) +
style
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
# calculate difference scores
for(i in 1:nrow(tmp))
if(tmp$timepoint[i]==2)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
tmp.2 <- aggregate(influence ~ adviceType + pid + hasChoice,
data = trials, FUN = mean)
tmp$influence <- sapply(1:nrow(tmp), function(i){tmp.2$influence[tmp.2$hasChoice
& tmp.2$pid == tmp$pid[i]
& tmp.2$adviceType == tmp$adviceType[i]]})
#   10.ii) Graph: Questionnaire-influence correlation ####
#MISSING!!!!####
tmp <- melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid', 'timepoint', measure.vars = c('influence')),
variable.name = 'trust dimension', value.name = 'influence')
ggplot(tmp, aes(x = adviceType, y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_wrap(~`trust dimension`) +
style
ggplot(tmp, aes(x = adviceType, y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_grid(~`trust dimension`) +
style
ggplot(tmp, aes(x = adviceType, y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_grid(`trust dimension`~.) +
style
ggplot(tmp, aes(x = factor(adviceType), y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_grid(`trust dimension`~.) +
style
ggplot(tmp, aes(x = factor(adviceType), y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm', aes(x = adviceType)) +
facet_grid(`trust dimension`~.) +
style
ggplot(tmp, aes(x = factor(adviceType), y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth() +
facet_grid(`trust dimension`~.) +
style
ggplot(tmp, aes(x = factor(adviceType), y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_grid(`trust dimension`~.) +
style
ggplot(tmp, aes(x = `trust dimension`, y = influence)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_grid(~adviceType) +
style
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
# calculate difference scores
for(i in 1:nrow(tmp))
if(tmp$timepoint[i]==2)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
tmp.2 <- aggregate(influence ~ adviceType + pid + hasChoice,
data = trials, FUN = mean)
tmp$influence <- sapply(1:nrow(tmp), function(i){tmp.2$influence[tmp.2$hasChoice
& tmp.2$pid == tmp$pid[i]
& tmp.2$adviceType == tmp$adviceType[i]]})
melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid', 'timepoint', measure.vars = c('influence')),
variable.name = 'trust dimension', value.name = 'influence')
tmp
melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid', 'timepoint', measure.vars = c('influence')),
variable.name = 'trust dimension', value.name = 'trust')
ggplot(tmp, aes(x = trust, y = influence, colour = adviceType)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_grid(`trust dimension`~) +
style
ggplot(tmp, aes(x = trust, y = influence, colour = adviceType)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_grid(`trust dimension`~.) +
style
#   10.ii) Graph: Questionnaire-influence correlation ####
#MISSING!!!!####
tmp <- melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid', 'timepoint', measure.vars = c('influence')),
variable.name = 'trust dimension', value.name = 'trust')
ggplot(tmp, aes(x = trust, y = influence, colour = adviceType)) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_grid(`trust dimension`~.) +
style
ggplot(tmp, aes(x = trust, y = influence, colour = factor(adviceType))) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm') +
facet_grid(`trust dimension`~.) +
style
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
questionnaires
participants
advisors
folderName <- '../AdvisorChoice/data/processed/'
files <- list.files(folderName)
participants <- NULL
trials <- NULL
advisors <- NULL
questionnaires <- NULL
for (i in seq(length(files))) {
fileName <- paste(folderName, files[[i]], sep='/')
json <- readChar(fileName, file.info(fileName)$size)
jsonData <- fromJSON(json, simplifyVector = T, simplifyMatrix = T, simplifyDataFrame = T)
# store all columns in participants table except the three last
# (trials, advisors, and questionnaires are stored separately)
# Patch for missing data in practice
if(!('debriefComments' %in% names(jsonData)))
jsonData <- c(list(debriefComments = 'NA'), jsonData)
participants <- rbind(participants, as.data.frame(t(jsonData[1:(length(names(jsonData))-3)])))
# store the trials in the trials table
trials <- rbind(trials, jsonData$trials)
advisors <- rbind(advisors, jsonData$advisors)
questionnaires <- rbind(questionnaires, jsonData$questionnaires)
}
jsonData$advisors
advisors
rm(jsonData, files, fileName, folderName, json)
advisors$pid <- sapply(advisors$participantId, function(x)participants$pid[which(participants$id == x)])
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
View(advisors)
sapply(1:nrow(questionnaires), function(i)
advisors$name[advisors$pid==questionnaires$pid[i]
& advisors$id == questionnaires$advisorId[i]])
questionnaires$advisorPortrait <- sapply(1:nrow(questionnaires), function(i) {
x <- advisors$portraitSrc[advisors$pid==questionnaires$pid[i]
& advisors$id == questionnaires$advisorId[i]]
sub('.jpg', sub('assets/image/advisor', x, fixed = T), fixed = T)
})
x <- advisors$portraitSrc[advisors$pid==questionnaires$pid[i]
& advisors$id == questionnaires$advisorId[i]]
x <- sub('assets/image/advisor', x, fixed = T)
x <- sub('assets/image/advisor', '', x, fixed = T)
sub('.jpg', '', x, fixed = T)
as.factor(sub('.jpg', '', x, fixed = T))
questionnaires$advisorPortrait <- sapply(1:nrow(questionnaires), function(i) {
x <- advisors$portraitSrc[advisors$pid==questionnaires$pid[i]
& advisors$id == questionnaires$advisorId[i]]
x <- sub('assets/image/advisor', '', x, fixed = T)
as.factor(sub('.jpg', '', x, fixed = T))
})
questionnaires
# Stick the name and portrait data into the questionnaires table
questionnaires$advisorName <- sapply(1:nrow(questionnaires), function(i)
advisors$name[advisors$pid==questionnaires$pid[i]
& advisors$id == questionnaires$advisorId[i]])
questionnaires
factor(c('w', 'b', 'w', 'b', 'w'))
# The Advisor portraits have properties which might affect ratings, so we should investigate these:
portraitDetails <- data.frame(
portraitId = 1:5,
category = factor(c('w', 'b', 'w', 'b', 'w')),
blackProp = c(0, .99, 0, .99, .01),
age = c(28.7, 24.9, 23.3, 24.6, 23.7)
)
# Add on the source data
questionnaires$advisorAge <- sapply(questionnaires$advisorPortrait, function(i) portraitDetails$age[i])
questionnaires$advisorCategory <- sapply(questionnaires$advisorPortrait, function(i) portraitDetails$category[i])
questionnaires
questionnaires$advisorName
questionnaires$advisorCategory
# Stick the name and portrait data into the questionnaires table
questionnaires$advisorName <- factor(sapply(1:nrow(questionnaires), function(i)
advisors$name[advisors$pid==questionnaires$pid[i]
& advisors$id == questionnaires$advisorId[i]]))
questionnaires$advisorName
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid +
advisorCategory + advisorName + advisorAge,
data = questionnaires, FUN = mean)
tmp
tmp.lm <- lm(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid +
advisorCategory + advisorName + advisorAge,
data = questionnaires)
tmp.lm
summary(tmp.lm)
tmp.lm <- aov(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid +
advisorCategory + advisorName + advisorAge,
data = questionnaires)
tmp.lm
summary(tmp.lm)
tmp.lm <- aov(cbind(likeability, ability, benevolence) ~ adviceType + timepoint +
advisorCategory + advisorName + advisorAge +
Error(pid / (adviceType + timepoint +
advisorCategory + advisorName + advisorAge)),
data = questionnaires)
summary(tmp.lm)
tmp.lm <- aov(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorName + advisorAge) +
Error(pid / (adviceType + timepoint +
advisorCategory + advisorName + advisorAge)),
data = questionnaires)
summary(tmp.lm)
tmp.lm
tmp.lm <- aov(cbind(likeability, ability, benevolence) ~ adviceType + timepoint +
advisorCategory + advisorName + advisorAge +
Error(pid / (adviceType + timepoint +
advisorCategory + advisorName + advisorAge)),
data = questionnaires)
tmp.lm
tmp.lm <- aov(cbind(likeability, ability, benevolence) ~ adviceType + timepoint +
advisorCategory + advisorName + advisorAge +
Error(pid),
data = questionnaires)
tmp.lm
tmp.lm <- aov(cbind(likeability, ability, benevolence) ~ adviceType + timepoint +
advisorCategory + advisorName + advisorAge,
data = questionnaires)
tmp.lm
tmp.lm <- aov(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorName + advisorAge),
data = questionnaires)
tmp.lm
summary(tmp.lm)
tmp.lm <- manova(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorName + advisorAge),
data = questionnaires)
summary(tmp.lm, test='Pillai')
tmp.lm <- manova(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorName + advisorAge) + Error(pid),
data = questionnaires)
tmp.lm <- manova(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorName + advisorAge) + Error(pid),
data = questionnaires)summary(tmp.lm, test='Pillai')
summary(tmp.lm, test='Pillai')
questionnaires
tmp.lm <- lm(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge) + Error(pid),
data = questionnaires)
tmp.lm <- lm(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge) + pid,
data = questionnaires)
summary(tmp.lm, test='Pillai')
tmp.lm <- lm(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge),
data = questionnaires[questionnaires$pid==1, ])
summary(tmp.lm, test='Pillai')
summary(tmp)
summary(tmp.lm)
tmp.lm <- lm(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge) + pid,
data = questionnaires)
summary(tmp.lm, test='Pillai')
tmp.aov <- aov(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge) + Error(pid / (adviceType + advisorCategory + advisorAge)),
data = questionnaires)
summary(tmp.aov, test='Pillai')
tmp.lm <- lm(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge) + (1|pid) + (advisorCategory|pid) + (advisorAge|pid),
data = questionnaires)
tmp.lm <- lme4::lm(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge) + (1|pid) + (advisorCategory|pid) + (advisorAge|pid),
data = questionnaires)
tmp.lm <- lme4::lmer(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge) + (1|pid) + (advisorCategory|pid) + (advisorAge|pid),
data = questionnaires)
tmp.lm <- lme4::lmer(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge) + (1|pid) + (advisorCategory|pid),
data = questionnaires)
tmp.lm <- lme4::lmer(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge) + (1|pid),
data = questionnaires)
tmp.lm <- lme4::lmer(cbind(likeability, ability, benevolence) ~ adviceType * timepoint *
(advisorCategory + advisorAge),
data = questionnaires)
tmp.lm <- lme4::lmer(cbind(likeability, ability, benevolence) ~ adviceType * timepoint + (1|pid) + (advisorCategory|pid) + (advisorAge|pid),
data = questionnaires)
tmp.lm <- lme4::lmer(ability ~ adviceType * timepoint +
(1|pid) + (advisorCategory|pid) + (advisorAge|pid),
data = questionnaires)
tmp.lm
unique(questionnaires$pid)
summary(tmp.lm)
tmp.lm <- lme4::lmer(ability ~ adviceType * timepoint +
(1|pid) + (advisorCategory|pid) + (advisorAge|pid) + (advisorName|pid),
data = questionnaires)
unique(questionnaires$advisorName)
tmp.lm <- lme4::lmer(ability ~ adviceType * timepoint +
(1|pid) + (advisorCategory|pid) + (advisorAge|pid),# + (advisorName|pid),
data = questionnaires)
summary(tmp.lm)
tmp.lm <- lme4::lmer(ability ~ adviceType * timepoint +
(1+advisorCategory+advisorAge|pid),# + (advisorName|pid),
data = questionnaires)
summary(tmp.lm)
tmp.null <- lme4::lmer(ability ~ timepoint +
(1+advisorCategory+advisorAge|pid),# + (advisorName|pid),
data = questionnaires)
aov(tmp.lm, tmp.null)
anova(tmp.lm, tmp.null)
summary(tmp.lm)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
View(q.old)
which(q.old[,1]!=questionnaires[,1])
for(i in 1:nrow(q.old)) print(which(q.old[i,]!=questionnaires[i,]))
q.old$advisorName
questionnaires$advisorName
questionnaires$advisorAge
questionnaires$advisorCategory
factor(q.old$advisorName)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
questionnaires$advisorPortrait
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
questionnaires$advisorPortrait
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
questionnaires$advisorPortrait
q.old
questionnaires$advisorPortrait==q.old
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
questionnaires$advisorPortrait
q.old
q.old === questionnaires$advisorPortrait
q.old == questionnaires$advisorPortrait
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
tmp.null <- lme4::lmer(ability ~ timepoint +
(1+advisorCategory+advisorAge|pid),# + (advisorName|pid),
data = questionnaires)
tmp.null <- lme4::lmer(ability ~ timepoint +
(1+advisorCategory+advisorAge|pid),# + (advisorName|pid),
data = questionnaires)
tmp.null <- lmer(ability ~ timepoint +
(1+advisorCategory+advisorAge|pid),# + (advisorName|pid),
data = questionnaires)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
tmp.null <- lmer(ability ~ timepoint +
(1+advisorAge|pid),# +advisorName|pid),
data = questionnaires)
tmp.null <- lmer(ability ~ timepoint +
(1+advisorCategory+advisorAge|pid),# +advisorName|pid),
data = questionnaires)
questionnaires$advisorCategory
summary(tmp.null)
participants$experimentDuration
participants$experimentDuration / 60000
View(all.participants)
2871 / 60
2642/60
