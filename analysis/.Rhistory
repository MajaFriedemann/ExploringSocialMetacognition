breaks = seq(0,1,.5)) +
# label hack
geom_text(data = tmp.CI, aes(x = 0, label = labelsL), nudge_x = -.1, nudge_y = .15, hjust = 1) +
geom_text(data = tmp.CI, aes(x = 1, label = labelsR), nudge_x = .1, nudge_y = .15, hjust = 0) +
annotate(geom = 'rect', xmin = 0, xmax = 1, ymin = -Inf, ymax = Inf,
alpha = .025, linetype = 'solid', col = 'black') +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = 'top')
tmp <- gather(df.change, key = advisor, value = pickRate, -pid)
tmp <- tmp[!grepl('_', tmp$advisor), ]
tmp$pChanged <- sapply(1:nrow(tmp), function(i) mean(df.change[df.change$pid == tmp$pid[i],
paste0('PChange_', tmp$advisor[i])]))
ggplot(tmp, aes(x = pickRate, y = advisor)) +
geom_vline(linetype = 'dashed', xintercept = .5) +
geom_point(alpha = 0.5, col = 'black', aes(size = pChanged),
position = position_nudge(x = 0, y = -0.05)) +
geom_density_ridges(panel_scaling = F, scale = .5,
col = NA, fill = '#2299DD', alpha = .75) +
geom_segment(data = tmp.CI,
aes(y = advisor, yend = advisor,
x = ymin, xend = ymax),
size = 1, colour = '#2299DD',
position = position_nudge(x = 0, y = -0.2)) +
geom_point(data = aggregate(pickRate ~ advisor, tmp, mean), size = 4, shape = 18,
position = position_nudge(x = 0, y = -0.2)) +
scale_x_continuous(name = 'Pick rate', limits = c(-.5,1.5), expand = c(0,0),
breaks = seq(0,1,.5)) +
# label hack
geom_text(data = tmp.CI, aes(x = 0, label = labelsL), nudge_x = -.1, nudge_y = .15, hjust = 1) +
geom_text(data = tmp.CI, aes(x = 1, label = labelsR), nudge_x = .1, nudge_y = .15, hjust = 0) +
annotate(geom = 'rect', xmin = 0, xmax = 1, ymin = -Inf, ymax = Inf,
alpha = .025, linetype = 'solid', col = 'black') +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = 'top')
ggplot(tmp, aes(x = pickRate, y = advisor)) +
geom_vline(linetype = 'dashed', xintercept = .5) +
geom_point(alpha = 0.5, col = 'black', aes(size = pChanged),
position = position_nudge(x = 0, y = -0.05)) +
geom_density_ridges(panel_scaling = F, scale = .5,
col = NA, fill = '#2299DD', alpha = .75) +
geom_segment(data = tmp.CI,
aes(y = advisor, yend = advisor,
x = ymin, xend = ymax),
size = 1, colour = '#2299DD',
position = position_nudge(x = 0, y = -0.2)) +
geom_point(data = aggregate(pickRate ~ advisor, tmp, mean), size = 4, shape = 18,
position = position_nudge(x = 0, y = -0.2)) +
scale_x_continuous(name = 'Balance of changes', limits = c(-.5,1.5), expand = c(0,0),
breaks = seq(0,1,.5)) +
# label hack
geom_text(data = tmp.CI, aes(x = 0, label = labelsL), nudge_x = -.1, nudge_y = .15, hjust = 1) +
geom_text(data = tmp.CI, aes(x = 1, label = labelsR), nudge_x = .1, nudge_y = .15, hjust = 0) +
annotate(geom = 'rect', xmin = 0, xmax = 1, ymin = -Inf, ymax = Inf,
alpha = .025, linetype = 'solid', col = 'black') +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = 'top')
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
for(pair in pairs) {
refAdvisor <- pair[1]
# Calculate default advisor = reference advisor proportions for each participant
defaults <- sapply(unique(trials$pid), function(pid) {
tmp <- trials[trials$pid == pid, ]
tmp <- tmp$advisorId[tmp$defaultAdvisor %in% pair]
return(tmp == refAdvisor)
})
cat(md.ttest(defaults, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n')
}
}
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
for(pair in pairs) {
refAdvisor <- pair[1]
# Calculate default advisor = reference advisor proportions for each participant
defaults <- sapply(unique(trials$pid), function(pid) {
tmp <- trials[trials$pid == pid, ]
tmp <- tmp$advisorId[tmp$defaultAdvisor %in% pair]
return(mean(tmp == refAdvisor, na.rm = T))
})
cat(md.ttest(defaults, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n')
}
}
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
for(pair in pairs) {
refAdvisor <- pair[1]
# Calculate default advisor = reference advisor proportions for each participant
defaults <- sapply(unique(trials$pid), function(pid) {
tmp <- trials[trials$pid == pid, ]
tmp <- tmp$advisorId[tmp$defaultAdvisor %in% pair]
return(mean(tmp == refAdvisor, na.rm = T))
})
cat(md.ttestBF(defaults, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n')
}
}
tmp <- aggregate(cbind(initialCorrect, finalCorrect) ~ pid, trials, mean);
cat(md.ttest(tmp$initialCorrect, tmp$finalCorrect, labels = c('*M*|initial', '*M*|final'), isProportion = T))
cat(md.ttest(tmp$initialCorrect, tmp$finalCorrect, labels = c('*M*|initial', '*M*|final'), isProportion = T, paired = T))
tmp <- aggregate(cbind(initialCorrect, finalCorrect) ~ pid, trials, mean)
cat(md.ttest(tmp$initialCorrect, tmp$finalCorrect,
labels = c('*M*|initial', '*M*|final'),
isProportion = T, paired = T))
sum(participants$excluded == 'Accuracy')
library(prettyMD)
df.change <- NULL
pairs <- getAdviceTypePairs(c(trials$advisor0id, trials$advisor1id))
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
df.change <- data.frame(pid = unique(trials$pid))
for(pair in pairs) {
refAdvisor <- pair[1]
changes <- NULL
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0id %in% pair & tmp$advisor1id %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
changes <- rbind(changes, data.frame(m = mean(changed == refAdvisor, na.rm = T),
p = sum(!is.na(changed)) / nrow(tmp)))
}
cat(md.ttest(changes$m, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n\n')
colnames(changes) <- c(getAdviceTypeName(refAdvisor), paste0('PChange_', getAdviceTypeName(refAdvisor)))
df.change <- cbind(df.change, changes);
}
}
knitr::opts_chunk$set(echo = F)
startTime <- Sys.time()
source('ESM_core.R')
df.choice <- NULL
pairs <- getAdviceTypePairs(c(trials$choice0, trials$choice1))
if(length(pairs) < 1) {
cat('*No choice trials in the current dataset.*')
} else {
df.choice <- data.frame(pid = unique(trials$pid))
for(pair in pairs) {
refAdvisor <- pair[1]
# Calculate choice proportions favouring reference advisor for each participant
choices <- sapply(df.choice$pid, function(pid) {
tmp <- trials[trials$pid == pid, ]
tmp <- tmp$advisorId[(tmp$choice0 == pair[1] | tmp$choice1 == pair[1])
& (tmp$choice0 == pair[2] | tmp$choice1 == pair[2])]
return(mean(tmp == refAdvisor, na.rm = T))
})
cat(md.ttest(choices, mu = .5, labels = paste0('*M*|', getAdviceTypeName(refAdvisor)), isProportion = T))
cat('\n\n')
tmp <- data.frame(choices)
colnames(tmp) <- getAdviceTypeName(refAdvisor)
df.choice <- cbind(df.choice, tmp);
}
}
tmp <- trials[trials$initialCorrect == T
& trials$confidenceCategory == confidenceCategories$medium
& trials$type == trialTypes$force, ]
influence.forced <- aov.influence.allForced(tmp)
tmp.influence(tmp)
aggregate(influence ~ adviceType + hasChoice + advisorAgrees + pid, data = tmp, FUN = mean)
tmp
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees, tmp, mean)
tmp
inf.force <- ezANOVA(data = tmp, dv = influence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
knitr::opts_chunk$set(echo = F)
startTime <- Sys.time()
source('ESM_core.R')
inf.force <- ezANOVA(data = tmp, dv = influence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
inf.force <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
tmp <- trials[trials$initialCorrect == T
& trials$confidenceCategory == confidenceCategories$medium
& trials$type == trialTypes$force, ]
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
tmp
inf.force <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
trials$advisorInfluence[trials$pid == 1 & trials$adviceType == 7 & trials$type == trialTypes$force]
trials$advisorInfluence[trials$pid == 1 & trials$adviceType == 7 & trials$type == trialTypes$force & trial$advisorAgrees == F]
trials$advisorInfluence[trials$pid == 1 & trials$adviceType == 7 & trials$type == trialTypes$force & trials$advisorAgrees == F]
trials$advisorInfluence[trials$pid == 1 & trials$adviceType == 7 & trials$type == trialTypes$force & trials$advisorAgrees == F & trials$confidenceCategory == confidenceCategories$medium]
complete.cases(tmp)
# Non-metacog advisors
tmp <- trials[trials$type == trialTypes$force
& !(trials$adviceType %in% c(adviceTypes$AiC, adviceTypes$AiU)), ]
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
inf.force <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(prettifyEZ(inf.force))
# Metacog advisors
tmp <- trials[trials$type == trialTypes$force
& trials$adviceType %in% c(adviceTypes$AiC, adviceTypes$AiU)
& trials$initialCorrect == T
& trials$confidenceCategory == confidenceCategories$medium, ]
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
inf.force.meta <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(prettifyEZ(inf.force.meta))
tmp
factor(tmp[ , -ncol(tmp)])
# Non-metacog advisors
tmp <- trials[trials$type == trialTypes$force
& !(trials$adviceType %in% c(adviceTypes$AiC, adviceTypes$AiU)), ]
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
tmp[ , -ncol(tmp)] <- factor(tmp[ , -ncol(tmp)])
inf.force <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(prettifyEZ(inf.force))
# Metacog advisors
tmp <- trials[trials$type == trialTypes$force
& trials$adviceType %in% c(adviceTypes$AiC, adviceTypes$AiU)
& trials$initialCorrect == T
& trials$confidenceCategory == confidenceCategories$medium, ]
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
tmp[ , -ncol(tmp)] <- factor(tmp[ , -ncol(tmp)])
inf.force.meta <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(prettifyEZ(inf.force.meta))
tmp
# Non-metacog advisors
tmp <- trials[trials$type == trialTypes$force
& !(trials$adviceType %in% c(adviceTypes$AiC, adviceTypes$AiU)), ]
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
as.data.frame(factor(tmp[ , -ncol(tmp)]))
tmp[ , -ncol(tmp)]
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
tmp
# Non-metacog advisors
tmp <- trials[trials$type == trialTypes$force
& !(trials$adviceType %in% c(adviceTypes$AiC, adviceTypes$AiU)), ]
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
inf.force <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(prettifyEZ(inf.force))
# Non-metacog advisors
tmp <- trials[trials$type == trialTypes$force
& !(trials$adviceType %in% c(adviceTypes$AiC, adviceTypes$AiU)), ]
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
inf.force <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(prettifyEZ(inf.force))
# Metacog advisors
tmp <- trials[trials$type == trialTypes$force
& trials$adviceType %in% c(adviceTypes$AiC, adviceTypes$AiU)
& trials$initialCorrect == T
& trials$confidenceCategory == confidenceCategories$medium, ]
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
inf.force.meta <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(prettifyEZ(inf.force.meta))
pairs <- getAdviceTypePairs(trials$adviceType[trials$type == trialTypes$force])
for(pair in pairs) {
meta <- adviceTypes$AiC %in% pair
# subset data
tmp <- trials[trials$type == trialTypes$force
& trials$adviceType %in% pair]
if(meta)
tmp <- tmp[trials$initialCorrect == T
& trials$confidenceCategory == confidenceCategories$medium, ]
# aggregate and factorize
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
# analyse and print
x <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(paste('ANOVA results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
print(prettifyEZ(x))
assign(paste0('inf.', getAdviceTypeName(pair[1])), x)
}
pairs <- getAdviceTypePairs(trials$adviceType[trials$type == trialTypes$force])
for(pair in pairs) {
meta <- adviceTypes$AiC %in% pair
# subset data
tmp <- trials[trials$type == trialTypes$force
& trials$adviceType %in% pair, ]
if(meta)
tmp <- tmp[trials$initialCorrect == T
& trials$confidenceCategory == confidenceCategories$medium, ]
# aggregate and factorize
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
# analyse and print
x <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(paste('ANOVA results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
print(prettifyEZ(x))
assign(paste0('inf.', getAdviceTypeName(pair[1])), x)
}
?ezDesign
pairs <- getAdviceTypePairs(trials$adviceType[trials$type == trialTypes$force])
for(pair in pairs) {
meta <- adviceTypes$AiC %in% pair
# subset data
tmp <- trials[trials$type == trialTypes$force
& trials$adviceType %in% pair, ]
if(meta)
tmp <- tmp[tmp$initialCorrect == T
& tmp$confidenceCategory == confidenceCategories$medium, ]
if(nrow(tmp) <= 0)
next()
# aggregate and factorize
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
# check data are complete
if(nrow(tmp) != 2 * 2 * unique(tmp$pid)) {
print(paste('Incomplete data for ', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T), '- skipping.'))
next()
}
# analyse and print
x <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(paste('ANOVA results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
print(prettifyEZ(x))
assign(paste0('inf.', getAdviceTypeName(pair[1])), x)
}
tmp
nrow(tmp)
2 * 2 * unique(tmp$pid)
pairs <- getAdviceTypePairs(trials$adviceType[trials$type == trialTypes$force])
for(pair in pairs) {
meta <- adviceTypes$AiC %in% pair
# subset data
tmp <- trials[trials$type == trialTypes$force
& trials$adviceType %in% pair, ]
if(meta)
tmp <- tmp[tmp$initialCorrect == T
& tmp$confidenceCategory == confidenceCategories$medium, ]
if(nrow(tmp) <= 0)
next()
# aggregate and factorize
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
# check data are complete
if(nrow(tmp) != 2 * 2 * length(unique(tmp$pid))) {
print(paste('Incomplete data for ', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T), '- skipping.'))
next()
}
# analyse and print
x <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(paste('ANOVA results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
print(prettifyEZ(x))
assign(paste0('inf.', getAdviceTypeName(pair[1])), x)
}
library(ez)
pairs <- getAdviceTypePairs(trials$adviceType[trials$type == trialTypes$force])
for(pair in pairs) {
meta <- adviceTypes$AiC %in% pair
# subset data
tmp <- trials[trials$type == trialTypes$force
& trials$adviceType %in% pair, ]
if(meta)
tmp <- tmp[tmp$initialCorrect == T
& tmp$confidenceCategory == confidenceCategories$medium, ]
if(nrow(tmp) <= 0)
next()
# aggregate and factorize
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
# check data are complete
if(nrow(tmp) != 2 * 2 * length(unique(tmp$pid))) {
print(paste('Incomplete data for ', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T), '- skipping.'))
next()
}
# analyse and print
x <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(paste('ANOVA results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
print(prettifyEZ(x))
assign(paste0('inf.', getAdviceTypeName(pair[1])), x)
}
# folderName <- "G:\\Documents\\University\\Google Drive\\Temp\\data\\processed"
# results <- loadFilesFromFolder(folderName)
# results <- removeParticipantIds(results)
folderName <- 'ESM_sim.R'
source('ESM_sim.R')
results <- simulateAdvisorChoice(5)
# unpack results
for(i in 1:length(results))
assign(names(results)[i], results[i][[1]])
cat(paste('Loaded data from', folderName))
knitr::opts_chunk$set(echo = F)
startTime <- Sys.time()
source('ESM_core.R')
trials <- cbind(trials, trialUtilityVariables(results))
all.trials <- trials
trials <- trials[trials$practice == F, ]
cat('Generated utility variables')
pairs <- getAdviceTypePairs(trials$adviceType[trials$type == trialTypes$force])
for(pair in pairs) {
meta <- adviceTypes$AiC %in% pair
# subset data
tmp <- trials[trials$type == trialTypes$force
& trials$adviceType %in% pair, ]
if(meta)
tmp <- tmp[tmp$initialCorrect == T
& tmp$confidenceCategory == confidenceCategories$medium, ]
if(nrow(tmp) <= 0)
next()
# aggregate and factorize
tmp <- aggregate(advisorInfluence ~ adviceType + advisorAgrees + pid, tmp, mean)
for(v in names(tmp[ , -ncol(tmp)])) tmp[ ,v] <- factor(tmp[ ,v])
# check data are complete
if(nrow(tmp) != 2 * 2 * length(unique(tmp$pid))) {
print(paste('Incomplete data for ', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T), '- skipping.'))
next()
}
# analyse and print
x <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(paste('ANOVA results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
print(prettifyEZ(x))
assign(paste0('inf.', getAdviceTypeName(pair[1])), x)
}
as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", getAdviceTypeName(pair[1]),
' * ', getAdviceTypeName(pair[2]), ')'))
tmp <- trials[trials$type == trialTypes$dual, ]
for(pair in pairs) {
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , getAdviceTypeName(pair[1])] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , getAdviceTypeName(pair[2])] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
f <- as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", getAdviceTypeName(pair[1]),
' * ', getAdviceTypeName(pair[2]), ')'))
model <- lm(f, data = df)
print(summary(model))
}
tmp <- trials[trials$type == trialTypes$dual, ]
for(pair in pairs) {
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , getAdviceTypeName(pair[1])] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , getAdviceTypeName(pair[2])] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
if(nrow(df) == 0)
next()
print(paste('LM results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
f <- as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", getAdviceTypeName(pair[1]),
' * ', getAdviceTypeName(pair[2]), ')'))
model <- lm(f, data = df)
print(summary(model))
}
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
tmp <- trials[trials$type == trialTypes$dual, ]
for(pair in pairs) {
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
if(nrow(df) == 0)
next()
print(paste('LM results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
f <- as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", aNames[1],
' * ', aNames[2], ')'))
model <- lm(f, data = df)
print(summary(model))
}
devtools::install_github('rstudio/rmarkdown')
