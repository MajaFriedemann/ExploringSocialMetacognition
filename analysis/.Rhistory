5951c8505f42c10001ff3f93
05/09/2018, 00:15
00:46:06
MX5PC2Z4
AWAITING REVIEW
58e3a49dd7050b0001af4632
05/09/2018, 00:31
00:44:51
MX5PC2Z4
AWAITING REVIEW
5b461982b002f50001253d0e
05/09/2018, 10:48
00:36:47
MX5PC2Z4
AWAITING REVIEW
5b745e5224dc7900017e0d3e
05/09/2018, 10:44
00:36:11
MX5PC2Z4
AWAITING REVIEW
5aaa59e2f5c89a0001e25150
05/09/2018, 10:44
00:48:21
MX5PC2Z4
AWAITING REVIEW
5b08149368eff50001d1d192 ')
if(exists('rawString')) {
prolificIds <- NULL
matches <- gregexpr('5[a-z0-9]{23}', rawString)
for(x in matches[[1]])
prolificIds <- c(prolificIds, substr(rawString, x, x+23))
}
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
tmp <- NULL
for(i in 1:length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- names(prolificIdHashes)[prolificIdHashes %in% all.participants$id[all.participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i],
excluded = all.participants$excluded[all.participants$pid==pid],
extra = all.participants$debriefComments[all.participants$pid==pid]))
else
print(paste('PID',pid,'has no prolific hash associated'))
}
markers <- quantile(tmp$brieravg[tmp$excluded==F])
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
tmp$reward[i] <- round(2 - 2/(length(markers)-1)*(tmp$quantile[i]-1),2)
}
tmp$reward[tmp$excluded!=F] <- 0 # no bonus for excluded participants
for(r in 1:nrow(tmp))
print(paste0(tmp$prolificId[r], ', ', tmp$reward[r]))
prolificIds[!(prolificIds %in% tmp$prolificId)]
write.csv(data.frame(id = tmp$prolificId[tmp$reward>0], name = tmp$reward[tmp$reward>0]),
'tmp.csv',
sep = ',',
row.names = F,
col.names = F,
quote = F)
}
shiny::runApp('AccuracyCurves')
tmp <- aggregate(adviceType ~ pid,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$HighAcc)/length(x))
df.xii.i <- NULL
for(pid in unique(participants$pid)) {
tmp <- trials[trials$type==trialTypes$choice & trials$pid==pid, ]
df.xii.i <- rbind(df.xii.i, data.frame(pid,
HighAccPref=mean(tmp$adviceType==adviceTypes$HighAcc),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==adviceTypes$HighAcc] -
tmp$influence[tmp$adviceType==adviceTypes$LowAcc]))))
}
warnings()
df.xii.i <- NULL
for(pid in unique(participants$pid)) {
tmp <- trials[trials$type==trialTypes$choice & trials$pid==pid, ]
df.xii.i <- rbind(df.xii.i, data.frame(pid,
HighAccPref=mean(tmp$adviceType==adviceTypes$HighAcc),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==adviceTypes$HighAcc]) -
sum(tmp$influence[tmp$adviceType==adviceTypes$LowAcc]))))
}
summary(df.xii.i)
cor.test(tmp$HighAccPref, tmp$InfluenceDiff)
cor.test(df.xii.i$HighAccPref, df.xii.i$InfluenceDiff)
correlationBF(df.xii.i$HighAccPref, df.xii.i$InfluenceDiff)
gg.xii.i <- ggplot(df.xii.i, aes(x = HighAccPref, y = InfluenceDiff)) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = pid)) +
style.long
if(!require(jsonlite)) {
install.packages("jsonlite")
library(jsonlite)
}
if(!require(BayesFactor)) {
install.packages('BayesFactor')
library(BayesFactor)
}
if(!require(tidyverse)) {
install.packages('tidyverse')
library(tidyverse)
}
if(!require(reshape2)) {
install.packages('reshape2')
library(reshape2)
}
if(!require(lme4)) {
install.packages('lme4')
library(lme4)
}
if(!require(lsr)) {
install.packages('lsr')
library(lsr)
}
if(!require(knitr)) {
install.packages('knitr')
library(knitr)
}
gg.xii.i <- ggplot(df.xii.i, aes(x = HighAccPref, y = InfluenceDiff)) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = pid)) +
style.long
gg.xii.i
gg.xii.i <- ggplot(df.xii.i, aes(x = HighAccPref, y = InfluenceDiff)) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
style.long
gg.xii.i
gg.xii.i <- ggplot(df.xii.i, aes(x = HighAccPref, y = InfluenceDiff)) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between influence difference and preference for high-accuracy advisor') +
style.long
gg.xii.i
names(trials)
unique(trials$block)
df.xii.i.ii <- NULL
for(pid in unique(participants$pid)) {
for(block in c(3,5)) {
# Look for the favourate advisor in each block and use the preference strength for that advisor
tmp <- trials[trials$block==block & trials$pid==pid, ]
aid <- ifelse(mean(tmp$adviceType==adviceTypes$HighAcc, adviceTypes$HighAcc, adviceTypes$LowAcc))
df.xii.i.ii <- rbind(df.xii.i, data.frame(pid,
PrefStrength=mean(tmp$adviceType==adviceTypes$aid),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==adviceTypes$aid]) -
sum(tmp$influence[tmp$adviceType!=adviceTypes$aid]))))
}
}
cor.test(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
correlationBF(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
df.xii.i.ii <- NULL
for(pid in unique(participants$pid)) {
for(block in c(3,5)) {
# Look for the favourate advisor in each block and use the preference strength for that advisor
tmp <- trials[trials$block==block & trials$pid==pid, ]
aid <- ifelse(mean(tmp$adviceType==adviceTypes$HighAcc)>.5, adviceTypes$HighAcc, adviceTypes$LowAcc)
df.xii.i.ii <- rbind(df.xii.i, data.frame(pid,
PrefStrength=mean(tmp$adviceType==adviceTypes$aid),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==adviceTypes$aid]) -
sum(tmp$influence[tmp$adviceType!=adviceTypes$aid]))))
}
}
cor.test(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
correlationBF(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
df.xii.i.ii
mean(tmp$adviceType==adviceTypes$HighAcc)>.5
mean(tmp$adviceType==adviceTypes$HighAcc)
tmp$adviceType==adviceTypes$HighAcc
mean(tmp$adviceType==adviceTypes$aid)
df.xii.i.ii <- NULL
for(pid in unique(participants$pid)) {
for(block in c(3,5)) {
# Look for the favourate advisor in each block and use the preference strength for that advisor
tmp <- trials[trials$block==block & trials$pid==pid, ]
aid <- ifelse(mean(tmp$adviceType==adviceTypes$HighAcc)>.5, adviceTypes$HighAcc, adviceTypes$LowAcc)
df.xii.i.ii <- rbind(df.xii.i, data.frame(pid,
PrefStrength=mean(tmp$adviceType==aid),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==aid]) -
sum(tmp$influence[tmp$adviceType!=aid]))))
}
}
cor.test(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
correlationBF(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
mean(tmp$adviceType==aid)
(sum(tmp$influence[tmp$adviceType==aid]) -
sum(tmp$influence[tmp$adviceType!=aid]))
data.frame(pid,
PrefStrength=mean(tmp$adviceType==aid),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==aid]) -
sum(tmp$influence[tmp$adviceType!=aid])))
df.xii.i.ii <- NULL
for(pid in unique(participants$pid)) {
for(block in c(3,5)) {
# Look for the favourate advisor in each block and use the preference strength for that advisor
tmp <- trials[trials$block==block & trials$pid==pid, ]
aid <- ifelse(mean(tmp$adviceType==adviceTypes$HighAcc)>.5, adviceTypes$HighAcc, adviceTypes$LowAcc)
df.xii.i.ii <- rbind(df.xii.i, data.frame(pid,
PrefStrength=mean(tmp$adviceType==aid),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==aid]) -
sum(tmp$influence[tmp$adviceType!=aid]))))
}
}
df.xii.i.ii <- NULL
for(pid in unique(participants$pid)) {
for(block in c(3,5)) {
# Look for the favourate advisor in each block and use the preference strength for that advisor
tmp <- trials[trials$block==block & trials$pid==pid, ]
aid <- ifelse(mean(tmp$adviceType==adviceTypes$HighAcc)>.5, adviceTypes$HighAcc, adviceTypes$LowAcc)
df.xii.i.ii <- rbind(df.xii.ii, data.frame(pid,
PrefStrength=mean(tmp$adviceType==aid),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==aid]) -
sum(tmp$influence[tmp$adviceType!=aid]))))
}
}
cor.test(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
correlationBF(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
df.xii.i.ii <- NULL
for(pid in unique(participants$pid)) {
for(block in c(3,5)) {
# Look for the favourate advisor in each block and use the preference strength for that advisor
tmp <- trials[trials$block==block & trials$pid==pid, ]
aid <- ifelse(mean(tmp$adviceType==adviceTypes$HighAcc)>.5, adviceTypes$HighAcc, adviceTypes$LowAcc)
df.xii.i.ii <- rbind(df.xii.i.ii, data.frame(pid,
PrefStrength=mean(tmp$adviceType==aid),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==aid]) -
sum(tmp$influence[tmp$adviceType!=aid]))))
}
}
cor.test(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
correlationBF(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
df.xii.i.i <- NULL
for(pid in unique(participants$pid)) {
tmp <- trials[trials$type==trialTypes$choice & trials$pid==pid, ]
df.xii.i.i <- rbind(df.xii.i.i, data.frame(pid,
HighAccPref=mean(tmp$adviceType==adviceTypes$HighAcc),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==adviceTypes$HighAcc]) -
sum(tmp$influence[tmp$adviceType==adviceTypes$LowAcc]))))
}
cor.test(df.xii.i.i$HighAccPref, df.xii.i.i$InfluenceDiff)
correlationBF(df.xii.i.i$HighAccPref, df.xii.i.i$InfluenceDiff)
df.xii.i.ii <- NULL
for(pid in unique(participants$pid)) {
for(block in c(3,5)) {
# Look for the favourate advisor in each block and use the preference strength for that advisor
tmp <- trials[trials$block==block & trials$pid==pid, ]
aid <- ifelse(mean(tmp$adviceType==adviceTypes$HighAcc)>.5, adviceTypes$HighAcc, adviceTypes$LowAcc)
df.xii.i.ii <- rbind(df.xii.i.ii, data.frame(pid,
PrefStrength=mean(tmp$adviceType==aid),
InfluenceDiff=(sum(tmp$influence[tmp$adviceType==aid]) -
sum(tmp$influence[tmp$adviceType!=aid]))))
}
}
cor.test(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
correlationBF(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
gg.xii.i.ii <- ggplot(df.xii.i.ii, aes(x = PrefStrength, y = InfluenceDiff)) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between influence difference and \npreference strength for preferred advisor') +
style.long
gg.xii.i.ii
ggplot(all.trials, aes(x = id, y = dotDifference)) +
geom_line() +
geom_smooth(method = 'lm') +
scale_x_continuous(limits = c(0,246)) +
style.long +
facet_wrap(.~pid)
ggplot(all.trials, aes(x = id, y = dotDifference, colour = as.factor(pid))) +
geom_line() +
geom_smooth(method = 'lm') +
scale_x_continuous(limits = c(0,246)) +
style.long
ggplot(all.trials, aes(x = id, y = dotDifference, colour = as.factor(pid))) +
geom_line() +
geom_smooth(method = 'lm', se = F) +
scale_x_continuous(limits = c(0,246)) +
style.long
tmp <- trials[trials$pid==pid, ]
x <- lm(dotDifference ~ id, tmp)
x$coefficients
x$coefficients[2]
df.xii.ii.i <- NULL
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid==pid, ]
df.xii.ii.i <- rbind(df.xii.ii.i,
data.frame(pid,
HighAccPref=mean(tmp$adviceType[tmp$type==trialTypes$choice]==adviceTypes$HighAcc),
DotDiffCoef=lm(dotDifference ~ id, tmp)$coefficents[2]))
}
lm(dotDifference ~ id, tmp)$coefficents[2]
lm(dotDifference ~ id, tmp)$coefficients[2]
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid==pid, ]
df.xii.ii.i <- rbind(df.xii.ii.i,
data.frame(pid,
HighAccPref=mean(tmp$adviceType[tmp$type==trialTypes$choice]==adviceTypes$HighAcc),
DotDiffCoef=lm(dotDifference ~ id, tmp)$coefficients[2]))
}
cor.test(df.xii.i.ii$PrefStrength, df.xii.i.ii$InfluenceDiff)
cor.test(df.xii.ii.i$PrefStrength, df.xii.i.ii$InfluenceDiff)
cor.test(df.xii.ii.i$HighAccPref, df.xii.ii.i$DotDiffCoef)
correlationBF(df.xii.ii.i$HighAccPref, df.xii.ii.i$DotDiffCoef)
gg.xii.ii.i <- ggplot(df.xii.i.ii, aes(x = PrefStrength, y = InfluenceDiff)) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between dot difference increase and \nHighAcc advisor preference') +
style.long
gg.xii.ii.i
gg.xii.ii.i <- ggplot(df.xii.ii.i, aes(x = PrefStrength, y = InfluenceDiff)) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between dot difference increase and \nHighAcc advisor preference') +
style.long
gg.xii.ii.i
gg.xii.ii.i <- ggplot(df.xii.ii.i, aes(x = HighAccPref, y = DotDiffCoef)) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between dot difference increase and \nHighAcc advisor preference') +
style.long
gg.xii.ii.i
gg.xii.i.ii <- ggplot(df.xii.i.ii, aes(x = PrefStrength, y = InfluenceDiff)) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between influence difference and \npreference strength for preferred advisor') +
style.long
gg.xii.i.ii
gg.xii.i.ii <- ggplot(df.xii.i.ii, aes(x = PrefStrength, y = InfluenceDiff)) +
geom_vline(linetype = "dashed", color = "black", xintercept = .5, size = 1) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between influence difference and \npreference strength for preferred advisor') +
style.long
gg.xii.i.ii
gg.xii.i.i <- ggplot(df.xii.i.i, aes(x = HighAccPref, y = InfluenceDiff)) +
geom_vline(linetype = "dashed", color = "black", xintercept = .5, size = 1) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between influence difference and preference for high-accuracy advisor') +
style.long
gg.xii.i.i
gg.xii.ii.i <- ggplot(df.xii.ii.i, aes(x = HighAccPref, y = DotDiffCoef)) +
geom_vline(linetype = "dashed", color = "black", xintercept = .5, size = 1) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between dot difference increase and \nHighAcc advisor preference') +
style.long
gg.xii.ii.i
tmp <- trials[trials$pid==pid, ]
r <- lm(initialCorrect ~ initialConfidence, tmp)
r$coefficients
plot(initialCorrect ~ initialConfidence, tmp)
ggplot(tmp, aes(y=initialCorrect, x=initialConfidence) + geom_smooth(method = 'lm')
}
```
ggplot(tmp, aes(y=initialCorrect, x=initialConfidence)) + geom_smooth(method = 'lm')
?cast
ggplot(tmp, aes(y=initialCorrect, x=initialConfidence)) +
geom_smooth(method = method = "glm", method.args = list(family = "binomial"))
ggplot(tmp, aes(y=initialCorrect, x=initialConfidence)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
tmp$initialCorrect
ggplot(tmp, aes(y=as.numeric(initialCorrect), x=initialConfidence)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(tmp, aes(y=as.numeric(initialCorrect), x=initialConfidence)) +
geom_point( ) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(tmp, aes(y=as.numeric(initialCorrect), x=initialConfidence)) +
geom_smooth(method = "lm", method.args = list(family = "binomial"))
ggplot(tmp, aes(y=as.numeric(initialCorrect), x=initialConfidence)) +
geom_smooth(method = "lm")
r$coefficients
df.xii.ii.ii <- NULL
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid==pid, ]
r <- lm(initialCorrect ~ initialConfidence, tmp)
r$coefficients[2]
df.xii.ii.ii <- rbind(df.xii.ii.ii,
data.frame(pid,
HighAccPref=mean(tmp$adviceType[tmp$type==choice]==adviceTypes$HighAcc),
Resolution=lm(initialCorrect ~ initialConfidence, tmp)$coefficients[2]))
}
cor.test(df.xii.ii.ii$HighAccPref, df.xii.ii.ii$Resolution)
correlationBF(df.xii.ii.ii$HighAccPref, df.xii.ii.ii$Resolution)
df.xii.ii.ii <- NULL
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid==pid, ]
r <- lm(initialCorrect ~ initialConfidence, tmp)
r$coefficients[2]
df.xii.ii.ii <- rbind(df.xii.ii.ii,
data.frame(pid,
HighAccPref=mean(tmp$adviceType[tmp$type==trialTypes$choice]==adviceTypes$HighAcc),
Resolution=lm(initialCorrect ~ initialConfidence, tmp)$coefficients[2]))
}
cor.test(df.xii.ii.ii$HighAccPref, df.xii.ii.ii$Resolution)
correlationBF(df.xii.ii.ii$HighAccPref, df.xii.ii.ii$Resolution)
gg.xii.ii.ii <- ggplot(df.xii.ii.ii, aes(x = HighAccPref, y = Resolution)) +
geom_vline(linetype = "dashed", color = "black", xintercept = .5, size = 1) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between metacognitive resolution and \nHighAcc advisor preference') +
style.long
gg.xii.ii.ii
ggplot(df.xii.ii.ii, aes(x = 1:50), colour = as.factor(pid)) +
stat_function(function(x,z)x*z, args=(z=df.xii.ii.ii$Resolution)) +
style.long
ggplot(df.xii.ii.ii, aes(x = 1:50), colour = as.factor(pid)) +
stat_function(fun = function(x,z)x*z, args=(z=df.xii.ii.ii$Resolution)) +
style.long
ggplot(df.xii.ii.ii, aes(x = 1:50), colour = as.factor(pid)) +
stat_function(fun = function(x,z){x*z}, args=(z=df.xii.ii.ii$Resolution)) +
style.long
ggplot(df.xii.ii.ii, aes(x = 1:50), colour = as.factor(pid)) +
stat_function(fun = function(x,z){x*z}, args=(z=Resolution)) +
style.long
ggplot(df.xii.ii.ii, aes(x = 1:50, colour = as.factor(pid))) +
stat_function(fun = function(x,z){x*z}, args=(z=Resolution)) +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F) +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, alpha = .5) +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, linetype = 'dotted') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, linetype = 'dotted') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, linetype = 'dashed') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
stat_summary(geom = 'line', method = 'lm') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
stat_summary(geom = 'line', fun.y = lm) +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
stat_summary(geom = 'line', fun.data = lm) +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
stat_summary(geom = 'line', fun.y = 'lm') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
geom_smooth(aes(x = initialConfidence, y = as.numeric(initialCorrect)), method = 'line') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
geom_smooth(aes(x = initialConfidence, y = as.numeric(initialCorrect)), method = 'lm') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
geom_smooth(aes(x = initialConfidence, y = as.numeric(initialCorrect)), method = 'lm', se = F) +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
geom_smooth(inherit.aes = F, aes(x = initialConfidence, y = as.numeric(initialCorrect)), method = 'lm', se = F) +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5) +
geom_smooth(inherit.aes = F, aes(x = initialConfidence, y = as.numeric(initialCorrect)),
method = 'lm', se = T, colour = 'black', alpha = .3, linetype = 'dashed') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 0.5, alpha = .3) +
geom_smooth(inherit.aes = F, aes(x = initialConfidence, y = as.numeric(initialCorrect)),
method = 'lm', se = T, colour = 'black', alpha = .3, linetype = 'dashed') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = 1, alpha = .25) +
geom_smooth(inherit.aes = F, aes(x = initialConfidence, y = as.numeric(initialCorrect)),
method = 'lm', se = T, colour = 'black', alpha = .3, linetype = 'dashed') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = .5) +
geom_smooth(inherit.aes = F, aes(x = initialConfidence, y = as.numeric(initialCorrect)),
method = 'lm', se = T, colour = 'black', alpha = .3, linetype = 'dashed') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = .5) +
geom_smooth(inherit.aes = F, aes(x = initialConfidence, y = as.numeric(initialCorrect)),
method = 'lm', se = T, colour = 'black', alpha = .3, linetype = 'dashed') +
style.long
ggplot(trials, aes(x = initialConfidence, y = as.numeric(initialCorrect), colour = as.factor(pid))) +
geom_smooth(method = 'lm', se = F, size = .5) +
geom_smooth(inherit.aes = F, aes(x = initialConfidence, y = as.numeric(initialCorrect)),
method = 'lm', se = T, colour = 'black', alpha = .3, linetype = 'dashed') +
labs(title = 'P(Correct) by confidence for initial responses') +
style.long
gg.xii.ii.ii <- ggplot(df.xii.ii.ii, aes(x = HighAccPref, y = Resolution)) +
geom_vline(linetype = "dashed", color = "black", xintercept = .5, size = 1) +
geom_smooth(method = 'lm') +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Correlation between metacognitive resolution and \nHighAcc advisor preference') +
style.long
gg.xii.ii.ii
?shiny::mainPanel
shiny::runApp('AccuracyCurves')
runApp('AccuracyCurves')
