if(nrow(tmp) != 2 * 2 * length(unique(tmp$pid))) {
print(paste('Incomplete data for ', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T), '- skipping.'))
next()
}
# analyse and print
x <- ezANOVA(data = tmp, dv = advisorInfluence, wid = pid,
within = .(adviceType, advisorAgrees),
return_aov = T)
print(paste('ANOVA results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
print(prettifyEZ(x))
assign(paste0('inf.', getAdviceTypeName(pair[1])), x)
}
x
tmp
pairs
tmp <- trials[trials$type == trialTypes$dual, ]
for(pair in pairs) {
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
if(nrow(df) == 0)
next()
print(paste('LM results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
f <- as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", aNames[1],
' * ', aNames[2], ')'))
model <- lm(f, data = df)
print(summary(model))
}
tmp <- trials[trials$type == trialTypes$dual, ]
if(length(pairs) == 0)
print("No advisor pairs found for analysis of dual trials.")
for(pair in pairs) {
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
if(nrow(df) == 0)
next()
print(paste('LM results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
f <- as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", aNames[1],
' * ', aNames[2], ')'))
model <- lm(f, data = df)
print(summary(model))
}
pairs <- getAdviceTypePairs(tmp$adviceType)
tmp <- trials[trials$type == trialTypes$dual, ]
pairs <- getAdviceTypePairs(tmp$adviceType)
if(length(pairs) == 0)
print("No advisor pairs found for analysis of dual trials.")
for(pair in pairs) {
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
if(nrow(df) == 0)
next()
print(paste('LM results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
f <- as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", aNames[1],
' * ', aNames[2], ')'))
model <- lm(f, data = df)
print(summary(model))
}
pairs
pairs
tmp$adviceType
trials[trials$type == trialTypes$dual, ]
pairs <- getAdviceTypePairs(c(tmp$advisor0type, tmp$advisor1type))
pairs
tmp <- trials[trials$type == trialTypes$dual, ]
pairs <- getAdviceTypePairs(c(tmp$advisor0type, tmp$advisor1type))
if(length(pairs) == 0)
print("No advisor pairs found for analysis of dual trials.")
for(pair in pairs) {
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
if(nrow(df) == 0)
next()
print(paste('LM results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
f <- as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", aNames[1],
' * ', aNames[2], ')'))
model <- lm(f, data = df)
print(summary(model))
}
df.infLM <- NULL
for(pair in pairs) {
ts <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
x <- NULL
for(pid in unique(ts$pid)) {
# standardize the confidence scores
df <- ts[ts$pid == pid, ]
df$confidenceShift <- scale(df$confidenceShift)
df$initialConfidence <- scale(df$initialConfidence)
# rearrange data so advisors are separated by type rather than order
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
if(nrow(df) == 0)
next()
f <- as.formula(paste0("confidenceShift ~ initialConfidence + (", aNames[1], ' * ', aNames[2], ')'))
model <- lm(f, data = df)
x <- rbind(x, data.frame(pid, refAdvisor = pair[1], otherAdvisor = pair[2],
intercept = model$coefficients[1],
refAdvisorAgrees = model$coefficients[2],
otherAdvisorAgrees = model$coefficients[3],
interaction = model$coefficients[4]))
}
if(!is.null(x) && nrow(x) > 0) {
cat(paste(md.ttest(x$refAdvisorAgrees, x$otherAdvisorAgrees,
labels = paste0('*M*|',getAdviceTypeName(pair)),
paired = T), '\n'))
df.infLM <- rbind(df.infLM, x)
}
}
df.prInf <- NULL
for(pid in unique(trials$pid)) {
for(b in unique(trials$block[trials$type %in% c(trialTypes$choice, trialTypes$change)])) {
ts <- trials[trials$pid == pid & trials$block == b, ]
advisorIds <- unique(ts$advisorId)
# preference strength on choice trials
prefStrength <- mean(ts$advisorId == advisorIds[1], na.rm = T)
# influence difference on forced trials
ts <- trials[trials$pid == pid & trials$block == (b-1), ]
inf <- NULL
if(ts$type[1] == trialTypes$dual) {
for(a in advisorIds)
inf <- c(inf, mean(sapply(1:nrow(ts), function(i) {
trial <- ts[i, ]
if(trial$advisor0id == a) return(trial$advisor0influence)
if(trial$advisor1id == a) return(trial$advisor1influence)
return(NA)
}), na.rm = T))
} else {
# force trials
for(a in advisorIds)
inf <- c(inf, mean(ts$advisorInfluence[ts$advisorId == a], na.rm = T))
}
# key to favourite advisor
if(prefStrength < .5) {
prefStrength <- 1-prefStrength
infDiff <- inf[2] - inf[1]
favAdvisorId <- advisorIds[1]
nfAdvisorId <- advisorIds[2]
} else {
infDiff <- inf[1] - inf[2]
favAdvisorId <- advisorIds[2]
nfAdvisorId <- advisorIds[1]
}
df.prInf <- rbind(df.prInf, data.frame(pid, prefStrength, infDiff,
favAdvisorId, nfAdvisorId,
favAdviceType = advisors$adviceType[advisors$pid == pid
& advisors$id == favAdvisorId],
nfAdviceType = advisors$adviceType[advisors$pid == pid
& advisors$id == nfAdvisorId]))
}
}
tmp <- aggregate(cbind(prefStrength, infDiff) ~ pid, df.prInf, FUN = mean) # reaggregate
cor.test(tmp$prefStrength, tmp$infDiff)
correlationBF(tmp$prefStrength, tmp$infDiff)
tmp
plot(tmp$prefStrength, tmp$infDiff)
ggplot(tmp, aes(y = prefStrength, x = infDiff)) +
geom_rect(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = .5, fill = 'grey', alpha = .5) +
geom_rect(xmin = -Inf, xmax = Inf, ymin = 1, ymax = Inf, fill = 'grey', alpha = .5) +
geom_smooth(method = 'lm', fill = 'lightblue', alpha = 0.5) +
geom_point(aes(colour = as.factor(pid))) +
labs(title = 'Influence difference and preference strength\nfor preferred advisor',
y = 'P(Preferred advisor chosen)',
x = 'Mean Influence difference on Forced trials') +
scale_x_continuous(expand = c(0,0.2)) +
style.long
# Fit models using a c++ implementation of a gradient descent algorithm
sourceCpp('src/models.cpp')
df.models <- NULL
# Run the models for each participant
for(pid in unique(trials$pid)) {
pair <- getAdviceTypePairs(c(trials[trials$pid == pid, "adviceType"],
trials[trials$pid == pid, "advisor0type"],
trials[trials$pid == pid, "advisor1type"]))
for(pair in pairs) {
# Mould the data into the format expected by the c++ code
ts <- trials[trials$pid == pid & trials$type != trialTypes$catch, ]
input <- cbind(scale(ts$initialConfidence),
getAdviceByType(ts, pair[1]),
getAdviceByType(ts, pair[2]),
scale(ts$confidenceShift))
# Run the models
modelResults <- gradientDescent(input)
# Akaike's Information Criterion
# AIC = n * ln(MSE) + 2k
# k = number of predictors + 1 (for intercept)
n <- sum(!is.na(input[ ,2] | input[ ,3]))
AIC <- n * log(modelResults$MSE)
AIC <- AIC + 2 * c(2, 4, 5) # model k vales
# Save a summary of the result
tmp <- cbind(data.frame(pid, refAdvisor = pair[1], otherAdvisor = pair[2], n, AIC = t(AIC)),
modelResults$parameters)
tmp$mse <- t(modelResults$MSE)
rownames(tmp) <- NULL
df.models <- rbind(df.models, tmp)
}
}
# model evaluation
df.models$refAdvisor <- getAdviceTypeName(df.models$refAdvisor)
df.models$model <- as.factor(df.models$model)
ggplot(df.models, aes(x = model, y = AIC, colour = refAdvisor, fill = refAdvisor)) +
stat_summary(geom = 'col', fun.y = mean, position = position_dodge(.9), width = .8) +
stat_summary(geom = 'errorbar', fun.data = mean_cl_normal, position = position_dodge(.9), colour = 'black', width = .2) +
geom_point(alpha = 0.50, position = position_jitterdodge(jitter.width = .15, dodge.width = .9), colour = 'black') +
labs(y = "Akaike's Information Criterion") +
style
tmp <- NULL
for(a in unique(df.models$refAdvisor)) {
for(pid in unique(df.models$pid)) {
x <- df.models[df.models$pid == pid & df.models$refAdvisor == a, ]
bestModel <- factor(x$model[x$AIC == min(x$AIC)])
tmp <- rbind(tmp, data.frame(refAdvisor = a, pid,
bestModel))
}
}
tmp <- aggregate(pid ~ bestModel + refAdvisor, data = tmp, FUN = length)
# Fill empty rows
for(a in unique(df.models$refAdvisor)) {
for(m in unique(df.models$model)) {
if(nrow(tmp[tmp$refAdvisor == a & tmp$bestModel == m, ]) == 0)
tmp <- rbind(tmp, data.frame(bestModel = m, refAdvisor = a, pid = 0))
}
}
names(tmp)[3] <- "participants"
ggplot(tmp, aes(x = refAdvisor, y = participants, fill = bestModel)) +
geom_col(position = position_dodge()) +
scale_fill_discrete(limits = c(1:3), name = 'model') +
labs(y = "Participants fitted best by model") +
style
names(trials)
advisors$groupId
#' Return an Advisor's groupId from their ID for a given participant. Updated version of getAdviceType
#' @param advisorId
#' @param participantId will be joined to advisorId as a data.frame, so must be of the same length
#' @param advisors data frame of advisors
#' @return adviceType of specified advisor
findAdviceType <- function(advisorId, participantId, advisors) {
return(.lookupAdvisorProperty('groupId', advisorId, participantId, advisors))
}
#' Return an Advisor's adviceType from their ID for a given participant. Updated version of getAdviceType
#' @param advisorId
#' @param participantId will be joined to advisorId as a data.frame, so must be of the same length
#' @param advisors data frame of advisors
#' @return adviceType of specified advisor
findAdviceType <- function(advisorId, participantId, advisors) {
return(.lookupAdvisorProperty('adviceType', advisorId, participantId, advisors))
}
#' Return a property of an Advisor from their ID for a given participant.
#' @param property to return. Should be a column in advisors
#' @param advisorId
#' @param participantId will be joined to advisorId as a data.frame, so must be of the same length
#' @param advisors data frame of advisors
#' @return property of specified advisor
.lookupAdvisorProperty <- function(property, advisorId, participantId, advisors) {
df <- data.frame(advisorId, participantId, type = NA)
if(any(!is.na(df$advisorId))) {
tmp <- df[!is.na(df$advisorId), ]
tmp$type <- sapply(1:nrow(tmp),
function(i) advisors[advisors$pid == tmp$participantId[i]
& advisors$id == tmp$advisorId[i], property])
for(i in 1:nrow(tmp))
if(length(unlist(tmp$type[i])) == 0)
tmp$type[i] <- list(NA)
df[!is.na(df$advisorId), ] <- tmp
}
return(unlist(df$type))
}
#' Return an Advisor's groupId from their ID for a given participant. Updated version of getAdviceType
#' @param advisorId
#' @param participantId will be joined to advisorId as a data.frame, so must be of the same length
#' @param advisors data frame of advisors
#' @return adviceType of specified advisor
findAdvisorGroup <- function(advisorId, participantId, advisors) {
return(.lookupAdvisorProperty('groupId', advisorId, participantId, advisors))
}
#' Return an Advisor's adviceType from their ID for a given participant. Updated version of getAdviceType
#' @param advisorId
#' @param participantId will be joined to advisorId as a data.frame, so must be of the same length
#' @param advisors data frame of advisors
#' @return adviceType of specified advisor
findAdviceType <- function(advisorId, participantId, advisors) {
return(.lookupAdvisorProperty('adviceType', advisorId, participantId, advisors))
}
findAdvisorGroup(trials$advisorId, trials$pid, advisors)
out
out <- data.frame()
# advisor group ids
out$advisorGroup <- findAdvisorGroup(trials$advisorId, trials$pid, advisors)
out <- NULL
# advisor group ids
out$advisorGroup <- findAdvisorGroup(trials$advisorId, trials$pid, advisors)
out$advisor0group <- findAdviceGroup(trials$advisor0id, trials$pid, advisors)
out$advisor0group <- findAdvisorGroup(trials$advisor0id, trials$pid, advisors)
out$advisor1group <- findAdvisorGroup(trials$advisor1id, trials$pid, advisors)
out
trials <- cbind(trials, out)
df.changeGroup <- NULL
tmp <- trials[trials$type == trialTypes$change, ]
pairs <- getAdviceTypePairs(tmp$adviceType)
changes <- NULL
# Calculate change proportions favouring same-group advisor for each participant
for(pid in unique(tmp$pid)) {
ts <- tmp[tmp$pid == pid & tmp$type == trialTypes$change, ]
ts <- ts[ts$advisor0type %in% pair & ts$advisor1type %in% pair, ]
changed <- ts$advisorGroup[ts$defaultAdvisor != ts$advisorId]
if(length(changed) == 0)
m <- 0
else
m <- mean(changed == participants$groupId[participants$pid == pid], na.rm = T)
changes <- rbind(changes, data.frame(m, p = sum(!is.na(changed)) / nrow(ts)))
}
changes
cat(md.ttest(changes$m, mu = .5, labels = '*M*|SameGroup', isProportion = T))
colnames(changes) <- c(paste0('MChangeToGroup_', getAdviceTypeName(refAdvisor)),
paste0('PChangeToGroup_', getAdviceTypeName(refAdvisor)))
changes
df.changeGroup <- cbind(df.changeGroup, changes);
df.changeGroup <- data.frame(pid = unique(tmp$pid))
df.changeGroup <- cbind(df.changeGroup, changes);
df.changeGroup
tmp <- trials[trials$type == trialTypes$dual, ]
pairs <- getAdviceTypePairs(c(tmp$advisor0type, tmp$advisor1type))
if(length(pairs) == 0)
cat("*No advisor pairs found for analysis of dual trials.*")
pair
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
df[ , paste0(aNames[1], 'GroupMatch')] <- ifelse(df$advisor0type == pair[1],
df$advisor0group == participants$groupId[participants$pid == df$pid],
df$advisor0group != participants$groupId[participants$pid == df$pid])
df$advisor0type == pair[1]
df$advisor0type
names(ds)
names(df)
pair[1]
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
df[ , paste0(aNames[1], 'GroupMatch')] <- sapply(1:nrow(df), function(i) {
g <- participants$groupId[participants$pid == df$pid[i]]
if(df$advisor0type[i] == pair[1])
df$advisor0group == g
else
df$advisor1group == g
})
df
sapply(1:nrow(df), function(i) {
g <- participants$groupId[participants$pid == df$pid[i]]
if(df$advisor0type[i] == pair[1])
df$advisor0group == g
else
df$advisor1group == g
})
sapply(1:nrow(df), function(i) {
g <- participants$groupId[participants$pid == df$pid[i]]
if(df$advisor0type[i] == pair[1])
df$advisor0group[i] == g
else
df$advisor1group[i] == g
})
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
df[ , paste0(aNames[1], 'GroupMatch')] <- sapply(1:nrow(df), function(i) {
g <- participants$groupId[participants$pid == df$pid[i]]
if(df$advisor0type[i] == pair[1])
df$advisor0group[i] == g
else
df$advisor1group[i] == g
})
df
df[ ,c(ncol(df)-1, ncol(df))]
df[ ,c('pid', ncol(df)-1, ncol(df))]
df[ ,c(1, ncol(df)-1, ncol(df))]
tmp <- trials[trials$type == trialTypes$dual, ]
pairs <- getAdviceTypePairs(c(tmp$advisor0type, tmp$advisor1type))
if(length(pairs) == 0)
cat("*No advisor pairs found for analysis of dual trials.*")
for(pair in pairs) {
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
# rearrange data so advisors are separated by type rather than order
df <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
df[ , paste0(aNames[1], 'GroupMatch')] <- sapply(1:nrow(df), function(i) {
g <- participants$groupId[participants$pid == df$pid[i]]
if(df$advisor0type[i] == pair[1])
df$advisor0group[i] == g
else
df$advisor1group[i] == g
})
if(nrow(df) == 0)
next()
print(paste('LM results for', getAdviceTypeName(pair[1], long = T),
'vs', getAdviceTypeName(pair[2], long = T)))
f <- as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", aNames[1],
' * ', aNames[2], ' * ', aNames[1], 'GroupMatch)'))
model <- lm(f, data = df)
print(summary(model))
}
df.infLM <- NULL
for(pair in pairs) {
ts <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
x <- NULL
for(pid in unique(ts$pid)) {
# standardize the confidence scores
df <- ts[ts$pid == pid, ]
df$confidenceShift <- scale(df$confidenceShift)
df$initialConfidence <- scale(df$initialConfidence)
# rearrange data so advisors are separated by type rather than order
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
df[ , paste0(aNames[1], 'GroupMatch')] <- sapply(1:nrow(df), function(i) {
g <- participants$groupId[participants$pid == df$pid[i]]
if(df$advisor0type[i] == pair[1])
df$advisor0group[i] == g
else
df$advisor1group[i] == g
})
if(nrow(df) == 0)
next()
f <- as.formula(paste0("confidenceShift ~ pid + initialConfidence + (", aNames[1],
' * ', aNames[2], ' * ', aNames[1], 'GroupMatch)'))
model <- lm(f, data = df)
x <- rbind(x, data.frame(pid, refAdvisor = pair[1], otherAdvisor = pair[2],
intercept = model$coefficients[1],
refAdvisorAgrees = model$coefficients[2],
otherAdvisorAgrees = model$coefficients[3],
interaction = model$coefficients[4]))
}
if(!is.null(x) && nrow(x) > 0) {
cat(paste(md.ttest(x$refAdvisorAgrees, x$otherAdvisorAgrees,
labels = paste0('*M*|',getAdviceTypeName(pair)),
paired = T), '\n'))
df.infLM <- rbind(df.infLM, x)
}
}
x
model
model$coefficients
df.infLM <- NULL
for(pair in pairs) {
ts <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
x <- NULL
for(pid in unique(ts$pid)) {
# standardize the confidence scores
df <- ts[ts$pid == pid, ]
df$confidenceShift <- scale(df$confidenceShift)
df$initialConfidence <- scale(df$initialConfidence)
# rearrange data so advisors are separated by type rather than order
aNames <- paste0(getAdviceTypeName(pair), '_agrees')
df[ , aNames[1]] <- ifelse(df$advisor0type == pair[1], df$advisor0agrees, df$advisor1agrees)
df[ , aNames[2]] <- ifelse(df$advisor0type == pair[2], df$advisor0agrees, df$advisor1agrees)
df[ , paste0(aNames[1], 'GroupMatch')] <- sapply(1:nrow(df), function(i) {
g <- participants$groupId[participants$pid == df$pid[i]]
if(df$advisor0type[i] == pair[1])
df$advisor0group[i] == g
else
df$advisor1group[i] == g
})
if(nrow(df) == 0)
next()
f <- as.formula(paste0("confidenceShift ~ initialConfidence + (", aNames[1],
' * ', aNames[2], ' * ', aNames[1], 'GroupMatch)'))
model <- lm(f, data = df)
x <- rbind(x, data.frame(pid, refAdvisor = pair[1], otherAdvisor = pair[2],
intercept = model$coefficients[1],
refAdvisorAgrees = model$coefficients[2],
otherAdvisorAgrees = model$coefficients[3],
interaction = model$coefficients[4]))
}
if(!is.null(x) && nrow(x) > 0) {
cat(paste(md.ttest(x$refAdvisorAgrees, x$otherAdvisorAgrees,
labels = paste0('*M*|',getAdviceTypeName(pair)),
paired = T), '\n'))
df.infLM <- rbind(df.infLM, x)
}
}
x
model$coefficients
cbind(pid, model$coefficients)
cbind(pid, t(model$coefficients))
library(scoring)
library(digest)
source('src/ESM_core.R')
# Load data
folderName <- "G:\\Documents\\University\\Google Drive\\Temp\\data\\processed"
results <- loadFilesFromFolder(folderName)
Rcpp::evalCpp("2 + 2")
