tmp <- gather(df.choice, key = advisor, value = pickRate, -pid)
# calculate confidence intervals
tmp.CI <- NULL
for(pair in pairs) {
cis <- mean_cl_normal(tmp$pickRate[tmp$advisor == getAdviceTypeName(pair[1])])
tmp.CI <- rbind(tmp.CI, data.frame(advisor = getAdviceTypeName(pair[1]),
ymin = cis$ymin,
ymax = cis$ymax,
labelsL = getAdviceTypeName(pair[2], long = T),
labelsR = getAdviceTypeName(pair[1], long = T)))
}
ggplot(tmp, aes(x = pickRate, y = advisor)) +
geom_vline(linetype = 'dashed', xintercept = .5) +
geom_point(alpha = 0.5, col = 'black',
position = position_nudge(x = 0, y = -0.05)) +
geom_density_ridges(panel_scaling = F, scale = .5,
col = NA, fill = '#2299DD', alpha = .75) +
geom_segment(data = tmp.CI,
aes(y = advisor, yend = advisor,
x = ymin, xend = ymax),
size = 1, colour = '#2299DD',
position = position_nudge(x = 0, y = -0.2)) +
geom_point(data = aggregate(pickRate ~ advisor, tmp, mean), size = 4, shape = 18,
position = position_nudge(x = 0, y = -0.2)) +
scale_x_continuous(name = 'Pick rate', limits = c(-.5,1.5), expand = c(0,0),
breaks = seq(0,1,.5)) +
# label hack
geom_text(data = tmp.CI, aes(x = 0, label = labelsL), nudge_x = -.1, nudge_y = .15, hjust = 1) +
geom_text(data = tmp.CI, aes(x = 1, label = labelsR), nudge_x = .1, nudge_y = .15, hjust = 0) +
annotate(geom = 'rect', xmin = 0, xmax = 1, ymin = -Inf, ymax = Inf,
alpha = .025, linetype = 'solid', col = 'black') +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = 'top')
}
df.change <- NULL
pairs <- getAdviceTypePairs(c(trials$advisor0id, trials$advisor1id))
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
df.change <- data.frame(pid = unique(trials$pid))
for(pair in pairs) {
refAdvisor <- pair[1]
changes <- NULL
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0id %in% pair & tmp$advisor1id %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
changes <- rbind(changes, data.frame(m = mean(changed == refAdvisor, na.rm = T),
p = sum(!is.na(changed)) / nrow(tmp)))
}
cat(md.ttest(changes$m, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n\n')
colnames(changes) <- c(getAdviceTypeName(refAdvisor), paste0('PChange_', getAdviceTypeName(refAdvisor)))
df.change <- cbind(df.change, changes);
}
}
df.change <- NULL
pairs <- getAdviceTypePairs(c(trials$advisor0id, trials$advisor1id))
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
df.change <- data.frame(pid = unique(trials$pid))
for(pair in pairs) {
refAdvisor <- pair[1]
changes <- NULL
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0id %in% pair & tmp$advisor1id %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
changes <- rbind(changes, data.frame(m = mean(changed == refAdvisor, na.rm = T),
p = sum(!is.na(changed)) / nrow(tmp)))
}
cat(md.ttest(changes$m, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n\n')
colnames(changes) <- c(getAdviceTypeName(refAdvisor), paste0('PChange_', getAdviceTypeName(refAdvisor)))
df.change <- cbind(df.change, changes);
}
}
pair
refAdvisor <- pair[1]
changes <- NULL
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0id %in% pair & tmp$advisor1id %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
changes <- rbind(changes, data.frame(m = mean(changed == refAdvisor, na.rm = T),
p = sum(!is.na(changed)) / nrow(tmp)))
}
tmp
changed
changes
getAdviceTypePairs(c(trials$advisor0id, trials$advisor1id))
adviceTypeVector <- c(trials$advisor0id, trials$advisor1id)
types <- unique(adviceTypeVector)
types
df.change <- NULL
pairs <- getAdviceTypePairs(c(trials$advisor0type, trials$advisor1type))
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
df.change <- data.frame(pid = unique(trials$pid))
for(pair in pairs) {
refAdvisor <- pair[1]
changes <- NULL
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0id %in% pair & tmp$advisor1id %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
changes <- rbind(changes, data.frame(m = mean(changed == refAdvisor, na.rm = T),
p = sum(!is.na(changed)) / nrow(tmp)))
}
cat(md.ttest(changes$m, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n\n')
colnames(changes) <- c(getAdviceTypeName(refAdvisor), paste0('PChange_', getAdviceTypeName(refAdvisor)))
df.change <- cbind(df.change, changes);
}
}
getAdviceTypePairs(c(trials$advisor0type, trials$advisor1type))
df.change <- data.frame(pid = unique(trials$pid))
pair
refAdvisor <- pair[1]
changes <- NULL
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0id %in% pair & tmp$advisor1id %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
changes <- rbind(changes, data.frame(m = mean(changed == refAdvisor, na.rm = T),
p = sum(!is.na(changed)) / nrow(tmp)))
}
changes
df.change <- NULL
pairs <- getAdviceTypePairs(c(trials$advisor0type, trials$advisor1type))
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
df.change <- data.frame(pid = unique(trials$pid))
for(pair in pairs) {
refAdvisor <- pair[1]
changes <- NULL
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
changes <- rbind(changes, data.frame(m = mean(changed == refAdvisor, na.rm = T),
p = sum(!is.na(changed)) / nrow(tmp)))
}
cat(md.ttest(changes$m, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n\n')
colnames(changes) <- c(getAdviceTypeName(refAdvisor), paste0('PChange_', getAdviceTypeName(refAdvisor)))
df.change <- cbind(df.change, changes);
}
}
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
changes <- rbind(changes, data.frame(m = mean(changed == refAdvisor, na.rm = T),
p = sum(!is.na(changed)) / nrow(tmp)))
}
changes
refAdvisor
changed
tmp$advisorId
tmp$defaultAdvisor
tmp$defaultAdvisor != tmp$advisorId
nrow(tmp)
sum(!is.na(changed))
changed == refAdvisor
changed
length(changed)
df.change <- NULL
pairs <- getAdviceTypePairs(c(trials$advisor0type, trials$advisor1type))
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
df.change <- data.frame(pid = unique(trials$pid))
for(pair in pairs) {
refAdvisor <- pair[1]
changes <- NULL
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
if(length(changed) == 0)
m <- 0
else
m <- mean(changed == refAdvisor, na.rm = T)
changes <- rbind(changes, data.frame(m, p = sum(!is.na(changed)) / nrow(tmp)))
}
cat(md.ttest(changes$m, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n\n')
colnames(changes) <- c(getAdviceTypeName(refAdvisor), paste0('PChange_', getAdviceTypeName(refAdvisor)))
df.change <- cbind(df.change, changes);
}
}
changes
# Chunk 1: setup
knitr::opts_chunk$set(echo = F)
startTime <- Sys.time()
source('src/ESM_core.R')
# Chunk 2
folderName <- "G:\\Documents\\University\\Google Drive\\Temp\\data\\processed"
results <- loadFilesFromFolder(folderName)
results <- removeParticipantIds(results)
# folderName <- 'ESM_sim.R'
# source('src/ESM_sim.R')
# results <- simulateAdvisorChoice(5, advisorClasses = c("Advisor"))
# unpack results
for(i in 1:length(results))
assign(names(results)[i], results[i][[1]])
cat(paste('Loaded data from', folderName))
# Chunk 3
trials <- cbind(trials, trialUtilityVariables(results))
all.trials <- trials
trials <- trials[trials$practice == F, ]
cat('Generated utility variables')
# Chunk 4
tmp <- aggregate(cbind(initialCorrect, finalCorrect) ~ pid, trials, mean)
cat(md.ttest(tmp$initialCorrect, tmp$finalCorrect,
labels = c('*M*|initial', '*M*|final'),
isProportion = T, paired = T))
# Chunk 5
df.type2 <- NULL
for(p in unique(trials$pid)) {
for(d in c('initial', 'final')) {
tmp <- trials[trials$pid == p, c(paste0(d, 'Correct'), paste0(d, 'Confidence'))]
# remove NA values which appear in final judgements which are never made
tmp <- tmp[!is.na(tmp[ ,1]), ]
roc <- type2ROC(tmp[ ,1], tmp[ ,2], bins = 7)
df.type2 <- rbind(df.type2, data.frame(pid = factor(p), decision = d, conf = roc$x, pCorrect = roc$y))
}
}
tmp <- seq(0, 1, length.out = length(unique(df.type2$conf))+1)
tmp <- sapply(1:(length(tmp)-1), function(i) mean(c(tmp[i], tmp[i+1])))
df.type2$confProp <- sapply(df.type2$conf, function(x) tmp[which(levels(df.type2$conf) == x)])
tmp <- aggregate(. ~ pid + decision, df.type2, mean)
tmp <- tmp[order(tmp$pid),]
# print neatly with rounding
kable(prop2str(aggregate(pCorrect ~ decision, tmp, mean)))
# Chunk 6
ggplot(df.type2, aes(x = confProp, y = pCorrect, colour = pid)) +
geom_abline(slope = 1, intercept = c(0,0), linetype = 'dashed', colour = 'black') +
geom_point() +
geom_line(aes(group = pid)) +
facet_wrap(~decision, labeller = label_both) +
scale_x_continuous(limits = c(0,1)) +
scale_y_continuous(limits = c(0,1)) +
coord_fixed() +
style.long +
theme(panel.spacing.x = unit(1, 'lines'))
# Chunk 7
participants$excluded <- sapply(participants$pid, function(pid){
ts <- all.trials[all.trials$pid == pid,]
# overall accuracy of initial decisions
m <- mean(ts$initialCorrect, na.rm = T)
if(m < .6 | m > .85) return('Accuracy')
# varied use of confidence scale
cCs <- aggregate(pid ~ confidenceCategory, data = ts, FUN = length)
# All confidence categories must be used
if(nrow(cCs) < 3) return ('Confident')
# All confidence categories must have at least 5% of the number of trials
if(any(cCs$pid < length(ts)*.05)) return('<5%')
return(F)
})
# exclude on the basis of collecting too much data
if(sum(participants$excluded == F) > 50) {
tmp <- participants[participants$excluded == F, c('id', 'timeStart')]
tmp <- tmp$id[order(tmp$timeStart)]
tmp <- tmp[1:50]
participants$excluded[!(participants$id %in% tmp)] <- 'Excess'
}
# Chunk 8
# Perform exclusions
participants <- participants[participants$excluded==F, ]
# Remove excluded participants' data from other data frames
all.trials <- all.trials[all.trials$pid %in% participants$pid, ]
trials <- trials[trials$pid %in% participants$pid, ]
advisors <- advisors[advisors$pid %in% participants$pid, ]
questionnaires <- questionnaires[questionnaires$pid %in% participants$pid, ]
genTrustQ <- genTrustQ[genTrustQ$pid %in% participants$pid, ]
# Chunk 9
tmp <- advisorManipulationData(trials)
l.advisorDiff <- tmp
tmp <- prop2str(l.advisorDiff$summary, 3)
rownames(tmp) <- rownames(l.advisorDiff$summary)
kable(tmp)
# significane tests
for(i in 1:ncol(l.advisorDiff$data[ ,-1])) {
if(i %% 2 == 1) {
cat('\n\n')
next()
}
cat(md.ttest(l.advisorDiff$data[ ,i], l.advisorDiff$data[ ,i+1],
labels = paste0('*M*|', names(l.advisorDiff$data[i:(i+1)])),
isProportion = T, paired = T))
}
# Chunk 10
tmp <- aggregate(initialCorrect ~ pid + adviceType, trials, mean)
# sort through using reference advisors appearing in the trial lists
for(a in adviceTypes[unlist(adviceTypes) %% 2 == 1 & unlist(adviceTypes) %in% trials$adviceType]) {
cat(md.ttestBF(tmp$initialCorrect[tmp$adviceType == a],
tmp$initialCorrect[tmp$adviceType == a+1],
labels = paste0('*M*|', getAdviceTypeName(c(a, a+1))),
isProportion = T, paired = T))
cat('\n\n')
}
# Chunk 11
df.choice <- NULL
pairs <- getAdviceTypePairs(c(trials$choice0, trials$choice1)) # these are probably IDs when they should be types
if(length(pairs) < 1) {
cat('*No choice trials in the current dataset.*')
} else {
df.choice <- data.frame(pid = unique(trials$pid))
for(pair in pairs) {
refAdvisor <- pair[1]
# Calculate choice proportions favouring reference advisor for each participant
choices <- sapply(df.choice$pid, function(pid) {
tmp <- trials[trials$pid == pid, ]
tmp <- tmp$advisorId[(tmp$choice0 == pair[1] | tmp$choice1 == pair[1])
& (tmp$choice0 == pair[2] | tmp$choice1 == pair[2])]
return(mean(tmp == refAdvisor, na.rm = T))
})
cat(md.ttest(choices, mu = .5, labels = paste0('*M*|', getAdviceTypeName(refAdvisor)), isProportion = T))
cat('\n\n')
tmp <- data.frame(choices)
colnames(tmp) <- getAdviceTypeName(refAdvisor)
df.choice <- cbind(df.choice, tmp);
}
}
# Chunk 12
# forest plot for choice trials
if(!is.null(df.choice)) {
tmp <- gather(df.choice, key = advisor, value = pickRate, -pid)
# calculate confidence intervals
tmp.CI <- NULL
for(pair in pairs) {
cis <- mean_cl_normal(tmp$pickRate[tmp$advisor == getAdviceTypeName(pair[1])])
tmp.CI <- rbind(tmp.CI, data.frame(advisor = getAdviceTypeName(pair[1]),
ymin = cis$ymin,
ymax = cis$ymax,
labelsL = getAdviceTypeName(pair[2], long = T),
labelsR = getAdviceTypeName(pair[1], long = T)))
}
ggplot(tmp, aes(x = pickRate, y = advisor)) +
geom_vline(linetype = 'dashed', xintercept = .5) +
geom_point(alpha = 0.5, col = 'black',
position = position_nudge(x = 0, y = -0.05)) +
geom_density_ridges(panel_scaling = F, scale = .5,
col = NA, fill = '#2299DD', alpha = .75) +
geom_segment(data = tmp.CI,
aes(y = advisor, yend = advisor,
x = ymin, xend = ymax),
size = 1, colour = '#2299DD',
position = position_nudge(x = 0, y = -0.2)) +
geom_point(data = aggregate(pickRate ~ advisor, tmp, mean), size = 4, shape = 18,
position = position_nudge(x = 0, y = -0.2)) +
scale_x_continuous(name = 'Pick rate', limits = c(-.5,1.5), expand = c(0,0),
breaks = seq(0,1,.5)) +
# label hack
geom_text(data = tmp.CI, aes(x = 0, label = labelsL), nudge_x = -.1, nudge_y = .15, hjust = 1) +
geom_text(data = tmp.CI, aes(x = 1, label = labelsR), nudge_x = .1, nudge_y = .15, hjust = 0) +
annotate(geom = 'rect', xmin = 0, xmax = 1, ymin = -Inf, ymax = Inf,
alpha = .025, linetype = 'solid', col = 'black') +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = 'top')
}
# Chunk 13
df.change <- NULL
pairs <- getAdviceTypePairs(c(trials$advisor0type, trials$advisor1type))
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
df.change <- data.frame(pid = unique(trials$pid))
for(pair in pairs) {
refAdvisor <- pair[1]
changes <- NULL
# Calculate change proportions favouring reference advisor for each participant
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
changed <- tmp$advisorId[tmp$defaultAdvisor != tmp$advisorId]
if(length(changed) == 0)
m <- 0
else
m <- mean(changed == refAdvisor, na.rm = T)
changes <- rbind(changes, data.frame(m, p = sum(!is.na(changed)) / nrow(tmp)))
}
cat(md.ttest(changes$m, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n\n')
colnames(changes) <- c(getAdviceTypeName(refAdvisor), paste0('PChange_', getAdviceTypeName(refAdvisor)))
df.change <- cbind(df.change, changes);
}
}
changes
sum(!is.na(changed))
mean(changed == refAdvisor, na.rm = T)
changed
changed == refAdvisor
# forest plot for change trials
if(!is.null(df.change)) {
# shuffle the data a bit
tmp <- gather(df.change, key = advisor, value = pickRate, -pid)
tmp <- tmp[!grepl('_', tmp$advisor), ]
tmp$pChanged <- sapply(1:nrow(tmp), function(i) mean(df.change[df.change$pid == tmp$pid[i],
paste0('PChange_', tmp$advisor[i])]))
# calculate confidence intervals
tmp.CI <- NULL
for(pair in pairs) {
cis <- mean_cl_normal(tmp$pickRate[tmp$advisor == getAdviceTypeName(pair[1])])
tmp.CI <- rbind(tmp.CI, data.frame(advisor = getAdviceTypeName(pair[1]),
ymin = cis$ymin,
ymax = cis$ymax,
labelsL = getAdviceTypeName(pair[2], long = T),
labelsR = getAdviceTypeName(pair[1], long = T)))
}
ggplot(tmp, aes(x = pickRate, y = advisor)) +
geom_vline(linetype = 'dashed', xintercept = .5) +
geom_point(alpha = 0.5, col = 'black', aes(size = pChanged),
position = position_nudge(x = 0, y = -0.05)) +
geom_density_ridges(panel_scaling = F, scale = .5,
col = NA, fill = '#2299DD', alpha = .75) +
geom_segment(data = tmp.CI,
aes(y = advisor, yend = advisor,
x = ymin, xend = ymax),
size = 1, colour = '#2299DD',
position = position_nudge(x = 0, y = -0.2)) +
geom_point(data = aggregate(pickRate ~ advisor, tmp, mean), size = 4, shape = 18,
position = position_nudge(x = 0, y = -0.2)) +
scale_x_continuous(name = 'Balance of changes', limits = c(-.5,1.5), expand = c(0,0),
breaks = seq(0,1,.5)) +
# label hack
geom_text(data = tmp.CI, aes(x = 0, label = labelsL), nudge_x = -.1, nudge_y = .15, hjust = 1) +
geom_text(data = tmp.CI, aes(x = 1, label = labelsR), nudge_x = .1, nudge_y = .15, hjust = 0) +
annotate(geom = 'rect', xmin = 0, xmax = 1, ymin = -Inf, ymax = Inf,
alpha = .025, linetype = 'solid', col = 'black') +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = 'top')
}
if(length(pairs) < 1) {
cat('*No change trials in the current dataset.*')
} else {
for(pair in pairs) {
refAdvisor <- pair[1]
# Calculate default advisor = reference advisor proportions for each participant
defaults <- sapply(unique(trials$pid), function(pid) {
tmp <- trials[trials$pid == pid, ]
tmp <- tmp$advisorId[tmp$defaultAdvisor %in% pair]
return(mean(tmp == refAdvisor, na.rm = T))
})
cat(md.ttestBF(defaults, mu = .5, labels = getAdviceTypeName(refAdvisor), isProportion = T))
cat('\n\n')
}
}
defaults
tmp$defaultAdvisor
tmp <- trials[trials$pid == pid, ]
tmp$defaultAdvisor
tmp$defaultAdvisor %in% pair
getAdviceType(tmp$defaultAdvisor)
findAdviceType(tmp$defaultAdvisor, pid, advisors)
tmp$defaultAdvisor
findAdviceType(tmp$defaultAdvisor, pid, advisors) %in% pair
tmp <- tmp$advisorId[findAdviceType(tmp$defaultAdvisor, pid, advisors) %in% pair]
mean(tmp == refAdvisor, na.rm = T)
tmp$advisorId
tmp$adviceType
tmp <- trials[trials$pid == pid, ]
tmp$adviceType
tmp$adviceType[findAdviceType(tmp$defaultAdvisor, pid, advisors) %in% pair]
tmp <- tmp$adviceType[findAdviceType(tmp$defaultAdvisor, pid, advisors) %in% pair]
mean(tmp == refAdvisor, na.rm = T)
tmp <- trials[trials$pid == pid & trials$type == trialTypes$change, ]
tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair,'defaultAdvisor']
tmp$advisor0type %in% pair & tmp$advisor1type %in% pair]
tmp$advisor0type %in% pair & tmp$advisor1type %in% pair
tmp <- tmp[tmp$advisor0type %in% pair & tmp$advisor1type %in% pair, ]
tmp$defaultAdvisor
tmp$advisorId
trials$advisorId[trials$advisorId != trials$defaultAdvisor]
trials$advisorId[trials$advisorId != trials$defaultAdvisor & !is.na(trials$advisorId)]
trials$advisorId[!is.na(trials$advisorId)]
trials$advisorId[!is.na(trials$advisorId) & trials$advisorId != trials$defaultAdvisor]
trials$advisorId[trials$advisorId != trials$defaultAdvisor]
trials$advisorId != trials$defaultAdvisor
trials$advisorId[!is.na(trials$advisorId) & !is.na(trials$defaultAdvisor) & trials$advisorId != trials$defaultAdvisor]
trials$defaultAdvisor[!is.na(trials$advisorId) & !is.na(trials$defaultAdvisor) & trials$advisorId != trials$defaultAdvisor]
trials$defaultAdvisor[!is.na(trials$advisorId) & !is.na(trials$defaultAdvisor)]
trials$advisorId[!is.na(trials$advisorId) & !is.na(trials$defaultAdvisor)]
