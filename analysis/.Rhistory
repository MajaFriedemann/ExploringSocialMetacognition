stat_summary(geom = "point", fun.y = "mean", shape = 23, fill = "black", size = 4) +
geom_point(position = position_jitter(w=0.03, h=0),
aes(x="Overall", color = factor(pid)),
data = tmp.2) +
stat_summary(geom = "errorbar", fun.data = "mean_cl_boot", width = 0.1,
aes(x="Overall"), data = tmp.2) +
stat_summary(geom = "point", fun.y = "mean", shape = 23, fill = "black", size = 4,
aes(x="Overall"), data = tmp.2) +
scale_y_continuous(limits = c(0,1), expand = c(0.1,0)) +
scale_x_discrete(expand = c(0,1), labels = c('Low', 'Medium',
'High', 'Overall')) +
scale_color_discrete(name = 'Participant') +
labs(title = "Advisor preference",
legend = NULL,
x = "Confidence",
y = "P(Agree-in-confidence advisor is chosen)") +
style
ggplot(tmp, aes(x = factor(confidenceCategory), y = adviceType)) +
geom_hline(linetype = "dashed", color = "black", yintercept = .5, size = 1) +
geom_point(aes(color = factor(pid))) +
geom_line(aes(group = factor(pid), color = factor(pid))) +
stat_summary(geom = "errorbar", fun.data = "mean_cl_boot", width = 0.1) +
stat_summary(geom = "point", fun.y = "mean", shape = 23, fill = "black", size = 4) +
geom_point(position = position_jitter(w=0.03, h=0),
aes(x="Overall", color = factor(pid)),
data = tmp.2) +
stat_summary(geom = "errorbar", fun.data = "mean_cl_boot", width = 0.1,
aes(x="Overall"), data = tmp.2) +
stat_summary(geom = "point", fun.y = "mean", shape = 23, fill = "black", size = 4,
aes(x="Overall"), data = tmp.2) +
scale_y_continuous(limits = c(0,1), expand = c(0.01,0)) +
scale_x_discrete(expand = c(0,1), labels = c('Low', 'Medium',
'High', 'Overall')) +
scale_color_discrete(name = 'Participant') +
labs(title = "Advisor preference",
legend = NULL,
x = "Confidence",
y = "P(Agree-in-confidence advisor is chosen)") +
style
ggplot(tmp, aes(x = factor(confidenceCategory), y = adviceType)) +
geom_hline(linetype = "dashed", color = "black", yintercept = .5, size = 1) +
geom_point(aes(color = factor(pid))) +
geom_line(aes(group = factor(pid), color = factor(pid))) +
stat_summary(geom = "errorbar", fun.data = "mean_cl_boot", width = 0.1) +
stat_summary(geom = "point", fun.y = "mean", shape = 23, fill = "black", size = 4) +
geom_point(position = position_jitter(w=0.03, h=0),
aes(x="Overall", color = factor(pid)),
data = tmp.2) +
stat_summary(geom = "errorbar", fun.data = "mean_cl_boot", width = 0.1,
aes(x="Overall"), data = tmp.2) +
stat_summary(geom = "point", fun.y = "mean", shape = 23, fill = "black", size = 4,
aes(x="Overall"), data = tmp.2) +
scale_y_continuous(limits = c(0,1), expand = c(0.05,0)) +
scale_x_discrete(expand = c(0,1), labels = c('Low', 'Medium',
'High', 'Overall')) +
scale_color_discrete(name = 'Participant') +
labs(title = "Advisor preference",
legend = NULL,
x = "Confidence",
y = "P(Agree-in-confidence advisor is chosen)") +
style
# 2x2x2 ANOVA investigating effects of advisor type
# (agree-in-confidence/uncertainty), choice (un/forced), and agreement
# (dis/agree) on influence. These are all within-subjects manipulations.
tmp <- aggregate(influence ~ adviceType + hasChoice + advisorAgrees + pid, data = trials, FUN = mean)
# Influence of advice under varied conditions. Points indicate mean values for a
# participant, while diamonds indicate the mean of participant means, with error
# bars specifying 95% confidence intervals.
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.05, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = AiC), fun.y=mean, geom="line") +
facet_grid(.~hasChoice) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
# Influence of advice under varied conditions. Points indicate mean values for a
# participant, while diamonds indicate the mean of participant means, with error
# bars specifying 95% confidence intervals.
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.05, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
# Influence of advice under varied conditions. Points indicate mean values for a
# participant, while diamonds indicate the mean of participant means, with error
# bars specifying 95% confidence intervals.
tmp$adviceType <- factor(tmp$adviceType)
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.05, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.05, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice, labeller = as_labeller(c('Forced trials', 'Choice trials'))) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.05, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice, labeller = c('Forced trials', 'Choice trials')) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.05, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice, labeller = label_both) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.05, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice, labeller = as_labeller(c('FALSE'='Forced','TRUE'='Choice'))) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.05, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.15, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.1, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type') +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.1, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type', labels = c('Agree-in-confidence')) +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.1, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_fill_discrete(name = 'Advisor type') +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.1, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_fill_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
labs(title = "Advice Influence",
legend = NULL,
x = 'Agreement between advisor and judge',
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.1, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_fill_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_x_discrete(name = NA, labels = c('Agreement', 'Disagreement')) +
labs(title = "Advice Influence",
legend = NULL,
y = "Influence of the advice") +
style
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.1, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_fill_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_x_discrete(name = 'Judge-advisor agreement', labels = c('Agree', 'Disagree')) +
labs(title = "Advice Influence",
legend = NULL,
y = "Influence of the advice") +
style
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
# 2x2x2 ANOVA investigating effects of advisor type
# (agree-in-confidence/uncertainty), choice (un/forced), and agreement
# (dis/agree) on influence. These are all within-subjects manipulations.
tmp <- aggregate(influence ~ adviceType + hasChoice + advisorAgrees + pid, data = trials, FUN = mean)
# Influence of advice under varied conditions. Points indicate mean values for a
# participant, while diamonds indicate the mean of participant means, with error
# bars specifying 95% confidence intervals.
tmp$adviceType <- factor(tmp$adviceType)
ggplot(tmp, aes(advisorAgrees, influence, color = adviceType, fill = adviceType)) +
geom_point(position = position_jitter(w=0.1, h=0)) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_fill_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_x_discrete(name = 'Judge-advisor agreement', labels = c('Agree', 'Disagree')) +
labs(title = "Advice Influence",
legend = NULL,
y = "Influence of the advice") +
style
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
t.test(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
t.test(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
ggplot(trials[trials$pid==2, ], aes(x=id, y=initialConfidence)) + geom_point()
ggplot(trials[trials$pid==3, ], aes(x=id, y=initialConfidence)) + geom_point()
ggplot(trials[trials$pid==4, ], aes(x=id, y=initialConfidence)) + geom_point()
ggplot(trials[trials$pid==1, ], aes(x=id, y=initialConfidence)) + geom_point()
aggregate(pid ~ initialConfidence, data = trials[trials$pid==2, ], FUN = length)
aggregate(pid ~ confidenceCategory, data = trials[trials$pid==2, ], FUN = length)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
# Exclusion rules:
# Proportion of correct initial judgements must be (.60 < cor1/n < .90)
#NB:practice trials are INCLUDED in this since they are used in part for
#determining confidence calibration
participants$excluded <- sapply(participants$pid, function(pid){
ts <- which(all.trials$pid == pid)
# overall accuracy of initial decisions
v <- all.trials$initialAnswer[ts] == all.trials$correctAnswer[ts]
m <- mean(as.numeric(v), na.rm = T)
if(m < .6 | m > .9)
return('Accuracy')
# varied use of confidence scale
ts <- which(trials$pid == pid)
cCs <- aggregate(pid ~ confidenceCategory, data = trials[ts, ], FUN = length)
# All confidence categories must be used
if(nrow(cCs) < 3)
return ('Confidence')
# Between 30 and 50% of trials must be medium confidence
if(cCs$pid[cCs$confidenceCategory==confidenceCategories$medium] < length(ts)*.3
| cCs$pid[cCs$confidenceCategory==confidenceCategories$medium] > length(ts)*.5)
return('Confidence.med')
# Other categories must contain between 20 and 40% of trials
cCs[cCs$confidenceCategory==confidenceCategories$medium, ] <- NULL
if(any(cCs$pid < length(ts)*.2) | any(cCs$pid > length(ts)*.4))
return('Confidence.hiLow')
return(F)
})
participants$excluded
# Exclusion rules:
# Proportion of correct initial judgements must be (.60 < cor1/n < .90)
#NB:practice trials are INCLUDED in this since they are used in part for
#determining confidence calibration
participants$excluded <- sapply(participants$pid, function(pid){
ts <- which(all.trials$pid == pid)
# overall accuracy of initial decisions
v <- all.trials$initialAnswer[ts] == all.trials$correctAnswer[ts]
m <- mean(as.numeric(v), na.rm = T)
if(m < .6 | m > .9)
return('Accuracy')
# varied use of confidence scale
ts <- which(trials$pid == pid)
cCs <- aggregate(pid ~ confidenceCategory, data = trials[ts, ], FUN = length)
print(cCs)
# All confidence categories must be used
if(nrow(cCs) < 3)
return ('Confidence')
# Between 30 and 50% of trials must be medium confidence
if(cCs$pid[cCs$confidenceCategory==confidenceCategories$medium] < length(ts)*.3
| cCs$pid[cCs$confidenceCategory==confidenceCategories$medium] > length(ts)*.5)
return('Confidence.med')
# Other categories must contain between 20 and 40% of trials
cCs[cCs$confidenceCategory==confidenceCategories$medium, ] <- NULL
if(any(cCs$pid < length(ts)*.2) | any(cCs$pid > length(ts)*.4))
return('Confidence.hiLow')
return(F)
})
# Exclusion rules:
# Proportion of correct initial judgements must be (.60 < cor1/n < .90)
#NB:practice trials are INCLUDED in this since they are used in part for
#determining confidence calibration
participants$excluded <- sapply(participants$pid, function(pid){
ts <- which(all.trials$pid == pid)
# overall accuracy of initial decisions
v <- all.trials$initialAnswer[ts] == all.trials$correctAnswer[ts]
m <- mean(as.numeric(v), na.rm = T)
if(m < .6 | m > .9)
return('Accuracy')
# varied use of confidence scale
ts <- which(trials$pid == pid)
cCs <- aggregate(pid ~ confidenceCategory, data = trials[ts, ], FUN = length)
print(cCs)
# All confidence categories must be used
if(nrow(cCs) < 3)
return ('Confidence')
return(F)
# TODO ####
# Clarify the numbers on the rules below
# Between 30 and 50% of trials must be medium confidence
if(cCs$pid[cCs$confidenceCategory==confidenceCategories$medium] < length(ts)*.3
| cCs$pid[cCs$confidenceCategory==confidenceCategories$medium] > length(ts)*.5)
return('Confidence.med')
# Other categories must contain between 20 and 40% of trials
cCs[cCs$confidenceCategory==confidenceCategories$medium, ] <- NULL
if(any(cCs$pid < length(ts)*.2) | any(cCs$pid > length(ts)*.4))
return('Confidence.hiLow')
return(F)
})
participants$excluded
all.participants <- participants
participants <- participants[!participants$excluded, ]
participants <- participants[participants$excluded==F, ]
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
# Remove excluded participants' data from other data frames
trials <- trials[trials$pid %in% participants$pid, ]
advisors <- advisors[advisors$pid %in% participants$pid, ]
questionnaires <- questionnaires[questionnaires$pid %in% participants$pid, ]
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R', echo=TRUE)
t.test(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
t.test(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
ttestBF(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
