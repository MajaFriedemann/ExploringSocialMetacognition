nodelist <- subset(nodelist, subset=!(ID==F1))
#Transform the nodelist into edgelist including gender
edgelist.full <- melt(nodelist, id.vars = c("ID", "gender", "nationality", "ethnicity", "school_type"))
vars <- c("gender", "nationality", "ethnicity", "school_type")
for(i in seq(length(vars))) {
edgelist <- edgelist.full[,c("ID", vars[[i]], "value")]
edgelist <- edgelist[complete.cases(edgelist),]
# Create an edgelist that includes only edges from males to males
edgelist.i <- edgelist[which(edgelist[,vars[[i]]]==1),]
edgelist.i <- subset(edgelist.i, subset=(value %in% ID))
# Create an edgelist that includes only edges from females to males
edgelist.o <- edgelist[which(edgelist[,vars[[i]]]==0),]
edgelist.o <- subset(edgelist.o, subset=!(value %in% ID))
# Combine males and females nominations to males
edgelist.io <- rbind.fill(edgelist.i, edgelist.o)
edgelist.io <- edgelist.io[order(edgelist.io$ID),]
# Match extra male nominations to edgelist (necessary step to not lose members w/o male friends)
edgelist.a <- rbind.fill(edgelist.io, edgelist)
edgelist.a <- edgelist.a[order(edgelist.a$ID),]
# Transform edgelists into network objects
network <- graph.data.frame(edgelist)
network.a <- graph.data.frame(edgelist.a)
# Calculate individual homophily score
all.o <- degree(network, V(network), mode="out")  #degree of edgelist
all.io <- degree(network.a, V(network.a), mode="out")  #degree of edgelista
inOut <- all.io-all.o  #substract degree of edgelist from edgelista, leaving only male links
pref <- round(inOut/all.o, digits=2)  #divide male links from all links
table <- data.frame(all.o, inOut, pref)  #summarize in table
# Add gender info to table
table <- table[complete.cases(table),]
table[,vars[[i]]] <- nodelist[,vars[[i]]]
# Test gender difference in homophily
print(paste0(vars[[i]],":"))
t.test(table[which(table[,vars[[i]]]==1),"pref"],table[which(table[,vars[[i]]]==0),"pref"])
}
nodelist <- subset(nodelist, subset=!(ID==F1))
for(i in seq(length(vars))) {
edgelist <- edgelist.full[,c("ID", vars[[i]], "value")]
edgelist <- edgelist[complete.cases(edgelist),]
# Create an edgelist that includes only edges from males to males
edgelist.i <- edgelist[which(edgelist[,vars[[i]]]==1),]
edgelist.i <- subset(edgelist.i, subset=(value %in% ID))
# Create an edgelist that includes only edges from females to males
edgelist.o <- edgelist[which(edgelist[,vars[[i]]]==0),]
edgelist.o <- subset(edgelist.o, subset=!(value %in% ID))
# Combine males and females nominations to males
edgelist.io <- rbind.fill(edgelist.i, edgelist.o)
edgelist.io <- edgelist.io[order(edgelist.io$ID),]
# Match extra male nominations to edgelist (necessary step to not lose members w/o male friends)
edgelist.a <- rbind.fill(edgelist.io, edgelist)
edgelist.a <- edgelist.a[order(edgelist.a$ID),]
# Transform edgelists into network objects
network <- graph.data.frame(edgelist)
network.a <- graph.data.frame(edgelist.a)
# Calculate individual homophily score
all.o <- degree(network, V(network), mode="out")  #degree of edgelist
all.io <- degree(network.a, V(network.a), mode="out")  #degree of edgelista
inOut <- all.io-all.o  #substract degree of edgelist from edgelista, leaving only male links
pref <- round(inOut/all.o, digits=2)  #divide male links from all links
table <- data.frame(all.o, inOut, pref)  #summarize in table
# Add gender info to table
table <- table[complete.cases(table),]
table[,vars[[i]]] <- nodelist[,vars[[i]]]
# Test gender difference in homophily
print(paste0(vars[[i]],":"))
t.test(table[which(table[,vars[[i]]]==1),"pref"],table[which(table[,vars[[i]]]==0),"pref"])
}
edgelist <- edgelist.full[,c("ID", vars[[i]], "value")]
# Create an edgelist that includes only edges from males to males
edgelist.i <- edgelist[which(edgelist[,vars[[i]]]==1),]
edgelist.i <- subset(edgelist.i, subset=(value %in% ID))
edgelist.i <- subset(edgelist.i, subset=(value %in% ID))
# Create an edgelist that includes only edges from females to males
edgelist.o <- edgelist[which(edgelist[,vars[[i]]]==0),]
edgelist.o <- subset(edgelist.o, subset=!(value %in% ID))
# Create an edgelist that includes only edges from females to males
edgelist.o <- edgelist[which(edgelist[,vars[[i]]]==0),]
edgelist.o <- subset(edgelist.o, subset=!(value %in% ID))
# Combine males and females nominations to males
edgelist.io <- rbind.fill(edgelist.i, edgelist.o)
# Combine males and females nominations to males
edgelist.io <- rbind.fill(edgelist.i, edgelist.o)
edgelist.io <- edgelist.io[order(edgelist.io$ID),]
edgelist.io <- edgelist.io[order(edgelist.io$ID),]
# Match extra male nominations to edgelist (necessary step to not lose members w/o male friends)
edgelist.a <- rbind.fill(edgelist.io, edgelist)
# Create an edgelist that includes only edges from females to males
edgelist.o <- edgelist[which(edgelist[,vars[[i]]]==0),]
edgelist.o <- subset(edgelist.o, subset=!(value %in% ID))
# Combine males and females nominations to males
edgelist.io <- rbind.fill(edgelist.i, edgelist.o)
edgelist.io <- edgelist.io[order(edgelist.io$ID),]
# Match extra male nominations to edgelist (necessary step to not lose members w/o male friends)
edgelist.a <- rbind.fill(edgelist.io, edgelist)
edgelist.a <- edgelist.a[order(edgelist.a$ID),]
# Match extra male nominations to edgelist (necessary step to not lose members w/o male friends)
edgelist.a <- rbind.fill(edgelist.io, edgelist)
edgelist.a <- edgelist.a[order(edgelist.a$ID),]
# Transform edgelists into network objects
network <- graph.data.frame(edgelist)
edgelist.o <- subset(edgelist.o, subset=!(value %in% ID))
# Combine males and females nominations to males
edgelist.io <- rbind.fill(edgelist.i, edgelist.o)
edgelist.io <- edgelist.io[order(edgelist.io$ID),]
# Match extra male nominations to edgelist (necessary step to not lose members w/o male friends)
edgelist.a <- rbind.fill(edgelist.io, edgelist)
edgelist.a <- edgelist.a[order(edgelist.a$ID),]
# Transform edgelists into network objects
network <- graph.data.frame(edgelist)
network.a <- graph.data.frame(edgelist.a)
edgelist.i <- subset(edgelist.i, subset=(value %in% ID))
# Create an edgelist that includes only edges from females to males
edgelist.o <- edgelist[which(edgelist[,vars[[i]]]==0),]
edgelist.o <- subset(edgelist.o, subset=!(value %in% ID))
# Combine males and females nominations to males
edgelist.io <- rbind.fill(edgelist.i, edgelist.o)
edgelist.io <- edgelist.io[order(edgelist.io$ID),]
# Match extra male nominations to edgelist (necessary step to not lose members w/o male friends)
edgelist.a <- rbind.fill(edgelist.io, edgelist)
edgelist.a <- edgelist.a[order(edgelist.a$ID),]
# Transform edgelists into network objects
network <- graph.data.frame(edgelist)
network.a <- graph.data.frame(edgelist.a)
# Calculate individual homophily score
all.o <- degree(network, V(network), mode="out")  #degree of edgelist
inOut <- all.io-all.o  #substract degree of edgelist from edgelista, leaving only male links
table <- data.frame(all.o, inOut, pref)  #summarize in table
# Add gender info to table
table <- table[complete.cases(table),]
table[,vars[[i]]] <- nodelist[,vars[[i]]]
# Test gender difference in homophily
print(paste0(vars[[i]],":"))
t.test(table[which(table[,vars[[i]]]==1),"pref"],table[which(table[,vars[[i]]]==0),"pref"])
nodelist <- subset(nodelist, subset=!(ID==F1))
tests<-list()
#Transform the nodelist into edgelist including gender
edgelist.full <- melt(nodelist, id.vars = c("ID", "gender", "nationality", "ethnicity", "school_type"))
vars <- c("gender", "nationality", "ethnicity", "school_type")
for(i in seq(length(vars))) {
edgelist <- edgelist.full[,c("ID", vars[[i]], "value")]
edgelist <- edgelist[complete.cases(edgelist),]
# Create an edgelist that includes only edges from males to males
edgelist.i <- edgelist[which(edgelist[,vars[[i]]]==1),]
edgelist.i <- subset(edgelist.i, subset=(value %in% ID))
# Create an edgelist that includes only edges from females to males
edgelist.o <- edgelist[which(edgelist[,vars[[i]]]==0),]
edgelist.o <- subset(edgelist.o, subset=!(value %in% ID))
# Combine males and females nominations to males
edgelist.io <- rbind.fill(edgelist.i, edgelist.o)
edgelist.io <- edgelist.io[order(edgelist.io$ID),]
# Match extra male nominations to edgelist (necessary step to not lose members w/o male friends)
edgelist.a <- rbind.fill(edgelist.io, edgelist)
edgelist.a <- edgelist.a[order(edgelist.a$ID),]
# Transform edgelists into network objects
network <- graph.data.frame(edgelist)
network.a <- graph.data.frame(edgelist.a)
# Calculate individual homophily score
all.o <- degree(network, V(network), mode="out")  #degree of edgelist
all.io <- degree(network.a, V(network.a), mode="out")  #degree of edgelista
inOut <- all.io-all.o  #substract degree of edgelist from edgelista, leaving only male links
pref <- round(inOut/all.o, digits=2)  #divide male links from all links
table <- data.frame(all.o, inOut, pref)  #summarize in table
# Add gender info to table
table <- table[complete.cases(table),]
table[,vars[[i]]] <- nodelist[,vars[[i]]]
# Test gender difference in homophily
#print(paste0(vars[[i]],":"))
tests[vars[[i]]] <- t.test(table[which(table[,vars[[i]]]==1),"pref"],table[which(table[,vars[[i]]]==0),"pref"])
}
# Test gender difference in homophily
#print(paste0(vars[[i]],":"))
tests[[vars[[i]]]] <- t.test(table[which(table[,vars[[i]]]==1),"pref"],table[which(table[,vars[[i]]]==0),"pref"])
nodelist <- subset(nodelist, subset=!(ID==F1))
tests<-list()
#Transform the nodelist into edgelist including gender
edgelist.full <- melt(nodelist, id.vars = c("ID", "gender", "nationality", "ethnicity", "school_type"))
vars <- c("gender", "nationality", "ethnicity", "school_type")
for(i in seq(length(vars))) {
edgelist <- edgelist.full[,c("ID", vars[[i]], "value")]
edgelist <- edgelist[complete.cases(edgelist),]
# Create an edgelist that includes only edges from males to males
edgelist.i <- edgelist[which(edgelist[,vars[[i]]]==1),]
edgelist.i <- subset(edgelist.i, subset=(value %in% ID))
# Create an edgelist that includes only edges from females to males
edgelist.o <- edgelist[which(edgelist[,vars[[i]]]==0),]
edgelist.o <- subset(edgelist.o, subset=!(value %in% ID))
# Combine males and females nominations to males
edgelist.io <- rbind.fill(edgelist.i, edgelist.o)
edgelist.io <- edgelist.io[order(edgelist.io$ID),]
# Match extra male nominations to edgelist (necessary step to not lose members w/o male friends)
edgelist.a <- rbind.fill(edgelist.io, edgelist)
edgelist.a <- edgelist.a[order(edgelist.a$ID),]
# Transform edgelists into network objects
network <- graph.data.frame(edgelist)
network.a <- graph.data.frame(edgelist.a)
# Calculate individual homophily score
all.o <- degree(network, V(network), mode="out")  #degree of edgelist
all.io <- degree(network.a, V(network.a), mode="out")  #degree of edgelista
inOut <- all.io-all.o  #substract degree of edgelist from edgelista, leaving only male links
pref <- round(inOut/all.o, digits=2)  #divide male links from all links
table <- data.frame(all.o, inOut, pref)  #summarize in table
# Add gender info to table
table <- table[complete.cases(table),]
table[,vars[[i]]] <- nodelist[,vars[[i]]]
# Test gender difference in homophily
#print(paste0(vars[[i]],":"))
tests[[vars[[i]]]] <- t.test(table[which(table[,vars[[i]]]==1),"pref"],table[which(table[,vars[[i]]]==0),"pref"])
}
tests$gender
tests$school_type
for(i in seq(length(tests))) {
print(tests[[i]])
}
print(names(tests)[i])
for(i in seq(length(tests))) {
print(names(tests)[i])
print(tests[[i]])
}
source('~/University/Programming/nofeedback_trust_matt/AdvisorChoice/analysis/AdvisorChoice.R')
View(trust_table)
source('~/University/Programming/nofeedback_trust_matt/AdvisorChoice/analysis/AdvisorChoice.R')
View(trust.table.t1)
# Were the advisors perceived differently to begin with?
trust.table.t1 <- trust.table[which(trust.table$timepoint==1),]
trust.table.last <- data.frame();
for(i in seq(length(unique(trust.table$pId)))) {
pId <- unique(trust.table$pId)[i]
qs <- trust.table[which(trust.table$pId==pId),]
lastTimepoint <- max(unique(trust.table$timepoint))
if(lastTimepoint<2)
next # if there's only one timepoint then don't register the participant
trust.table.last <- rbind(trust.table.last, qs[which(qs$timepoint==lastTimepoint),])
}
View(trust.table.last)
# Were the advisors perceived differently to begin with?
trust.table.t1 <- trust.table[which(trust.table$timepoint==1),]
trust.table.last <- data.frame();
for(i in seq(length(unique(trust.table$pId)))) {
pId <- unique(trust.table$pId)[i]
qs <- trust.table[which(trust.table$pId==pId),]
lastTimepoint <- max(unique(trust.table$timepoint))
#if(lastTimepoint<2)
#  next # if there's only one timepoint then don't register the participant
trust.table.last <- rbind(trust.table.last, qs[which(qs$timepoint==lastTimepoint),])
}
View(trust.table.last)
length(unique(trust.table$pId))
seq(length(unique(trust.table$pId)))
i
i
i<-1
pId <- unique(trust.table$pId)[i]
qs <- trust.table[which(trust.table$pId==pId),]
lastTimepoint <- max(unique(trust.table$timepoint))
#if(lastTimepoint<2)
#  next # if there's only one timepoint then don't register the participant
trust.table.last <- rbind(trust.table.last, qs[which(qs$timepoint==lastTimepoint),])
i<-2
pId <- unique(trust.table$pId)[i]
qs <- trust.table[which(trust.table$pId==pId),]
lastTimepoint <- max(unique(trust.table$timepoint))
# Were the advisors perceived differently to begin with?
trust.table.t1 <- trust.table[which(trust.table$timepoint==1),]
trust.table.last <- data.frame();
for(i in seq(length(unique(trust.table$pId)))) {
pId <- unique(trust.table$pId)[i]
qs <- trust.table[which(trust.table$pId==pId),]
lastTimepoint <- max(unique(qs$timepoint))
#if(lastTimepoint<2)
#  next # if there's only one timepoint then don't register the participant
trust.table.last <- rbind(trust.table.last, qs[which(qs$timepoint==lastTimepoint),])
}
View(trust.table.last)
# Were the advisors perceived differently to begin with?
trust.table.t1 <- trust.table[which(trust.table$timepoint==1),]
trust.table.t1.byAdv <- data.frame(pId=integer(), AiC=double(), AiU=double())
for(pId in seq(unique(trust.table.t1$pId))) {
t <- trust.table.t1[which(trust.table.t1$pId==pId),]
AiC <- mean(t[which(t$advisorType==aic.advisor),"answer"])
AiU <- mean(t[which(t$advisorType!=aic.advisor),"answer"])
df <- data.frame(pId, AiC, AiU)
trust.table.t1.byAdv <- rbind(trust.table.t1.byAdv, df)
}
t.test(trust.table.t1.byAdv$AiC, trust.table.t1.byAdv$AiU)
source('~/University/Programming/nofeedback_trust_matt/AdvisorChoice/analysis/AdvisorChoice.R')
View(trust.table.t1.byAdv)
# Were the advisors perceived differently to begin with?
trust.table.t1 <- trust.table[which(trust.table$timepoint==1),]
trust.table.t1.byAdv <- data.frame(pId=integer(), AiC=double(), AiU=double())
for(pId in seq(length(unique(trust.table.t1$pId)))) {
t <- trust.table.t1[which(trust.table.t1$pId==pId),]
AiC <- mean(t[which(t$advisorType==aic.advisor),"answer"])
AiU <- mean(t[which(t$advisorType!=aic.advisor),"answer"])
df <- data.frame(pId, AiC, AiU)
trust.table.t1.byAdv <- rbind(trust.table.t1.byAdv, df)
}
pId <- 1
t <- trust.table.t1[which(trust.table.t1$pId==pId),]
source('~/University/Programming/nofeedback_trust_matt/AdvisorChoice/analysis/AdvisorChoice.R')
source('~/University/Programming/nofeedback_trust_matt/AdvisorChoice/analysis/AdvisorChoice.R')
x <- c(.14, .59, .09, .07, .12)
x2 <- x*x
sum(x2)
y <- c(.16, .56, .09, .12)
y2 <- y*y
sum(y2)
.32^2
.69 + (.07*7)
(84*.188) + (83*.264) + (87*.277) / 254
84*.188
15.792/84
(84*.188) + (83*.264) + (87*.277)
((84*.188) + (83*.264) + (87*.277)) / 254
runif(5)
groups <- data.frame(g1=integer, g2=integer, difference=integer())
n <- 254
for(i in seq(10000)) {
g1 <- which(runif(n)>.5)
g2 <- n-g1
difference <- abs(g1-g2)
groups <- rbind(groups, data.frame(g1, g2, difference))
}
groups <- data.frame(g1=integer, g2=integer, difference=integer())
n <- 126
for(i in seq(10000)) {
g1 <- which(runif(n)>.5)
g2 <- n-g1
difference <- abs(g1-g2)
groups <- rbind(groups, data.frame(g1, g2, difference))
}
View(groups)
length(seq(10000))
hist(groups$difference)
mean(groups$difference)
sd(groups$difference)
which(runif(n)>.5)
which(runif(n)>.5)
g1 <- length(which(runif(n)>.5))
g2 <- n-g1
difference <- abs(g1-g2)
groups <- data.frame(g1=integer, g2=integer, difference=integer())
n <- 126
for(i in seq(10000)) {
g1 <- length(which(runif(n)>.5))
g2 <- n-g1
difference <- abs(g1-g2)
groups <- rbind(groups, data.frame(g1, g2, difference))
}
for(i in seq(10000)) {
g1 <- length(which(runif(n)>.5))
g2 <- n-g1
difference <- abs(g1-g2)
groups <- rbind(groups, data.frame(g1, g2, difference))
}
hist(groups$difference)
groups <- data.frame(g1=integer, g2=integer, difference=integer())
n <- 126
for(i in seq(10000)) {
g1 <- length(which(runif(n)>.5))
g2 <- n-g1
difference <- g1-g2
groups <- rbind(groups, data.frame(g1, g2, difference))
}
for(i in seq(10000)) {
g1 <- length(which(runif(n)>.5))
g2 <- n-g1
difference <- g1-g2
groups <- rbind(groups, data.frame(g1, g2, difference))
}
hist(groups$difference)
groups <- data.frame(g1=integer, g2=integer, difference=integer())
n <- 126
for(i in seq(100000)) {
g1 <- length(which(runif(n)>.5))
g2 <- n-g1
difference <- g1-g2
groups <- rbind(groups, data.frame(g1, g2, difference))
}
for(i in seq(100000)) {
g1 <- length(which(runif(n)>.5))
g2 <- n-g1
difference <- g1-g2
groups <- rbind(groups, data.frame(g1, g2, difference))
}
hist(groups$difference)
length(which(groups$difference>10))*2/100000
knitr::opts_chunk$set(echo = T)
if(!require("foreign"))
install.packages("foreign")
library(foreign)
alldata <- read.spss("SNA_W1W2_KeyVars.sav", use.value.labels=FALSE, to.data.frame=TRUE)
nodelist <- list()
nodelist[[1]] <- alldata[,c(1:6,12:length(names(alldata)))]
nodelist[[2]] <- alldata[,c(1,7:length(names(alldata)))]
names(nodelist) <- c("Wave1", "Wave2")
names(nodelist$Wave1)[[1]] <- "ID"
names(nodelist$Wave2)[[1]] <- "ID"
knitr::opts_chunk$set(echo = T)
if(!require("foreign"))
install.packages("foreign") #only necessary in Broadbent Lab
library(foreign)
alldata <- read.spss("SNA_W1W2_Attendance.sav", use.value.labels=FALSE, to.data.frame=TRUE)
nodelist <- list()
nodelist[[1]] <- alldata[,c("ID", "Friend.1", "Friend.2", "Friend.3",
"Friend.4", "Friend.5", "ProgSessionsBinary")]
nodelist[[2]] <- alldata[,c("ID", "Friend.1_w2", "Friend.2_w2", "Friend.3_w2",
"Friend.4_w2", "Friend.5_w2", "ProgSessionsBinary")]
names(nodelist) <- c("Wave1", "Wave2")
if(!require("reshape2"))
install.packages("reshape2")
library(reshape2)
edgelist <- list()
vertexlist <- list()
for(i in seq(length(nodelist))) {
edgelist[[i]] <- melt(nodelist[[i]], id.vars = c("ID", "ProgSessionsBinary"))
vertexlist[[i]] <- nodelist[[i]][,c("ID", "ProgSessionsBinary")]
edgelist[[i]] <- edgelist[[i]][,c("ID", "value")]
edgelist[[i]] <- edgelist[[i]][which(edgelist[[i]]$value %in% vertexlist[[i]]$ID),]
edgelist[[i]] <- edgelist[[i]][complete.cases(edgelist[[i]]),]
# order edgelist
edgelist[[i]] <- edgelist[[i]][order(edgelist[[i]]$ID),]
}
names(edgelist) <- c("Wave1", "Wave2")
names(vertexlist) <- names(edgelist)
#edgelist$Wave1 <- edgelist$Wave1[,]
if(!require("igraph"))
install.packages("igraph")
library(igraph)
for(i in seq(length(edgelist))) {
# Transform edgelist into a network object for igraph
network <- graph.data.frame(edgelist[[i]])
# make a general plot
network <- simplify(network, remove.loops = T)  #removes self-nominations
l <- layout_with_fr(network)  #save with specific layout
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)  #increase size
plot(network, main=names(edgelist)[i], rescale=F, layout=l*1.25,
edge.arrow.size=.2, vertex.size=8, edge.color="black", vertex.label.color="black")
}
for(i in seq(length(edgelist))) {
network <- graph.data.frame(edgelist[[i]])
network <- simplify(network, remove.loops = T)  #removes self-nominations
comm <- cluster_edge_betweenness(network)
dendPlot(comm, mode="hclust")
l <- layout_with_fr(network)  #save with specific layout
l <- norm_coords(l, ymin=-2, ymax=2, xmin=-2, xmax=2)  #increase size
plot(comm, network, main=names(edgelist)[i], rescale=F, layout=l*1.25,
edge.arrow.size=.2, vertex.size=8, edge.color="black", vertex.label.color="black")
}
netDegree <- list()
individuals <- data.frame(indeg.t1=double(), indeg.t2=double(),
outdeg.t1=double(), outdeg.t2=double(),
between.t1=double(), between.t2=double(),
close.t1=double(), close.t2=double(),
attendee.t1=integer(), attendee.t2=integer())  #summarize everything in one table
df.list <- list()
for(i in seq(length(edgelist)))
df.list[[i]] <- data.frame(indeg=double(), outdeg=double(), between=double(), close=double())
for(i in seq(length(edgelist))) {
network <- graph.data.frame(edgelist[[i]], vertices = vertexlist[[i]])
network <- simplify(network, remove.loops = T)  #removes self-nominations
indeg <- degree(network, V(network), mode="in")   #indegree
outdeg <- degree(network, V(network), mode="out")   #outdegree
between <- round(betweenness(network, V(network)), digits=2)   #betweenness
close <- round(1000000*(closeness(network, V(network))), digits=2)   #closeness
attendee <- vertex_attr(network)$ProgSessionsBinary
df.list[[i]] <- rbind(df.list[[i]], data.frame(indeg, outdeg, between, close, attendee))
netDegree[[i]] <- gsize(network) / ((dim(vertexlist[[i]])[1]-1) * 5)
}
#summarize everything in one table
individuals <- data.frame(indeg.t1=df.list[[1]]$indeg, indeg.t2=df.list[[2]]$indeg,
outdeg.t1=df.list[[1]]$outdeg, outdeg.t2=df.list[[2]]$outdeg,
between.t1=df.list[[1]]$between, between.t2=df.list[[2]]$between,
close.t1=df.list[[1]]$close, close.t2=df.list[[2]]$close,
attendee=df.list[[1]]$attendee) #ignore attendee.t2 because attendence is constant
individuals
# loop through each property and test it that way
individual.tests <- list()
for(i in seq(dim(individuals)[2]-1)) {
individual.tests[[i]] <- t.test(individuals[which(individuals$attendee==1),i],
individuals[which(individuals$attendee==0),i])
}
for(i in seq(length(individual.tests))) {
print(paste(names(individuals)[i], 'by attendance status'))
print(individual.tests[[i]])
}
gsize(network) / (71*5)  #density
reciprocity(network)  #reciprocity
centr_degree(network, mode ="in", loops=F)  #centralization
att <- nodelist[,c("ID", "gender")]
source('~/University/Google Drive/Temp/Social Network Analysis/LK_analysis.R')
source('~/University/Google Drive/Temp/Social Network Analysis/LK_analysis.R')
source('~/University/Google Drive/Temp/Social Network Analysis/LK_analysis.R')
setwd('F:/www/vhosts/localhost/ExploringSocialMetacognition')
## 0. libraries
if(!require(jsonlite))
install.packages("jsonlite")
library(jsonlite)
## 1. load data
fileName <- 'participantData.JSON'
json <- readChar(fileName, file.info(fileName)$size)
myData <- fromJSON(json, simplifyVector = T, simplifyMatrix = T, simplifyDataFrame = T)
## 1. load data
fileName <- 'participantData.JSON'
json <- readChar(fileName, file.info(fileName)$size)
myData
## 1. load data
fileName <- 'participantData.JSON'
json <- readChar(fileName, file.info(fileName)$size)
myData <- fromJSON(json, simplifyVector = T, simplifyMatrix = T, simplifyDataFrame = T)
View(myData)
View(myData[["advisors"]])
View(myData[["trials"]])
