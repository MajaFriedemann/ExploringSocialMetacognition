mean, na.rm = T)),
precision = 3)
ggplot(tmp, aes(x = advisor, y = agreement, colour = pid)) +
geom_violin(colour = NA, fill = "grey75", alpha = .25) +
geom_boxplot(outlier.colour = NA, fill = NA, aes(group = advisor)) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_wrap(~ feedback, scales = "free_y", labeller = label_both)
tmp <- NULL
for (a in advisorNames) {
eq <- as.formula(paste0(a, ".distance ~ pid + hasFeedback"))
r <- aggregate(eq, AdvisedTrial, mean, na.rm = T)
colnames(r) <- c("pid", "feedback", "distance")
r$advisor = a
tmp <- rbind(tmp, as.tibble(r))
}
prop2str(as.tibble(aggregate(distance ~ advisor + feedback,
tmp,
mean, na.rm = T)),
precision = 3)
ggplot(tmp, aes(x = advisor, y = distance, colour = pid)) +
geom_violin(colour = NA, fill = "grey75", alpha = .25) +
geom_boxplot(outlier.colour = NA, fill = NA, aes(group = advisor)) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_wrap(~ feedback, labeller = label_both)
tmp <- NULL
for (a in advisorNames) {
eq <- as.formula(paste0(a, ".distance ~ pid + hasFeedback"))
r <- aggregate(eq, offBrand, mean, na.rm = T)
colnames(r) <- c("pid", "feedback", "distance")
r$advisor = a
tmp <- rbind(tmp, as.tibble(r))
}
prop2str(as.tibble(aggregate(distance ~ advisor + feedback,
tmp,
mean, na.rm = T)),
precision = 3)
ggplot(tmp, aes(x = advisor, y = distance, colour = pid)) +
geom_violin(colour = NA, fill = "grey75", alpha = .25) +
geom_boxplot(outlier.colour = NA, fill = NA, aes(group = advisor)) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_wrap(~ feedback, scales = "free_y", labeller = label_both)
tmp <- NULL
for (a in advisorNames) {
eq <- as.formula(paste0(a, ".woa ~ pid + hasFeedback"))
r <- aggregate(eq, AdvisedTrial, mean, na.rm = T)
colnames(r) <- c("pid", "feedback", "WoA")
r$advisor <- a
tmp <- rbind(tmp, r)
}
prop2str(as.tibble(aggregate(WoA ~ advisor + feedback, tmp, mean, na.rm = T)),
precision = 3)
ggplot(tmp, aes(x = advisor, y = WoA, colour = pid)) +
geom_violin(colour = NA, fill = "grey75", alpha = .25) +
geom_boxplot(outlier.colour = NA, fill = NA, aes(group = advisor)) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_wrap(~feedback, labeller = label_both)
tmp <- NULL
for (a in advisorNames) {
x <- block2[block2$advisor0idDescription == a, ]
eq <- as.formula(paste0(a, ".woa ~ pid + hasFeedback"))
r <- aggregate(eq, x, mean, na.rm = T)
colnames(r) <- c("pid", "feedback", "WoA")
r$advisor <- a
tmp <- rbind(tmp, r)
}
prop2str(as.tibble(aggregate(WoA ~ advisor + feedback, tmp, mean, na.rm = T)),
precision = 3)
ggplot(tmp, aes(x = advisor, y = WoA, colour = pid)) +
geom_violin(colour = NA, fill = "grey75", alpha = .25) +
geom_boxplot(outlier.colour = NA, fill = NA, aes(group = advisor)) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_wrap(~feedback, labeller = label_both)
tmp <- NULL
for (a in advisorNames) {
x <- offBrand[offBrand$advisor0idDescription == a, ]
eq <- as.formula(paste0(a, ".woa ~ pid + hasFeedback"))
r <- aggregate(eq, x, mean, na.rm = T)
colnames(r) <- c("pid", "feedback", "WoA")
r$advisor <- a
tmp <- rbind(tmp, r)
}
prop2str(as.tibble(aggregate(WoA ~ advisor + feedback, tmp, mean, na.rm = T)),
precision = 3)
ggplot(tmp, aes(x = advisor, y = WoA, colour = pid)) +
geom_violin(colour = NA, fill = "grey75", alpha = .25) +
geom_boxplot(outlier.colour = NA, fill = NA, aes(group = advisor)) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_wrap(~feedback, labeller = label_both)
low <- 0
high <- 1
n <- 11
block2$woa <- ""
for (x in c("woa", "woaRaw")) {
block2[, paste0("advisor0", x)] <- sapply(1:nrow(block2), function(i)
unlist(block2[i,
paste0(as.character(block2$advisor0idDescription[i]),
".", x)]))
}
block2$woa[block2$advisor0woaRaw >= 1] <- ">=1"
for (x in rev(seq(low, high, length.out = n))) {
block2$woa[block2$advisor0woaRaw < x] <- paste0("<", x)
}
block2$woa <- factor(block2$woa)
# update offbrand
offBrand <- block2[block2$advisor0actualType == "disagreeReflected", ]
tmp <- block2[!is.nan(block2$advisor0woaRaw), ]
ggplot(tmp, aes(woa)) +
geom_histogram(stat = "count") +
facet_grid(hasFeedback ~ advisor0idDescription, labeller = label_both)
tmp <-
block2[block2$woa %in% c("<0", ">=1", ""), c("pid", "advisor0idDescription",
"stimHTML", "number",
"responseEstimateLeft",
"responseMarkerWidth",
"responseEstimateLeftFinal",
"responseMarkerWidthFinal",
"advisor0advice",
"advisor0woa",
"advisor0woaRaw")]
tmp <- aggregate(errorReduction ~ pid + hasFeedback,
AdvisedTrial, mean, na.rm = T)
num2str(as.tibble(aggregate(errorReduction ~ hasFeedback,
tmp, mean, na.rm = T)))
ggplot(tmp, aes(x = hasFeedback, y = errorReduction, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA, aes(group = hasFeedback)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid))
tmp <- aggregate(errorReduction ~ pid + hasFeedback + advisor0idDescription,
block2, mean, na.rm = T)
num2str(as.tibble(aggregate(errorReduction ~
hasFeedback + advisor0idDescription,
tmp, mean, na.rm = T)))
ggplot(tmp,
aes(x = advisor0idDescription, y = errorReduction, colour = pid)) +
geom_hline(yintercept = 0, linetype = "dashed", size = 0.5) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA,
aes(group = advisor0idDescription)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_wrap(~hasFeedback, labeller = label_both)
tmp <- aggregate(errorReduction ~ pid + hasFeedback + advisor0idDescription,
offBrand, mean, na.rm = T)
num2str(as.tibble(aggregate(errorReduction ~
hasFeedback + advisor0idDescription,
tmp, mean, na.rm = T)))
ggplot(tmp,
aes(x = advisor0idDescription, y = errorReduction, colour = pid)) +
geom_hline(yintercept = 0, linetype = "dashed", size = 0.5) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA,
aes(group = advisor0idDescription)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_wrap(~hasFeedback, labeller = label_both)
tmp <- aggregate(accuracyChange ~ pid + hasFeedback,
AdvisedTrial, mean, na.rm = T)
num2str(as.tibble(aggregate(accuracyChange ~ hasFeedback,
tmp, mean, na.rm = T)))
ggplot(tmp, aes(x = hasFeedback, y = accuracyChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA, aes(group = hasFeedback)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid))
tmp <- aggregate(accuracyChange ~ pid + hasFeedback + advisor0idDescription,
block2, mean, na.rm = T)
num2str(as.tibble(aggregate(accuracyChange ~
hasFeedback + advisor0idDescription,
tmp, mean, na.rm = T)))
ggplot(tmp,
aes(x = advisor0idDescription, y = accuracyChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA,
aes(group = advisor0idDescription)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_wrap(~hasFeedback, labeller = label_both)
tmp <- aggregate(scoreChange ~ pid + hasFeedback, AdvisedTrial, mean, na.rm = T)
num2str(as.tibble(aggregate(scoreChange ~ hasFeedback, tmp, mean, na.rm = T)))
ggplot(tmp, aes(x = hasFeedback, y = scoreChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA, aes(group = hasFeedback)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid))
tmp <- aggregate(scoreChange ~ pid + hasFeedback + advisor0idDescription,
block2, mean, na.rm = T)
num2str(as.tibble(aggregate(scoreChange ~
hasFeedback + advisor0idDescription,
tmp, mean, na.rm = T)))
ggplot(tmp, aes(x = advisor0idDescription, y = scoreChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA,
aes(group = advisor0idDescription)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_wrap(~hasFeedback, labeller = label_both)
tmp <- aggregate(estimateLeftChange ~ pid + hasFeedback,
AdvisedTrial, mean, na.rm = T)
num2str(as.tibble(aggregate(estimateLeftChange ~ hasFeedback,
tmp, mean, na.rm = T)))
ggplot(tmp, aes(x = hasFeedback, y = estimateLeftChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA, aes(group = hasFeedback)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid))
tmp <- aggregate(estimateLeftChange ~
pid + hasFeedback + advisor0idDescription,
block2, mean, na.rm = T)
num2str(as.tibble(aggregate(estimateLeftChange ~
hasFeedback + advisor0idDescription,
tmp, mean, na.rm = T)))
ggplot(tmp,
aes(x = advisor0idDescription, y = estimateLeftChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA,
aes(group = advisor0idDescription)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_wrap(~hasFeedback, labeller = label_both)
tmp <- aggregate(estimateLeftChange ~
pid + hasFeedback + advisor0idDescription,
offBrand, mean, na.rm = T)
num2str(as.tibble(aggregate(estimateLeftChange ~
hasFeedback + advisor0idDescription,
tmp, mean, na.rm = T)))
ggplot(tmp,
aes(x = advisor0idDescription, y = estimateLeftChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA,
aes(group = advisor0idDescription)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_wrap(~hasFeedback, labeller = label_both)
tmp <- aggregate(confidenceChange ~ pid + hasFeedback,
AdvisedTrial, mean, na.rm = T)
num2str(as.tibble(aggregate(confidenceChange ~ hasFeedback,
tmp, mean, na.rm = T)))
ggplot(tmp, aes(x = hasFeedback, y = confidenceChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA, aes(group = hasFeedback)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid))
tmp <- aggregate(confidenceChange ~
pid + hasFeedback + advisor0idDescription,
block2, mean, na.rm = T)
num2str(as.tibble(aggregate(confidenceChange ~
hasFeedback + advisor0idDescription,
tmp, mean, na.rm = T)))
ggplot(tmp,
aes(x = advisor0idDescription, y = confidenceChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA,
aes(group = advisor0idDescription)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_wrap(~hasFeedback, labeller = label_both)
eq <- NULL
tmp <- NULL
for (a in advisorNames) {
eq <- as.formula(paste0(a, ".agreementChange", " ~ pid + hasFeedback"))
x <- aggregate(eq, AdvisedTrial, mean, na.rm = T)
if (is.null(tmp)) {
tmp <- x
} else {
tmp <- left_join(tmp, x, by = c("pid", "hasFeedback"))
}
}
tmp <- gather(tmp, "advisor", "agreementChange",
grep("\\.agreementChange", names(tmp)))
tmp$advisor <- sapply(tmp$advisor, function(s) reFirstMatch("([^\\.]+)", s))
num2str(as.tibble(aggregate(agreementChange ~ hasFeedback,
tmp, mean, na.rm = T)))
ggplot(tmp, aes(x = advisor, y = agreementChange, colour = pid)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA, aes(group = advisor)) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_wrap(~hasFeedback, labeller = label_both)
tmp <- aggregate(cbind(responseError, responseErrorFinal) ~ pid,
block2,
mean, na.rm = T)
r <- md.ttest(tmp$responseErrorFinal, tmp$responseError,
c("*M*|last", "*M*|first"), paired = T)
cat(r)
tmp <- aggregate(cbind(responseScore, responseScoreFinal) ~ pid,
block2,
mean, na.rm = T)
r <- md.ttest(tmp$responseScoreFinal, tmp$responseScore,
c("*M*|last", "*M*|first"), paired = T)
cat(r)
tmp <- aggregate(cbind(responseCorrect, responseCorrectFinal) ~ pid,
block2,
mean, na.rm = T)
r <- md.ttest(tmp$responseCorrectFinal,
tmp$responseCorrect,
c("*M*|last", "*M*|first"),
paired = T)
cat(r)
tmp <- aggregate(cbind(responseError, responseErrorFinal) ~ pid,
AdvisedTrial[AdvisedTrial$hasFeedback, ],
mean, na.rm = T)
r <- md.ttest(tmp$responseErrorFinal, tmp$responseError,
c("*M*|last", "*M*|first"),
paired = T)
cat(r)
tmp <- aggregate(cbind(responseScore, responseScoreFinal) ~ pid,
AdvisedTrial[AdvisedTrial$hasFeedback, ],
mean, na.rm = T)
r <- md.ttest(tmp$responseScoreFinal, tmp$responseScore,
c("*M*|last", "*M*|first"),
paired = T)
cat(r)
tmp <- aggregate(cbind(responseError, responseErrorFinal) ~ pid,
AdvisedTrial[!AdvisedTrial$hasFeedback, ],
mean, na.rm = T)
r <- md.ttest(tmp$responseErrorFinal, tmp$responseError,
c("*M*|last", "*M*|first"),
paired = T)
cat(r)
tmp <- aggregate(cbind(responseScore, responseScoreFinal) ~ pid,
AdvisedTrial[!AdvisedTrial$hasFeedback, ],
mean, na.rm = T)
r <- md.ttest(tmp$responseScoreFinal, tmp$responseScore,
c("*M*|last", "*M*|first"),
paired = T)
cat(r)
tmp <- aggregate(Accurate.woa ~ pid + hasFeedback,
AdvisedTrial, mean, na.rm = T)
r <- md.ttest(tmp$Accurate.woa[tmp$hasFeedback],
tmp$Accurate.woa[!tmp$hasFeedback],
labels = c("*M*|feedback", "*M*|¬feedback"))
cat(r)
tmp <- aggregate(Agreeing.woa ~ pid + hasFeedback,
AdvisedTrial, mean, na.rm = T)
r <- md.ttest(tmp$Agreeing.woa[tmp$hasFeedback],
tmp$Agreeing.woa[!tmp$hasFeedback],
labels = c("*M*|feedback", "*M*|¬feedback"))
cat(r)
tmp <- aggregate(advisor0woa ~
pid + hasFeedback + advisor0idDescription,
block2, mean)
cat("Feedback: ")
cat(md.ttest(tmp$advisor0woa[tmp$hasFeedback &
tmp$advisor0idDescription == "Agreeing"],
tmp$advisor0woa[tmp$hasFeedback &
tmp$advisor0idDescription != "Agreeing"],
labels = c("*M*|agr", "*M*|acc"),
paired = T))
cat("\n<br/>\nNo feedback: ")
cat(md.ttest(tmp$advisor0woa[!tmp$hasFeedback &
tmp$advisor0idDescription == "Agreeing"],
tmp$advisor0woa[!tmp$hasFeedback &
tmp$advisor0idDescription != "Agreeing"],
labels = c("*M*|agr", "*M*|acc"),
paired = T))
# calculate woa for the advisor
tmp <- aggregate(advisor0woa ~
pid + hasFeedback + advisor0idDescription + firstAdvisor,
block2, mean, na.rm = T)
tmp$hasFeedback <- factor(tmp$hasFeedback)
r <- BANOVA.Normal(l1_formula = advisor0woa ~ advisor0idDescription,
l2_formula = ~ hasFeedback + firstAdvisor,
data = tmp,
id = tmp$pid)
r
library(ez)
r <- ezANOVA(tmp, advisor0woa, pid,
within = advisor0idDescription,
between = list(hasFeedback, firstAdvisor),
detailed = T,
return_aov = T,
type = 2)
r
tmp <- aggregate(advisor0woa ~
pid + hasFeedback + advisor0idDescription + firstAdvisor,
offBrand, mean, na.rm = T)
tmp$hasFeedback <- factor(tmp$hasFeedback)
# remove incomplete cases
for (p in unique(tmp$pid)) {
if (nrow(tmp[tmp$pid == p, ]) != 2) {
print(paste("Dropping incomplete case pid =", p))
tmp <- tmp[tmp$pid != p, ]
}
}
# refactor pid
tmp$pid <- factor(tmp$pid)
r <- ezANOVA(tmp, advisor0woa, pid,
within = advisor0idDescription,
between = list(hasFeedback, firstAdvisor),
detailed = T,
return_aov = T,
type = 2)
r
anova(lm(advisor0woa ~ advisor0distance, block2, na.action = na.exclude),
lm(advisor0woa ~ poly(advisor0distance, 2), block2, na.action = na.exclude))
theme_update(legend.position = 'bottom')
ggplot(block2, aes(x = advisor0distance, y = advisor0woa)) +
geom_point(aes(shape = advisor0idDescription), alpha = 0.25, size = 3) +
geom_smooth(aes(group = pid, linetype = advisor0idDescription),
colour = "grey", se = F, method = 'lm', formula = y ~ poly(x, 2),
alpha = 0.05) +
geom_smooth(aes(linetype = advisor0idDescription,
fill = advisor0idDescription),
method = 'lm', formula = y ~ poly(x, 2)) +
facet_wrap(~ hasFeedback, labeller = label_both)
ggplot(block2, aes(x = advisor0error, y = advisor0woa)) +
geom_point(aes(shape = advisor0idDescription), alpha = 0.25, size = 3) +
geom_smooth(aes(group = pid, linetype = advisor0idDescription),
colour = "grey", se = F, method = 'lm', alpha = 0.05) +
geom_smooth(aes(linetype = advisor0idDescription,
fill = advisor0idDescription),
method = 'lm') +
facet_wrap(~ hasFeedback, labeller = label_both)
ggplot(block2, aes(x = responseError, y = advisor0woa)) +
geom_point(aes(shape = advisor0idDescription), alpha = 0.25, size = 3) +
geom_smooth(aes(group = pid, linetype = advisor0idDescription),
colour = "grey", se = F, method = 'lm', alpha = 0.05) +
geom_smooth(aes(linetype = advisor0idDescription,
fill = advisor0idDescription),
method = 'lm') +
facet_wrap(~ hasFeedback, labeller = label_both)
ggplot(block2, aes(x = responseMarkerWidth, y = advisor0woa)) +
geom_point(aes(shape = advisor0idDescription), alpha = 0.25, size = 3) +
geom_smooth(aes(group = pid, linetype = advisor0idDescription),
colour = "grey", se = F, method = 'lm', alpha = 0.05) +
geom_smooth(aes(linetype = advisor0idDescription,
fill = advisor0idDescription),
method = 'lm') +
scale_x_continuous(breaks = c(1, 3, 9)) +
facet_wrap(~ hasFeedback, labeller = label_both)
debrief.advisors$uid <- paste0(debrief.advisors$pid, "_",
debrief.advisors$advisorId)
advisors$uid <- paste0(advisors$pid, "_", advisors$id)
tmp <- left_join(debrief.advisors, advisors[, 6:ncol(advisors)], by = "uid")
tmp <- gather(tmp, "Q", "A", knowledge:likability)
tmp <- tmp[tmp$pid %in% AdvisedTrial$pid, ]
ggplot(tmp, aes(x = Q, y = A, colour = hasFeedback)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA, colour = "black",
aes(group = Q)) +
stat_summary(geom = "line", aes(group = pid, colour = pid), alpha = .25) +
stat_summary(geom = "line", fun.y = mean, colour = "black",
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_grid(hasFeedback ~ idDescription, labeller = label_both)
tmp$woa <- sapply(seq(nrow(tmp)), function(i)
mean(pull(block2[block2$pid %in% tmp$pid[i], ],
paste0(tmp$idDescription[i], ".woa")), na.rm = T))
ggplot(tmp, aes(x = A, y = woa, linetype = hasFeedback,
fill = hasFeedback, colour = hasFeedback)) +
geom_hline(yintercept = 0, linetype = "dashed", size = .5) +
geom_hline(yintercept = 1, linetype = "dashed", size = .5) +
geom_vline(xintercept = 100, linetype = "dashed", size = .5) +
geom_vline(xintercept = 0, linetype = "dashed", size = .5) +
geom_smooth(method = 'lm', alpha = .5) +
geom_point(alpha = .5, size = 3) +
facet_grid(idDescription ~ Q) +
theme(legend.position = 'bottom')
# list packages
packageNames <- (.packages())
# don't include very core package
packageNames <- packageNames[!(packageNames %in%
rownames(installed.packages(
priority = "base")))]
# but do include the base package
packageNames <- c("base", packageNames)
out <- NULL
for (p in packageNames) {
out <- rbind(out, data.frame('Package' = p,
'Citations' = paste(format(citation(p),
style = 'textVersion'),
collapse = '<br/><br/>')))
}
kable(out)
cat(paste('Time stamp:', Sys.time(), '\n\n'))
cat('Runtime \n')
proc.time()
cat('\n')
sessionInfo()
