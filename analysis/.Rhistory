geom_point(position = position_jitter(w=0.1, h=0), alpha = 0.5) +
stat_summary(geom = "errorbar",
fun.data = "mean_cl_boot",
width = 0.2) +
stat_summary(geom = "point",
fun.y = "mean",
shape = 23, size = 5) +
stat_summary(aes(group = adviceType), fun.y=mean, geom="line") +
facet_grid(.~hasChoice,
labeller = as_labeller(c('FALSE'='Forced trials','TRUE'='Choice trials'))) +
scale_color_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_fill_discrete(name = 'Advisor type', labels = c('Agree-in-confidence', 'Agree-in-uncertainty')) +
scale_x_discrete(name = 'Judge-advisor agreement', labels = c('Disagree', 'Agree')) +
labs(title = "Advice Influence",
legend = NULL,
y = "Influence of the advice") +
style
gg.vii.ii
# Was the response to the advice irrational?
trials$irrational <- trials[(trials$advisorAgrees & trials$confidenceShift < 0) |
(!trials$advisorAgrees & trials$confidenceShift > 0)]
# Was the response to the advice irrational?
trials$irrational <- (trials$advisorAgrees & trials$confidenceShift < 0) |
(!trials$advisorAgrees & trials$confidenceShift > 0)
mean(trials$irrational)
mean(trials$irrational[trials$advisorAgrees])
mean(trials$irrational[!trials$advisorAgrees])
mean(trials$irrational[trials$adviceType==adviceTypes$AiU])
mean(trials$irrational[trials$adviceType==adviceTypes$AiC])
tmp <- melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid', 'timepoint', 'influence'),
measure.vars = c('likeability', 'ability', 'benevolence'),
variable.name = 'trustDimension', value.name = 'trust')
library(reshape2)
tmp <- melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid', 'timepoint', 'influence'),
measure.vars = c('likeability', 'ability', 'benevolence'),
variable.name = 'trustDimension', value.name = 'trust')
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
# calculate difference scores
for(i in 1:nrow(tmp))
if(tmp$timepoint[i]==2)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
tmp.2 <- aggregate(influence ~ adviceType + pid + hasChoice,
data = trials, FUN = mean)
tmp$influence <- sapply(1:nrow(tmp), function(i){tmp.2$influence[tmp.2$hasChoice
& tmp.2$pid == tmp$pid[i]
& tmp.2$adviceType == tmp$adviceType[i]]})
tmp <- melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid', 'timepoint', 'influence'),
measure.vars = c('likeability', 'ability', 'benevolence'),
variable.name = 'trustDimension', value.name = 'trust')
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
# calculate difference scores
for(i in 1:nrow(tmp))
if(tmp$timepoint[i]==2)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
tmp.2 <- aggregate(influence ~ adviceType + pid + hasChoice,
data = trials, FUN = mean)
tmp$influence <- sapply(1:nrow(tmp), function(i){tmp.2$influence[tmp.2$hasChoice
& tmp.2$pid == tmp$pid[i]
& tmp.2$adviceType == tmp$adviceType[i]]})
# The test is a regression with the change in subjective variables as predictors
lm.x.i <- lm(influence ~ ability + benevolence + likeability, data = tmp)
print(summary(lm.x.i))
tmp <- tmp$adviceType==adviceTypes$AiU
# The test is a regression with the change in subjective variables as predictors
lm.x.i <- lm(influence ~ ability + benevolence + likeability, data = tmp)
tmp <- aggregate(cbind(likeability, ability, benevolence) ~ adviceType + timepoint + pid,
data = questionnaires, FUN = mean)
# calculate difference scores
for(i in 1:nrow(tmp))
if(tmp$timepoint[i]==2)
tmp[i,4:6] <- tmp[i, 4:6] - tmp[tmp$timepoint==1
& tmp$pid == tmp$pid[i]
& tmp$adviceType == tmp$adviceType[i], 4:6]
tmp.2 <- aggregate(influence ~ adviceType + pid + hasChoice,
data = trials, FUN = mean)
tmp$influence <- sapply(1:nrow(tmp), function(i){tmp.2$influence[tmp.2$hasChoice
& tmp.2$pid == tmp$pid[i]
& tmp.2$adviceType == tmp$adviceType[i]]})
tmp <- tmp[tmp$adviceType==adviceTypes$AiU, ]
# The test is a regression with the change in subjective variables as predictors
lm.x.i <- lm(influence ~ ability + benevolence + likeability, data = tmp)
print(summary(lm.x.i))
tmp <- melt(tmp[tmp$timepoint==2, ], id.vars = c('adviceType', 'pid', 'timepoint', 'influence'),
measure.vars = c('likeability', 'ability', 'benevolence'),
variable.name = 'trustDimension', value.name = 'trust')
gg.x.ii <- ggplot(tmp, aes(x = trust, y = influence, colour = factor(adviceType))) +
geom_point(alpha = 0.33) +
geom_smooth(method = 'lm', aes(fill = factor(adviceType)), alpha = 0.1) +
facet_grid(trustDimension ~ .) +
coord_fixed(ratio = 3, expand = F) +
scale_x_continuous(name = 'Trust change') +
scale_y_continuous(name = 'Influence') +
scale_color_discrete(name = 'Advice type', labels = c('Agree in Confidence', 'Agree in Uncertainty')) +
scale_fill_discrete(name = 'Advice type', labels = c('Agree in Confidence', 'Agree in Uncertainty')) +
style
gg.x.ii
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
aov(adviceType ~ confidenceCategory, data = tmp)
summary(aov(adviceType ~ confidenceCategory, data = tmp))
summary(aov(adviceType ~ confidenceCategory + Error(pid), data = tmp))
summary(aov(adviceType ~ confidenceCategory + Error(pid / confidenceCategory), data = tmp))
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$force, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
t.test(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
cohensD(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high])
ttestBF(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
# And the same with mid-confidence trials only:
tmp <- aggregate(adviceType ~ pid,
data = trials[trials$type==trialTypes$choice
& trials$confidenceCategory==confidenceCategories$medium, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
t.vi.ii <- t.test(tmp$adviceType, mu=0.5)
d <- cohensD(tmp$adviceType, mu=0.5)
prettyPrint(t.vi.ii,d)
# 13) Confidence autocorrelation plots by participant ####
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid, ]
ggplot(tmp, aes(x = initialConfSpan, y = finalConfSpan)) +
geom_polygon(data = df.poly1, aes(x,y), fill = 'grey', alpha = 0.2) +
geom_polygon(data = df.poly2, aes(x,y), fill = 'grey', alpha = 0.2) +
geom_point(alpha = 0.2, aes(color = factor(finalCorrect))) +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed', size = 1, color = 'black') +
scale_color_discrete(name = 'Final judgement', labels = c('Incorrect', 'Correct')) +
scale_x_continuous(limits = c(-50,50), expand = c(0,0)) +
scale_y_continuous(limits = c(-50,50), expand = c(0,0)) +
facet_grid(~advisorAgrees, labeller = as_labeller(c('FALSE'='Disagree', 'TRUE'='Agree'))) +
labs(title = "Initial vs final confidence",
legend = NULL,
x = 'Initial confidence',
y = "Final confidence") +
coord_fixed() +
style +
theme(panel.spacing = unit(1.5, 'lines'),
plot.margin = unit(c(0,1,0,0.5), 'lines'))
ggsave(paste0('autocorrelations/pid', pid, '.png'))
}
library(tidyverse)
# 13) Confidence autocorrelation plots by participant ####
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid, ]
ggplot(tmp, aes(x = initialConfSpan, y = finalConfSpan)) +
geom_polygon(data = df.poly1, aes(x,y), fill = 'grey', alpha = 0.2) +
geom_polygon(data = df.poly2, aes(x,y), fill = 'grey', alpha = 0.2) +
geom_point(alpha = 0.2, aes(color = factor(finalCorrect))) +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed', size = 1, color = 'black') +
scale_color_discrete(name = 'Final judgement', labels = c('Incorrect', 'Correct')) +
scale_x_continuous(limits = c(-50,50), expand = c(0,0)) +
scale_y_continuous(limits = c(-50,50), expand = c(0,0)) +
facet_grid(~advisorAgrees, labeller = as_labeller(c('FALSE'='Disagree', 'TRUE'='Agree'))) +
labs(title = "Initial vs final confidence",
legend = NULL,
x = 'Initial confidence',
y = "Final confidence") +
coord_fixed() +
style +
theme(panel.spacing = unit(1.5, 'lines'),
plot.margin = unit(c(0,1,0,0.5), 'lines'))
ggsave(paste0('autocorrelations/pid', pid, '.png'))
}
getwd()
# 13) Confidence autocorrelation plots by participant ####
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid, ]
ggplot(tmp, aes(x = initialConfSpan, y = finalConfSpan)) +
geom_polygon(data = df.poly1, aes(x,y), fill = 'grey', alpha = 0.2) +
geom_polygon(data = df.poly2, aes(x,y), fill = 'grey', alpha = 0.2) +
geom_point(alpha = 0.2, aes(color = factor(finalCorrect))) +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed', size = 1, color = 'black') +
scale_color_discrete(name = 'Final judgement', labels = c('Incorrect', 'Correct')) +
scale_x_continuous(limits = c(-50,50), expand = c(0,0)) +
scale_y_continuous(limits = c(-50,50), expand = c(0,0)) +
facet_grid(~advisorAgrees, labeller = as_labeller(c('FALSE'='Disagree', 'TRUE'='Agree'))) +
labs(title = "Initial vs final confidence",
legend = NULL,
x = 'Initial confidence',
y = "Final confidence") +
coord_fixed() +
style +
theme(panel.spacing = unit(1.5, 'lines'),
plot.margin = unit(c(0,1,0,0.5), 'lines'))
ggsave(paste0('explore/autocorrelations/pid', pid, '.png'))
}
# 13) Confidence autocorrelation plots by participant ####
for(pid in unique(trials$pid)) {
tmp <- trials[trials$pid == pid, ]
ggplot(tmp, aes(x = initialConfSpan, y = finalConfSpan)) +
geom_polygon(data = df.poly1, aes(x,y), fill = 'grey', alpha = 0.2) +
geom_polygon(data = df.poly2, aes(x,y), fill = 'grey', alpha = 0.2) +
geom_point(alpha = 0.2, aes(color = factor(finalCorrect))) +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed', size = 1, color = 'black') +
scale_color_discrete(name = 'Final judgement', labels = c('Incorrect', 'Correct')) +
scale_x_continuous(limits = c(-50,50), expand = c(0,0)) +
scale_y_continuous(limits = c(-50,50), expand = c(0,0)) +
facet_grid(~advisorAgrees, labeller = as_labeller(c('FALSE'='Disagree', 'TRUE'='Agree'))) +
labs(title = paste0('PID: ', pid, 'Initial vs final confidence'),
legend = NULL,
x = 'Initial confidence',
y = "Final confidence") +
coord_fixed() +
style +
theme(panel.spacing = unit(1.5, 'lines'),
plot.margin = unit(c(0,1,0,0.5), 'lines'))
ggsave(paste0('explore/autocorrelations/pid', pid, '.png'), width = 8.96, height = 5.97, units = 'in')
}
library(tidyverse)
shiny::runApp('AccuracyCurves')
x <- as.data.frame(seq(1,100,0.1))
z <- .8
ggplot(x, aes(x)) + stat_function(fun = f, args = (z = z))
f <- function(x,z) {
y <- 1 - (z - 0.71*x)/0.29
}
l
ggplot(x, aes(x)) + stat_function(fun = f, args = (z = z))
x <- seq(1,100,0.1)
ggplot(x, aes(x)) + stat_function(fun = f, args = (z = z))
x <- data.frame(x = seq(1,100,0.1))
ggplot(x, aes(x)) + stat_function(fun = f, args = (z = z))
f(0.2,0.8)
print(f(0.2,0.8))
print(f(0.8,0.8))
x <- data.frame(x = seq(0.01,.99,0.1))
ggplot(x, aes(x)) + stat_function(fun = f, args = (z = z))
ggplot(x, aes(x)) +
stat_function(fun = f, args = (z = z)) +
scale_y_continuous(limits = c(0,1)) +
scale_x_continuous(limits = c(0,1))
runApp('AccuracyCurves')
ggplot(x, aes(x)) +
stat_function(fun = f, args = (z = z)) +
scale_y_continuous(name = 'P(Agree|Incorrect)', limits = c(0,1)) +
scale_x_continuous(name = 'P(Agree|Correct)', limits = c(0,1))
ggplot(x, aes(x)) +
stat_function(fun = f, args = (z = z)) +
scale_y_continuous(name = 'P(Agree|Incorrect)', limits = c(0,1)) +
scale_x_continuous(name = 'P(Agree|Correct)', limits = c(0,1)) +
labs(title = paste0('Line shows accuracy=', z))
z<-.95
ggplot(x, aes(x)) +
stat_function(fun = f, args = (z = z)) +
scale_y_continuous(name = 'P(Agree|Incorrect)', limits = c(0,1)) +
scale_x_continuous(name = 'P(Agree|Correct)', limits = c(0,1)) +
labs(title = paste0('Line shows accuracy=', z))
ggplot(x, aes(x)) +
stat_function(fun = f, args = (z = z)) +
scale_y_continuous(name = 'P(Agree|Incorrect)',
limits = c(0,1),
breaks = seq(0,1,0.05)) +
scale_x_continuous(name = 'P(Agree|Correct)',
limits = c(0,1),
breaks = seq(0,1,0.05)) +
labs(title = paste0('Line shows accuracy=', z))
ggplot(x, aes(x)) +
stat_function(fun = f, args = (z = z)) +
scale_y_continuous(name = 'P(Agree|Incorrect)',
limits = c(0,1),
breaks = seq(0,1,0.05)) +
scale_x_continuous(name = 'P(Agree|Correct)',
limits = c(0,1),
breaks = seq(0,1,0.05)) +
labs(title = paste0('Line shows accuracy=', z)) +
theme_light()
ggplot(x, aes(x)) +
stat_function(fun = f, args = (z = z)) +
scale_y_continuous(name = 'P(Agree|Incorrect)',
limits = c(0,1),
breaks = seq(0,1,0.05)) +
scale_x_continuous(name = 'P(Agree|Correct)',
limits = c(0,1),
breaks = seq(0,1,0.05)) +
labs(title = paste0('Line shows accuracy=', z)) +
coord_fixed() +
theme_light()
runApp('AccuracyCurves')
shiny::runApp('AccuracyCurves')
names(trials)
participants$difficultyStep
participants$dotCount
getDotDifferences <- function(input, difficultyStep = 3, startingDotDifference = 30) {
out <- vector(startingDotDifference, length = nrow(input))
correct = T # first trial is forced to be correct
for(i in 1:nrow(input)) {
trial <- input[i, ]
# easier if wrong
if(!trial$initialCorrect)
out[i+1] <- out[i] + difficultyStep
else if(correct) {
# two in a row = make harder
out[i+1] <- out[i] - difficultyStep
if(out[i+1] < 1)
out[i+1] <- 1
}
correct <- trial$initialCorrect
}
}
tmp <- all.trials
for(pid in unique(tmp$pid)){
tmp$dotDifference[tmp$pid == pid] <- getDotDifferences(tmp[tmp$pid==pid, ])
}
# 15) Examining dot difference ####
getDotDifferences <- function(input, difficultyStep = 3, startingDotDifference = 30) {
out <- rep(startingDotDifference, lnrow(input))
correct = T # first trial is forced to be correct
for(i in 1:nrow(input)) {
trial <- input[i, ]
# easier if wrong
if(!trial$initialCorrect)
out[i+1] <- out[i] + difficultyStep
else if(correct) {
# two in a row = make harder
out[i+1] <- out[i] - difficultyStep
if(out[i+1] < 1)
out[i+1] <- 1
}
correct <- trial$initialCorrect
}
}
tmp <- all.trials
for(pid in unique(tmp$pid)){
tmp$dotDifference[tmp$pid == pid] <- getDotDifferences(tmp[tmp$pid==pid, ])
}
# 15) Examining dot difference ####
getDotDifferences <- function(input, difficultyStep = 3, startingDotDifference = 30) {
out <- rep(startingDotDifference, nrow(input))
correct = T # first trial is forced to be correct
for(i in 1:nrow(input)) {
trial <- input[i, ]
# easier if wrong
if(!trial$initialCorrect)
out[i+1] <- out[i] + difficultyStep
else if(correct) {
# two in a row = make harder
out[i+1] <- out[i] - difficultyStep
if(out[i+1] < 1)
out[i+1] <- 1
}
correct <- trial$initialCorrect
}
}
tmp <- all.trials
for(pid in unique(tmp$pid)){
tmp$dotDifference[tmp$pid == pid] <- getDotDifferences(tmp[tmp$pid==pid, ])
}
ggplot(tmp, aes(x = id, y = dotDifference, colour = as.factor(pid))) +
geom_smooth() +
style.long
tmp$dotDifference[tmp$pid == pid]
tmp <- all.trials[all.trials$pid %in% participants$pid, ]
for(pid in unique(tmp$pid)){
tmp$dotDifference[tmp$pid == pid] <- getDotDifferences(tmp[tmp$pid==pid, ])
}
# 15) Examining dot difference ####
getDotDifferences <- function(input, difficultyStep = 3, startingDotDifference = 30) {
out <- rep(startingDotDifference, nrow(input))
correct = T # first trial is forced to be correct
for(i in 1:nrow(input)) {
trial <- input[i, ]
# easier if wrong
if(!trial$initialCorrect)
out[i+1] <- out[i] + difficultyStep
else if(correct) {
# two in a row = make harder
out[i+1] <- out[i] - difficultyStep
if(out[i+1] < 1)
out[i+1] <- 1
}
correct <- trial$initialCorrect
}
return(out)
}
tmp <- all.trials[all.trials$pid %in% participants$pid, ]
for(pid in unique(tmp$pid)){
tmp$dotDifference[tmp$pid == pid] <- getDotDifferences(tmp[tmp$pid==pid, ])
}
ggplot(tmp, aes(x = id, y = dotDifference, colour = as.factor(pid))) +
geom_smooth() +
style.long
ggplot(tmp, aes(x = id, y = dotDifference, colour = as.factor(pid))) +
geom_smooth(se = F) +
style.long
ggplot(tmp, aes(x = id, y = dotDifference, colour = as.factor(pid))) +
geom_smooth(se = F) +
scale_x_continuous(limits = c(60,269)) +
style.long
ggplot(tmp, aes(x = id, y = dotDifference, colour = as.factor(pid))) +
geom_smooth(se = F) +
scale_x_continuous(limits = c(60,246)) +
style.long
ggplot(tmp, aes(x = id, y = dotDifference, group = as.factor(pid))) +
geom_smooth(se = F) +
scale_x_continuous(limits = c(60,246)) +
style.long +
labs(title = 'Participant {frame_time}') +
transition_time(pid) +
enter_fade() +
ease_aes('sine-in-out')
g <- ggplot(tmp, aes(x = id, y = dotDifference, group = as.factor(pid))) +
geom_smooth(se = F) +
scale_x_continuous(limits = c(60,246)) +
style.long +
labs(title = 'Participant {frame_time}') +
transition_time(pid) +
enter_fade() +
ease_aes('sine-in-out')
animate(g, fps = 20, detail = 10)
animate(g, fps = 1)
g <- ggplot(tmp, aes(x = id, y = dotDifference, group = as.factor(pid))) +
geom_line() +
scale_x_continuous(limits = c(60,246)) +
style.long +
labs(title = 'Participant {frame_time}') +
transition_time(pid) +
enter_fade() +
ease_aes('sine-in-out')
animate(g, fps = 1)
ggplot(tmp, aes(x = id, y = dotDifference, group = as.factor(pid))) +
geom_line() +
scale_x_continuous(limits = c(60,246)) +
style.long
g <- ggplot(tmp, aes(x = id, y = dotDifference, group = as.factor(pid))) +
geom_line() +
scale_x_continuous(limits = c(60,246)) +
style.long +
labs(title = 'Participant {frame_time}') +
transition_time(pid) +
enter_fade() +
ease_aes('sine-in-out')
animate(g, fps = 1)
g <- ggplot(tmp, aes(x = id, y = dotDifference)) +
geom_line() +
scale_x_continuous(limits = c(60,246)) +
style.long +
labs(title = 'Participant {frame_time}') +
transition_time(pid) +
enter_fade() +
ease_aes('sine-in-out')
animate(g, fps = 1)
g <- ggplot(tmp, aes(x = id, y = dotDifference)) +
geom_line() +
geom_smooth(method = 'lm') +
scale_x_continuous(limits = c(60,246)) +
style.long +
labs(title = 'Participant {frame_time}') +
transition_time(pid) +
enter_fade() +
ease_aes('sine-in-out')
animate(g, fps = 1)
# 15) Examining dot difference ####
getDotDifferences <- function(input, difficultyStep = 3, startingDotDifference = 30) {
out <- rep(startingDotDifference, nrow(input))
correct = T # first trial is forced to be correct
for(i in 1:nrow(input)) {
trial <- input[i, ]
# easier if wrong
if(!trial$initialCorrect)
out[i+1] <- out[i] + difficultyStep
else if(correct) {
# two in a row = make harder
out[i+1] <- out[i] - difficultyStep
if(out[i+1] < 1)
out[i+1] <- 1
} else {
out[i+1] <- out[i]
}
correct <- trial$initialCorrect
}
return(out)
}
tmp <- all.trials[all.trials$pid %in% participants$pid, ]
for(pid in unique(tmp$pid)){
tmp$dotDifference[tmp$pid == pid] <- getDotDifferences(tmp[tmp$pid==pid, ])
}
g <- ggplot(tmp, aes(x = id, y = dotDifference)) +
geom_line() +
geom_smooth(method = 'lm') +
scale_x_continuous(limits = c(60,246)) +
style.long +
labs(title = 'Participant {frame_time}') +
transition_time(pid) +
enter_fade() +
ease_aes('sine-in-out')
animate(g, fps = 1)
mean(tmp$dotDifference)
