uniqueTotal <- function(x) {
out <- as.list(unique(x))
out[[length(out) + 1]] <- unique(x)
out
}
expect_equal(uniqueTotal(c("a", "b", "c")),
list("a", "b", "c", c("a", "b", "c")))
version <- "0-0-15"
prefix <- paste0("datesStudy_v", version)
files <- list.files("../../data/public/", full.names = T)
files <- files[grepl(prefix, files, fixed = T)]
idsCSV <- paste0("../../data/public/", prefix, "_okayIds.csv")
if (!file.exists(idsCSV)) {
source("privateDataScript.R")
}
okayIds <- read.csv(idsCSV)
for (f in files) {
tmp <- as.tibble(read.csv(f))
# screen out non-okay ids
if ("pid" %in% names(tmp))
tmp <- tmp[tmp$pid %in% okayIds$pid[okayIds$okay], ]
if ("stimHTML" %in% names(tmp)) {
tmp$stimHTML <- stripTags(tmp$stimHTML)
}
# type coersion
if ("comment" %in% names(tmp))
tmp$comment <- as.character(tmp$comment)
n <- grep("advisor[0-9]+(name|validTypes|nominalType|actualType)$",
names(tmp), value = T)
for (x in n)
tmp[, x] <- lapply(tmp[, x], as.character)
n <- grep("responseEstimateLabel", names(tmp), value = T)
for (x in n)
tmp[, x] <- lapply(tmp[, x], function(y)
as.numeric(stripTags((as.character(y)))))
if ("responseMarkerWidth" %in% names(tmp))
tmp$responseMarker <- factor(tmp[["responseMarkerWidth"]])
if ("responseMarkerWidthFinal" %in% names(tmp))
tmp$responseMarkerFinal <- factor(tmp[["responseMarkerWidthFinal"]])
# assign to workspace
name <- reFirstMatch("([^_]+)\\.csv", f)
name <- sub("-", ".", name)
assign(name, tmp)
}
# Reference variables
# Gather a list of advisor names and advice types
names <- NULL
types <- NULL
i <- 0
while (T) {
if (!length(grep(paste0("advisor", i), names(AdvisedTrial)))) {
break()
}
names <- unique(c(names,
unique(AdvisedTrial[, paste0("advisor", i,
"idDescription")])))
types <- unique(c(types,
unique(AdvisedTrial[, paste0("advisor", i,
"actualType")]),
unique(AdvisedTrial[, paste0("advisor", i,
"nominalType")])))
i <- i + 1
}
advisorNames <- unlist(names)
adviceTypes <- unlist(types)
# Produce equivalents of the advisor1|2... variables which are named for the
# advisor giving the advice
for (v in names(AdvisedTrial)[grepl("advisor0", names(AdvisedTrial))]) {
suffix <- reFirstMatch("advisor0(\\S+)", v)
for (a in advisorNames) {
s <- paste0(a, ".", suffix)
AdvisedTrial[, s] <- NA
for (i in 1:nrow(AdvisedTrial)) {
x <- 0
while (T) {
if (!length(grep(paste0("advisor", x),
names(AdvisedTrial)))) {
break()
}
if (AdvisedTrial[i, paste0("advisor", x, "idDescription")] == a) {
AdvisedTrial[i, s] <- AdvisedTrial[i, paste0("advisor", x, suffix)]
break()
}
x <- x + 1
}
}
}
}
# Trials
AdvisedTrial$hasFeedback <- !is.na(AdvisedTrial$timeFeedbackOn)
AdvisedTrial$responseCorrect <-
AdvisedTrial$correctAnswer >= AdvisedTrial$responseEstimateLeft &
AdvisedTrial$correctAnswer <= AdvisedTrial$responseEstimateLeft +
AdvisedTrial$responseMarkerWidth
AdvisedTrial$responseCorrectFinal <-
AdvisedTrial$correctAnswer >= AdvisedTrial$responseEstimateLeftFinal &
AdvisedTrial$correctAnswer <= AdvisedTrial$responseEstimateLeftFinal +
AdvisedTrial$responseMarkerWidthFinal
Trial$responseCorrect <-
Trial$correctAnswer >= Trial$responseEstimateLeft &
Trial$correctAnswer <= Trial$responseEstimateLeft +
Trial$responseMarkerWidth
AdvisedTrial$responseError <- abs(AdvisedTrial$correctAnswer -
AdvisedTrial$responseEstimateLeft +
(AdvisedTrial$responseMarkerWidth / 2))
AdvisedTrial$responseErrorFinal <- abs(AdvisedTrial$correctAnswer -
AdvisedTrial$responseEstimateLeftFinal
+ (AdvisedTrial$responseMarkerWidthFinal
/ 2))
AdvisedTrial$responseScore <-
ifelse(AdvisedTrial$responseCorrect,
27 / AdvisedTrial$responseMarkerWidth, 0)
AdvisedTrial$responseScoreFinal <-
ifelse(AdvisedTrial$responseCorrectFinal,
27 / AdvisedTrial$responseMarkerWidthFinal, 0)
AdvisedTrial$accuracyChange <- AdvisedTrial$responseCorrectFinal -
AdvisedTrial$responseCorrect
AdvisedTrial$scoreChange <- AdvisedTrial$responseScoreFinal -
AdvisedTrial$responseScore
AdvisedTrial$estimateLeftChange <- abs(AdvisedTrial$responseEstimateLeftFinal -
AdvisedTrial$responseEstimateLeft)
AdvisedTrial$confidenceChange <-
(4 - as.numeric(AdvisedTrial$responseMarkerFinal)) -
(4 - as.numeric(AdvisedTrial$responseMarker))
# Trials - advisor-specific variables
for (a in advisorNames) {
# Accuracy
AdvisedTrial[, paste0(a, ".accurate")] <-
(AdvisedTrial[, paste0(a, ".advice")] -
(AdvisedTrial[, paste0(a, ".adviceWidth")] / 2)) <=
AdvisedTrial[, "correctAnswer"] &
(AdvisedTrial[, paste0(a, ".advice")] +
(AdvisedTrial[, paste0(a, ".adviceWidth")] / 2)) >=
AdvisedTrial[, "correctAnswer"]
# Error
AdvisedTrial[, paste0(a, ".error")] <-
abs(AdvisedTrial[, paste0(a, ".advice")] - AdvisedTrial[, "correctAnswer"])
# Weight on Advice
i <- AdvisedTrial[, "responseEstimateLeft"] +
(AdvisedTrial[, "responseMarkerWidth"] - 1) / 2
f <- AdvisedTrial[, "responseEstimateLeftFinal"] +
(AdvisedTrial[, "responseMarkerWidthFinal"] - 1) / 2
adv <- AdvisedTrial[, paste0(a, ".advice")]
x <- ((f - i) / (adv - i))
AdvisedTrial[, paste0(a, ".woaRaw")] <- x
x[x < 0] <- 0
x[x > 1] <- 1
AdvisedTrial[, paste0(a, ".woa")] <- x
# Agreement
for (d in c("", "Final")) {
minA <- AdvisedTrial[, paste0(a, ".advice")] -
(AdvisedTrial[, paste0(a, ".adviceWidth")] / 2)
maxA <- AdvisedTrial[, paste0(a, ".advice")] +
(AdvisedTrial[, paste0(a, ".adviceWidth")] / 2)
minP <- AdvisedTrial[, paste0("responseEstimateLeft", d)]
maxP <- minP + AdvisedTrial[, paste0("responseMarkerWidth", d)]
AdvisedTrial[, paste0(a, ".agree", d)] <-
((minA >= minP) & (minA <= maxP)) | ((maxA >= minP) & (maxA <= minP))
# Distance
reMid <- minP + (maxP - minP) / 2
advice <- AdvisedTrial[, paste0(a, ".advice")]
AdvisedTrial[, paste0(a, ".distance", d)] <- abs(reMid - advice)
}
# Agreement change
AdvisedTrial[, paste0(a, ".agreementChange")] <-
AdvisedTrial[, paste0(a, ".agreeFinal")] -
AdvisedTrial[, paste0(a, ".agree")]
}
# Advisors
advisors$meanPosition <- NA
for (i in 1:nrow(advisors)) {
if (advisors$idDescription[i] == "Practice") {
next()
}
tmp <- AdvisedTrial[AdvisedTrial$pid %in% advisors$pid[i], ]
advisors$meanPosition[i] <- mean(tmp[[paste0(advisors$idDescription[i], ".position")]])
}
# Produce a data frame of the trials where each decision gets a unique row
decisions <- AdvisedTrial[, !grepl("^response(?=\\S+Final$)",
names(AdvisedTrial),
perl = T)]
decisions <- rbind(decisions, decisions)
decisions$decision <- sapply(1:nrow(decisions),
function(x)
if (x <= nrow(AdvisedTrial)) "first" else "last")
for (i in (nrow(AdvisedTrial) + 1):nrow(decisions)) {
for (n in names(decisions)[grepl("^response", names(decisions), perl = T)]) {
decisions[i, n] <- AdvisedTrial[i - nrow(AdvisedTrial), paste0(n, "Final")]
}
}
exclusions <- tibble(pid = unique(decisions$pid))
exclusions$excluded <- F
for (p in unique(exclusions$pid)) {
excluded <- NULL
tmp <- Trial[Trial$pid == p, ]
if (any(tmp$responseCorrect == F))
excluded <- c(excluded, "attnCheckYear")
if (any(tmp$responseMarkerWidth != 1))
excluded <- c(excluded, "attnCheckMarker")
exclusions$excluded[exclusions$pid == p] <- ifelse(is.null(excluded),
F,
paste(excluded,
collapse = ", "))
}
table(exclusions$excluded)
# Drop excluded participants' trials
tmp <- NULL
for (i in 1:nrow(decisions))
if (exclusions$excluded[exclusions$pid == decisions$pid[i]] == F)
tmp <- rbind(tmp, decisions[i, ])
decisions <- tmp
# Remove outlying trials
checkList <- c("timeEnd")
decisions$outlier <- F
for (v in checkList) {
tmp <- scale(decisions[[v]])
decisions$outlier[abs(tmp) > zThresh] <-
ifelse(decisions$outlier[abs(tmp) > zThresh] == F,
v, paste(decisions$outlier, v, collapse = ", "))
if (any(abs(tmp) > zThresh))
print(ggplot(decisions, aes(x = "", y = !!ensym(v))) +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitter(.33), alpha = .5) +
labs(x = "trials"))
}
tmp <- ggplot(decisions, aes(!!ensym(v))) + geom_histogram()
table(decisions$outlier)
nMaxOutliers <- 2
for (p in unique(exclusions$pid)) {
excluded <- exclusions$excluded[exclusions$pid == p]
if (excluded == F)
excluded <- NULL
if (length(decisions$pid[decisions$pid == p & decisions$outlier != F]) >
nMaxOutliers)
excluded <- c(excluded, "outlyingTrials")
exclusions$excluded[exclusions$pid == p] <-
if (is.null(excluded)) F else excluded
}
table(exclusions$excluded)
# Drop excluded participants' trials
tmp <- NULL
for (i in 1:nrow(decisions))
if (exclusions$excluded[exclusions$pid == decisions$pid[i]] == F)
tmp <- rbind(tmp, decisions[i, ])
decisions <- tmp
# Participants data frame
ns <- c("timeEnd", "responseCorrect", "responseError", "number")
ss <- c("pid", "responseMarker", "hasFeedback", "decision")
eq <- paste0("cbind(", paste(ns, collapse = ", "), ") ~ ",
paste(ss, collapse = " + "))
PP <- as.tibble(aggregate(as.formula(eq), decisions, mean))
PP$excluded <- sapply(PP$pid, function(p)
exclusions$excluded[exclusions$pid == p])
# record the n of each row so weighted averaging can be used later
PP$number <- aggregate(as.formula(paste("number ~",
paste(ss, collapse = " +"))),
decisions, length)$number
checkList <- c("timeEnd", "responseError", "responseCorrect")
for (v in checkList) {
p <- aggregate(as.formula(paste(v, "~ pid + hasFeedback")),
AdvisedTrial,
mean)
p[, v] <- scale(p[, v])
for (i in 1:nrow(p)) {
if (abs(p[i, v] <= zThresh))
next()
exclusions$excluded[exclusions$pid == p$pid[i]] <-
if (exclusions$excluded[exclusions$pid == p$pid[i]] == F) v else
paste(exclusions$excluded[PP$pid == p$pid[i]], ", ", v)
}
if (any(abs(p[, v]) > zThresh))
print(ggplot(p, aes(x = "", y = !!ensym(v), colour = hasFeedback)) +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA, aes(group = 1)) +
geom_point(position = position_jitter(.33), alpha = .5) +
labs(x = "participants"))
}
PP$excluded <- sapply(PP$pid,
function(x) exclusions$excluded[exclusions$pid == x])
table(exclusions$excluded)
debrief.form$guessedManipulation <- F
# c(F, F, F, F, F, T, F, F, F, F,
#   T, T, F, F, F, F, F, F, F, F,
#   F, F, F, F, F, F, F, F, F, F)
debrief.form[, c("pid", "comment", "guessedManipulation")]
for (p in exclusions$pid) {
if (p %in% debrief.form$pid) {
if (debrief.form$guessedManipulation[debrief.form$pid == p]) {
exclusions$excluded[exclusions$pid == p] <-
if (exclusions$excluded[exclusions$pid == p] == F)
"guessedManipulation" else
paste(c(exclusions$excluded[exclusions$pid == p],
"guessedManipulation"), collapse = ", ")
}
}
}
table(exclusions$excluded)
AdvisedTrial <- AdvisedTrial[AdvisedTrial$pid %in%
exclusions$pid[exclusions$excluded == F], ]
PP <- PP[PP$pid %in% exclusions$pid[exclusions$excluded == F], ]
# bind feedback property from participants
advisors <- advisors[advisors$pid %in% PP$pid, ]
advisors <- left_join(advisors, unique(PP[c("pid", "hasFeedback")]), "pid")
# drop practice advisors
advisors <- advisors[advisors$idDescription != "Practice", ]
# Calculate the proportion of trials each breakdown in PP accounts for
PP$proportion <- sapply(1:nrow(PP),
function(i)
2 * PP$number[i] /
sum(PP$number[PP$pid == PP$pid[i]]))
# Pad out the proportions with 0s
for (p in unique(PP$pid)) {
for (d in unique(PP$decision))
for (m in markerList)
if (nrow(PP[PP$pid == p &
PP$decision == d &
PP$responseMarker == m, ]) == 0)
PP <- safeBind(list(PP,
tibble(pid = p,
responseMarker = m,
hasFeedback = PP$hasFeedback[PP$pid == p][1],
decision = d,
number = 0,
excluded = PP$excluded[PP$pid == p][1],
proportion = 0)))
}
#' Means of v for each marker after converting df entries to participant means
#' @params v column
#' @params df dataframe containing v
markerBreakdown <- function(v, df, hideMarkerTotal = F, missingValue = NA, ...) {
v <- substitute(v)
fun <- function(x) {
if (!nrow(x))
return(missingValue)
eq <- as.formula(paste(ensym(v), "~ + pid"))
tmp <- aggregate(eq, x, mean, ...)
mean(tmp[, ncol(tmp)])
}
# rename total fields
n <- function(x, alt = NA) if (length(x) == 1) x else alt
out <- list()
for (d in uniqueTotal(df$decision)) {
if (length(d) != 1)
next()
for (f in uniqueTotal(df$hasFeedback)) {
tmp <- tibble(decision = n(d), feedback = n(f))
for (m in uniqueTotal(markerList)) {
if (length(m) != 1 && hideMarkerTotal)
next()
x <- fun(df[df$decision %in% d &
df$hasFeedback %in% f &
df$responseMarker %in% m, ])
if (is.na(n(m)))
tmp$mean <- x
else
tmp[paste0("mean|m=", m)] <- x
}
out[[d]] <- rbind(out[[d]], tmp)
}
}
out
}
#' Return a version of df with only the trials with a single advisor,
#' and with all advice columns accessible as advisor0x where x is the
#' name of the advisor column.
#' @param df data frame to process
singleAdvisorTrials <- function(df) {
# Find the number of advisors by counting advisorXadvice columns
df$advisorCount <- 0
for (r in 1:nrow(df)) {
i <- 0
while (T) {
if (!length(grep(paste0("advisor", i), names(df)))) {
break()
}
i <- i + 1
}
df$advisorCount[r] <- i
}
# Only keep trials with a single advisor
out <- df[df$advisorCount == 1, ]
out
}
AdvisedTrial[, grep(".advice", names(AdvisedTrial))]
block2 <- singleAdvisorTrials(AdvisedTrial)
block2Decisions <- singleAdvisorTrials(decisions)
tmp <- markerBreakdown(proportion, PP, hideMarkerTotal = T)
# Proportions within a row should sum to 1
for (x in tmp)
expect_equal(apply(x[, 3:5], 1, sum), rep(1, nrow(x)))
num2str.tibble(tmp$first, isProportion = T, precision = 3)
num2str.tibble(tmp$last, isProportion = T, precision = 3)
ggplot(PP[!is.na(PP$responseMarker), ],
aes(x = responseMarker, y = proportion)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_grid(hasFeedback ~ decision, labeller = label_both) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "response marker width (years)",
y = "p(marker used)")
tmp <- markerBreakdown(responseCorrect, decisions)
num2str.tibble(tmp$first, isProportion = T, precision = 3)
num2str.tibble(tmp$last, isProportion = T, precision = 3)
ggplot(aggregate(responseCorrect ~
responseMarker + decision + hasFeedback + pid,
decisions, mean),
aes(x = responseMarker, y = responseCorrect)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_grid(hasFeedback ~ decision, labeller = label_both) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "response marker width (years)",
y = "p(response correct)")
tmp <- markerBreakdown(responseError, decisions)
num2str.tibble(tmp$first)
num2str.tibble(tmp$last)
ggplot(aggregate(responseError ~
responseMarker + decision + hasFeedback + pid,
decisions, mean),
aes(x = responseMarker, y = responseError)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_grid(hasFeedback ~ decision, labeller = label_both) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "response marker width (years)",
y = "|target - response marker centre| (years)")
tmp <- markerBreakdown(responseError, block2Decisions)
num2str.tibble(tmp$first)
num2str.tibble(tmp$last)
ggplot(aggregate(responseError ~
responseMarker + decision + hasFeedback + pid,
block2Decisions, mean),
aes(x = responseMarker, y = responseError)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_grid(hasFeedback ~ decision, labeller = label_both) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "response marker width (years)",
y = "|target - response marker centre| (years)")
tmp <- markerBreakdown(responseScore, decisions)
num2str.tibble(tmp$first)
num2str.tibble(tmp$last)
ggplot(aggregate(responseScore ~
responseMarker + decision + hasFeedback + pid,
decisions, mean),
aes(x = responseMarker, y = responseScore)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_grid(hasFeedback ~ decision, labeller = label_both) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "response marker width (years)",
y = "points scored")
tmp <- markerBreakdown(timeEnd, decisions)
num2str.tibble(tmp$last)
ggplot(aggregate(timeEnd ~
responseMarker + decision + hasFeedback + pid,
decisions, mean),
aes(x = responseMarker,
y = timeEnd / 1000)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_grid(~ hasFeedback, labeller = label_both) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "response marker width (years)",
y = "response time (s)")
decisions$rt <- decisions$responseTimeEstimate - decisions$timeResponseOpen
tmp <- markerBreakdown(rt, decisions)
num2str.tibble(tmp$first)
num2str.tibble(tmp$last)
ggplot(aggregate(rt ~
responseMarker + decision + hasFeedback + pid,
decisions, mean),
aes(x = responseMarker,
y = rt / 1000)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_grid(hasFeedback ~ decision, labeller = label_both) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "response marker width (years)",
y = "response time (s)")
as.tibble(aggregate(meanPosition ~ idDescription + hasFeedback, advisors, mean))
read.csv(paste0("../../data/private/datesStudy_v", version,
"_participant-metadata.csv"))
