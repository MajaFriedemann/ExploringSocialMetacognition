if (x <= nrow(AdvisedTrial)) "first" else "last")
for (i in (nrow(AdvisedTrial) + 1):nrow(decisions)) {
for (n in names(decisions)[grepl("^response", names(decisions), perl = T)]) {
decisions[i, n] <- AdvisedTrial[i - nrow(AdvisedTrial), paste0(n, "Final")]
}
}
exclusions <- tibble(pid = unique(decisions$pid))
exclusions$excluded <- F
for (p in unique(exclusions$pid)) {
excluded <- NULL
tmp <- Trial[Trial$pid == p, ]
if (any(tmp$responseCorrect == F))
excluded <- c(excluded, "attnCheckYear")
if (any(tmp$responseMarkerWidth != 1))
excluded <- c(excluded, "attnCheckMarker")
exclusions$excluded[exclusions$pid == p] <- ifelse(is.null(excluded),
F,
paste(excluded,
collapse = ", "))
}
table(exclusions$excluded)
# Drop excluded participants' trials
tmp <- NULL
for (i in 1:nrow(decisions))
if (exclusions$excluded[exclusions$pid == decisions$pid[i]] == F)
tmp <- rbind(tmp, decisions[i, ])
decisions <- tmp
for (p in unique(exclusions$pid)) {
if (!(p %in% debrief.advisors$pid)) {
exclusions$excluded[exclusions$pid == p] <-
if (exclusions$excluded[exclusions$pid == p] == F) "safari" else
paste(exclusions$excluded[exclusions$pid == p], ", ", "safari")
}
}
# Remove outlying trials
decisions$outlier <- decisions$timeEnd > maxTime
ggplot(decisions, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .5),
alpha = .5, aes(colour = pid)) +
labs(x = "trials")
table(decisions$outlier)
nMaxOutliers <- 3
for (p in unique(exclusions$pid)) {
excluded <- exclusions$excluded[exclusions$pid == p]
if (excluded == F)
excluded <- NULL
if (length(decisions$pid[decisions$pid == p & decisions$outlier != F]) >
nMaxOutliers)
excluded <- c(excluded, "outlyingTrials")
if (any(decisions$outlier[decisions$advisor0offBrand & decisions$pid == p])) {
excluded <- c(excluded, "offBrandOutlier")
}
exclusions$excluded[exclusions$pid == p] <-
if (is.null(excluded)) F else paste(excluded, collapse = ", ")
}
table(exclusions$excluded)
# Drop excluded participants' trials
tmp <- NULL
for (i in 1:nrow(decisions))
if (exclusions$excluded[exclusions$pid == decisions$pid[i]] == F)
tmp <- rbind(tmp, decisions[i, ])
decisions <- tmp
# Participants data frame
ns <- c("timeEnd", "responseCorrect", "responseError", "number")
ss <- c("pid", "responseMarker", "hasFeedback", "decision")
eq <- paste0("cbind(", paste(ns, collapse = ", "), ") ~ ",
paste(ss, collapse = " + "))
PP <- as.tibble(aggregate(as.formula(eq), decisions, mean))
PP$excluded <- sapply(PP$pid, function(p)
exclusions$excluded[exclusions$pid == p])
# record the n of each row so weighted averaging can be used later
PP$number <- aggregate(as.formula(paste("number ~",
paste(ss, collapse = " +"))),
decisions, length)$number
checkList <- c("timeEnd", "responseError", "responseCorrect")
for (v in checkList) {
p <- aggregate(as.formula(paste(v, "~ pid + hasFeedback")),
AdvisedTrial,
mean)
p[, v] <- scale(p[, v])
for (i in 1:nrow(p)) {
if (abs(p[i, v] <= zThresh))
next()
exclusions$excluded[exclusions$pid == p$pid[i]] <-
if (exclusions$excluded[exclusions$pid == p$pid[i]] == F) v else
paste(exclusions$excluded[exclusions$pid == p$pid[i]], ", ", v)
}
print(ggplot(p, aes(x = "", y = !!ensym(v), colour = hasFeedback)) +
geom_rect(xmin = 0, xmax = 2, ymin = -zThresh, ymax = zThresh,
fill = "white", colour = NA) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA, aes(group = 1)) +
geom_point(position = position_jitter(.33), alpha = .5) +
labs(x = "participants", y = paste0(v, ".z")) +
theme(panel.background = element_rect(fill = "grey95"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()))
}
PP$excluded <- sapply(PP$pid,
function(x) exclusions$excluded[exclusions$pid == x])
table(exclusions$excluded)
# by hash of prolific id
for (uid in unique(okayIds$uidHash)) {
ids <- okayIds$pid[okayIds$uidHash == uid]
# participants who have multiple attempts at core trials
if (length(ids[ids %in% AdvisedTrial[["pid"]]]) > 1) {
tmp <- exclusions[exclusions$pid %in% ids, ]
tmp$excluded <- ifelse(tmp$excluded == F,
"multipleAttempts",
paste(tmp$excluded, ", multipleAttempts"))
exclusions$excluded[exclusions$pid %in% ids, ] <- tmp$excluded
}
# participants who have answered the same question twice
tmp <- c(AdvisedTrial$stimHTML[AdvisedTrial$pid %in% ids],
practiceTrial$stimHTML[practiceTrial$pid %in% ids],
practiceAdvisedTrial$stimHTML[practiceAdvisedTrial$pid %in% ids])
if (length(tmp) > length(unique(tmp))) {
tmp <- exclusions[exclusions$pid %in% ids, ]
tmp$excluded <- ifelse(tmp$excluded == F,
"repeatedQuestion",
paste(tmp$excluded, ", repeatedQuestion"))
exclusions$excluded[exclusions$pid %in% ids, ] <- tmp$excluded
}
}
table(exclusions$excluded)
debrief.form$guessedManipulation <- F
# c(F, F, F, F, F, F, F, F, F, F,
#   F, F, F, F, F, T, F, F, F, F)
debrief.form[, c("pid", "comment", "guessedManipulation")]
for (p in exclusions$pid) {
if (p %in% debrief.form$pid) {
if (debrief.form$guessedManipulation[debrief.form$pid == p]) {
exclusions$excluded[exclusions$pid == p] <-
if (exclusions$excluded[exclusions$pid == p] == F)
"guessedManipulation" else
paste(c(exclusions$excluded[exclusions$pid == p],
"guessedManipulation"), collapse = ", ")
}
}
}
# Check for erroneous marker values
okayMarkers <- c(1, 3, 9, 27)
for (p in unique(AdvisedTrial$pid)) {
tmp <- AdvisedTrial[AdvisedTrial$pid == p, ]
if (!all(tmp$responseMarkerWidth %in% okayMarkers) |
!all(tmp$responseMarkerWidthFinal %in% okayMarkers)) {
if (p %in% exclusions$pid) {
exclusions$excluded[exclusions$pid == p] <-
if (exclusions$excluded[exclusions$pid == p] == F)
"badMarker" else
paste(c(exclusions$excluded[exclusions$pid == p],
"badMarker"), collapse = ", ")
}
}
}
table(exclusions$excluded)
AdvisedTrial <- AdvisedTrial[AdvisedTrial$pid %in%
exclusions$pid[exclusions$excluded == F], ]
decisions <- decisions[decisions$pid %in%
exclusions$pid[exclusions$excluded == F], ]
PP <- PP[PP$pid %in% exclusions$pid[exclusions$excluded == F], ]
# Drop extraneous factor levels
for (n in ls()) {
dirty <- F
x <- get(n)
if ("data.frame" %in% class(x)) {
for (i in 1:ncol(x)) {
if (is.factor(x[[i]])) {
x[[i]] <- factor(x[[i]]) # renew level assignment
dirty <- T
}
}
}
if (dirty) {
assign(n, x)
}
}
aggregate(pid ~ pid + firstAdvisor + feedback, AdvisedTrial, count)
aggregate(number ~ pid + firstAdvisor + feedback, AdvisedTrial, count)
aggregate(number ~ pid + firstAdvisor + feedback, AdvisedTrial, mean)
aggregate(number ~ pid + firstAdvisor + feedback, AdvisedTrial, length)
aggregate(pid ~ pid + firstAdvisor + feedback, AdvisedTrial, length)
aggregate(pid ~ pid + firstAdvisor + feedback, AdvisedTrial, function(x) length(unique(x)))
tmp <- aggregate(advisor0woa ~
pid + hasFeedback + advisor0idDescription + firstAdvisor,
offBrand, mean, na.rm = T)
tmp
df <- aggregate(advisor0woa ~
pid + hasFeedback + advisor0idDescription + firstAdvisor,
offBrand, mean, na.rm = T)
df$hasFeedback <- factor(df$hasFeedback)
# remove incomplete cases
for (p in unique(df$pid)) {
if (nrow(df[df$pid == p, ]) != 2) {
print(paste("Dropping incomplete case pid =", p))
df <- df[df$pid != p, ]
}
}
# refactor pid
df$pid <- factor(df$pid)
tmp <- aggregate(advisor0woa ~ hasFeedback, df, mean)
tmp
df
df[order(df$pid), ]
df <- df[order(df$pid), ]
tmp <- df
tmp$pref <- df$advisor0woa[df$advisor0idDescription == "Accurate"] -
df$advisor0woa[df$advisor0idDescription == "Agreeing"]
tmp
df <- df[order(df$pid), ]
tmp <- df[df$advisor0idDescription == "Accurate"]
df <- df[order(df$pid), ]
tmp <- df[df$advisor0idDescription == "Accurate", ]
tmp$pref <- df$advisor0woa[df$advisor0idDescription == "Accurate"] -
df$advisor0woa[df$advisor0idDescription == "Agreeing"]
tmp
df <- df[order(df$pid), ]
tmp <- df[df$advisor0idDescription == "Accurate",
grep("idDesc", names(df), invert = T)]
tmp$pref <- df$advisor0woa[df$advisor0idDescription == "Accurate"] -
df$advisor0woa[df$advisor0idDescription == "Agreeing"]
tmp
df <- df[order(df$pid), ]
tmp <- df[df$advisor0idDescription == "Accurate",
grep("idDesc", names(df), invert = T)]
tmp$AccPref <- df$advisor0woa[df$advisor0idDescription == "Accurate"] -
df$advisor0woa[df$advisor0idDescription == "Agreeing"]
tmp
mean(tmp$AccPref)
df <- df[order(df$pid), ]
tmp <- df[df$advisor0idDescription == "Accurate",
c("pid", "hasFeedback", "firstAdvisor")]
tmp$AccPref <- df$advisor0woa[df$advisor0idDescription == "Accurate"] -
df$advisor0woa[df$advisor0idDescription == "Agreeing"]
tmp
r <- md.ttest(tmp$AccPref[tmp$hasFeedback],
tmp$AccPref[!tmp$hasFeedback],
labels = c("*M*|fb", "*M*|¬fb"))
tmp
tmp$AccPref[!tmp$hasFeedback]
tmp$AccPref[tmp$hasFeedback]
r <- md.ttest(tmp$AccPref[tmp$hasFeedback == T],
tmp$AccPref[tmp$hasFeedback == F],
labels = c("*M*|fb", "*M*|¬fb"))
cat(r)
r <- md.ttest(tmp$AccPref[tmp$firstAdvisor == "Accurate"],
tmp$AccPref[tmp$firstAdvisor != "Accurate"],
labels = c("*M*|Acc", "*M*|Agr"))
cat(r)
# examine by feedback type
r <- md.ttest(tmp$AccPref[tmp$hasFeedback == T &
tmp$firstAdvisor == "Accurate"],
tmp$AccPref[tmp$hasFeedback == T &
tmp$firstAdvisor != "Accurate"],
labels = c("*M*|fb,Acc", "*M*|fb,Agr"))
cat(r)
cat("\n\n")
r <- md.ttest(tmp$AccPref[tmp$hasFeedback != T &
tmp$firstAdvisor == "Accurate"],
tmp$AccPref[tmp$hasFeedback != T &
tmp$firstAdvisor != "Accurate"],
labels = c("*M*|¬fb,Acc", "*M*|¬fb,Agr"))
cat(r)
offBrand <- AdvisedTrial[AdvisedTrial$advisor0offBrand, ]
offBrand
tmp <- NULL
for (a in advisorNames) {
eq <- as.formula(paste0(a, ".distance ~ pid + hasFeedback + firstAdvisor"))
r <- aggregate(eq, offBrand, mean, na.rm = T)
colnames(r) <- c("pid", "feedback", "firstAdvisor", "distance")
r$advisor = a
tmp <- rbind(tmp, as.tibble(r))
}
prop2str(as.tibble(aggregate(distance ~ advisor + feedback + firstAdvisor,
tmp,
mean, na.rm = T)),
precision = 3)
ggplot(tmp, aes(x = advisor, y = distance, colour = pid)) +
geom_violin(colour = NA, fill = "grey75", alpha = .25) +
geom_boxplot(outlier.colour = NA, fill = NA, aes(group = advisor)) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
facet_grid(firstAdvisor ~ feedback, scales = "free_y", labeller = label_both)
tmp <- NULL
for (a in advisorNames) {
eq <- as.formula(paste0(a, ".woa ~ pid + hasFeedback + firstAdvisor"))
r <- aggregate(eq, AdvisedTrial, mean, na.rm = T)
colnames(r) <- c("pid", "feedback", "firstAdvisor", "WoA")
r$advisor <- a
tmp <- rbind(tmp, r)
}
prop2str(as.tibble(aggregate(WoA ~ advisor + feedback + firstAdvisor,
tmp,
mean, na.rm = T)),
precision = 3)
tmp <- NULL
for (a in advisorNames) {
x <- offBrand[offBrand$advisor0idDescription == a, ]
eq <- as.formula(paste0(a, ".woa ~ pid + hasFeedback + firstAdvisor"))
r <- aggregate(eq, x, mean, na.rm = T)
colnames(r) <- c("pid", "feedback", "firstAdvisor", "WoA")
r$advisor <- a
tmp <- rbind(tmp, r)
}
prop2str(as.tibble(aggregate(WoA ~ advisor + feedback + firstAdvisor,
tmp,
mean, na.rm = T)),
precision = 3)
low <- 0
high <- 1
n <- 11
block2$woa <- ""
for (x in c("woa", "woaRaw")) {
block2[, paste0("advisor0", x)] <- sapply(1:nrow(block2), function(i)
unlist(block2[i,
paste0(as.character(block2$advisor0idDescription[i]),
".", x)]))
}
block2$woa[block2$advisor0woaRaw >= 1] <- ">=1"
for (x in rev(seq(low, high, length.out = n))) {
block2$woa[block2$advisor0woaRaw < x] <- paste0("<", x)
}
block2$woa <- factor(block2$woa)
# update offbrand
offBrand <- block2[block2$advisor0actualType == "disagreeReflected", ]
tmp <- block2[!is.nan(block2$advisor0woaRaw), ]
ggplot(tmp, aes(woa)) +
geom_histogram(stat = "count") +
facet_grid(hasFeedback ~ advisor0idDescription, labeller = label_both)
tmp <- aggregate(errorReduction ~ pid + hasFeedback + firstAdvisor,
AdvisedTrial, mean, na.rm = T)
num2str(as.tibble(aggregate(errorReduction ~ hasFeedback + firstAdvisor,
tmp, mean, na.rm = T)))
tmp <- aggregate(errorReduction ~
pid + hasFeedback + firstAdvisor + advisor0idDescription,
offBrand, mean, na.rm = T)
num2str(as.tibble(aggregate(errorReduction ~
hasFeedback + firstAdvisor +
advisor0idDescription,
tmp, mean, na.rm = T)))
df <- aggregate(advisor0woa ~
pid + hasFeedback + advisor0idDescription + firstAdvisor,
offBrand, mean, na.rm = T)
df$hasFeedback <- factor(df$hasFeedback)
# remove incomplete cases
for (p in unique(df$pid)) {
if (nrow(df[df$pid == p, ]) != 2) {
print(paste("Dropping incomplete case pid =", p))
df <- df[df$pid != p, ]
}
}
# refactor pid
df$pid <- factor(df$pid)
r <- ezANOVA(df, advisor0woa, pid,
within = advisor0idDescription,
between = list(hasFeedback, firstAdvisor),
detailed = T,
return_aov = T,
type = 2)
r
# Remove outlying trials
decisions$outlier <- decisions$timeEnd > maxTime
ggplot(decisions, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .5),
alpha = .5,
aes(colour = as.numeric(pid) %% 2)) +
labs(x = "trials")
table(decisions$outlier)
# Remove outlying trials
decisions$outlier <- decisions$timeEnd > maxTime
ggplot(decisions, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .5),
alpha = .5,
aes(colour = as.numeric(pid) %% 2 == 0)) +
labs(x = "trials")
table(decisions$outlier)
# Remove outlying trials
AdvisedTrial$outlier <- AdvisedTrial$timeEnd > maxTime
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .5),
alpha = .5, aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("blue", "pink"),
ceil(length(unique(pid)) / 2)))
# Remove outlying trials
AdvisedTrial$outlier <- AdvisedTrial$timeEnd > maxTime
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .5),
alpha = .5, aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("blue", "pink"),
ceiling(length(unique(pid)) / 2)))
# Remove outlying trials
AdvisedTrial$outlier <- AdvisedTrial$timeEnd > maxTime
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .5),
alpha = .5, aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("blue", "pink"),
ceiling(length(unique(AdvisedTrial$pid)) /
2)))
table(AdvisedTrial$outlier)
# Remove outlying trials
AdvisedTrial$outlier <- AdvisedTrial$timeEnd > maxTime
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .5),
alpha = .5, aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("lightblue", "pink"),
ceiling(length(unique(AdvisedTrial$pid)) /
2)))
table(AdvisedTrial$outlier)
# Remove outlying trials
AdvisedTrial$outlier <- AdvisedTrial$timeEnd > maxTime
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .5),
alpha = .8, aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("lightblue", "pink"),
ceiling(length(unique(AdvisedTrial$pid)) /
2)))
table(AdvisedTrial$outlier)
# Remove outlying trials
AdvisedTrial$outlier <- AdvisedTrial$timeEnd > maxTime
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .5),
aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("lightblue", "pink"),
ceiling(length(unique(AdvisedTrial$pid)) /
2)))
table(AdvisedTrial$outlier)
# Remove outlying trials
AdvisedTrial$outlier <- AdvisedTrial$timeEnd > maxTime
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = .66),
aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("lightblue", "pink"),
ceiling(length(unique(AdvisedTrial$pid)) /
2)))
table(AdvisedTrial$outlier)
# Remove outlying trials
AdvisedTrial$outlier <- AdvisedTrial$timeEnd > maxTime
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.33, dodge.width = 1),
aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("lightblue", "pink"),
ceiling(length(unique(AdvisedTrial$pid)) /
2)))
table(AdvisedTrial$outlier)
# Remove outlying trials
AdvisedTrial$outlier <- AdvisedTrial$timeEnd > maxTime
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.25, dodge.width = 1),
aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("lightblue", "pink"),
ceiling(length(unique(AdvisedTrial$pid)) /
2)))
table(AdvisedTrial$outlier)
ggplot(AdvisedTrial, aes(x = "", y = timeEnd)) +
geom_hline(yintercept = maxTime, linetype = "dashed") +
geom_violin(alpha = .25, color = NA, fill = "grey75") +
geom_boxplot(outlier.shape = NA, fill = NA) +
geom_point(position = position_jitterdodge(.25, dodge.width = 1),
aes(colour = pid)) +
labs(x = "trials") +
scale_colour_manual(values = rep(c("lightblue", "pink"),
ceiling(length(unique(AdvisedTrial$pid)) /
2))) +
theme(legend.position = 'none')
