}
df.viii.i.i
df.viii.i.i <- NULL
for(v in c('likeability', 'ability', 'benevolence')) {
bf <- ttestBF(questionnaires[questionnaires$advisorCategory=='b',v],
questionnaires[questionnaires$advisorCategory=='w',v])
df.viii.i.i <- rbind(df.viii.i.i, data.frame(variable = v,
BF = exp(bf@bayesFactor$bf)))
}
df.viii.i.i
df.viii.i.i <- NULL
for(v in c('likeability', 'ability', 'benevolence')) {
x <- questionnaires[questionnaires$advisorCategory=='b',v]
y <- questionnaires[questionnaires$advisorCategory=='w',v]
bf <- ttestBF(x,y)
df.viii.i.i <- rbind(df.viii.i.i, data.frame(variable = v,
BF = exp(bf@bayesFactor$bf),
mu1 = mean(x),
mu2 = mean(y)))
}
df.viii.i.i
tmp <- cor.test(questionnaires[,v], questionnaires[,'age'])
tmp <- cor.test(questionnaires[,v], questionnaires[,c'advisorAge'])
tmp <- cor.test(questionnaires[,v], questionnaires[,'advisorAge'])
df.viii.i.ii <- rbind(df.viii.i.ii, data.frame(variable = v,
corellation = tmp$statistic,
p.value = tmp$p.value,
tmp$method
))
tmp$method
#     8.i.ii) Age
df.viii.i.ii <- NULL
for(v in c('likeability', 'ability', 'benevolence')) {
tmp <- cor.test(questionnaires[,v], questionnaires[,'advisorAge'])
df.viii.i.ii <- rbind(df.viii.i.ii, data.frame(variable = v,
corellation = tmp$statistic,
p.value = tmp$p.value,
method = tmp$method))
}
df.viii.i.ii
plot(questionnaires$likeability,questionnaires$advisorAge)
plot(questionnaires$advisorAge, questionnaires$likeability)
#     8.i.iii) Portrait
aovB.viii.i.iii <- anovaBF(likeability ~ advisorPortrait data = questionnaires)
#     8.i.iii) Portrait
aovB.viii.i.iii <- anovaBF(likeability ~ advisorPortrait, data = questionnaires)
aovB.viii.i.iii
#     8.i.iii) Portrait
aovB.viii.i.iii <- anovaBF(likeability ~ advisorPortrait + Error(pid), data = questionnaires)
#     8.i.iii) Portrait
aovB.viii.i.iii <- anovaBF(likeability ~ advisorPortrait + pid, data = questionnaires, whichRandom = 'pid')
#     8.i.iii) Portrait
tmp <- questionnaires
tmp$pid <- as.factor(tmp$pid)
aovB.viii.i.iii <- anovaBF(likeability ~ advisorPortrait + pid, data = tmp, whichRandom = 'pid')
aovB.viii.i.iii
aovB.viii.i.iii <- anovaBF(cbind(likeability,ability) ~ advisorPortrait + pid, data = tmp, whichRandom = 'pid')
tmp$v <- tmp[,v]
tmp.aov <- anovaBF(v ~ advisorPortrait + pid, data = tmp, whichRandom = 'pid')
tmp.aov <- anovaBF(v ~ advisorPortrait + pid, data = tmp, whichRandom = 'pid', progress = F)
tmp <- questionnaires
tmp$pid <- as.factor(tmp$pid)
df.viii.i.iii <- NULL
for(v in c('likeability', 'ability', 'benevolence')) {
tmp$v <- tmp[,v]
tmp.aov <- anovaBF(v ~ advisorPortrait + pid, data = tmp, whichRandom = 'pid', progress = F)
df.viii.i.ii <- rbind(df.viii.i.ii, data.frame(variable = v,
BF = exp(tmp.aov@bayesFactor$bf)))
}
df.viii.i.iii
tmp <- questionnaires
tmp$pid <- as.factor(tmp$pid)
df.viii.i.iii <- NULL
for(v in c('likeability', 'ability', 'benevolence')) {
tmp$v <- tmp[,v]
tmp.aov <- anovaBF(v ~ advisorPortrait + pid, data = tmp, whichRandom = 'pid', progress = F)
df.viii.i.iii <- rbind(df.viii.i.ii, data.frame(variable = v,
BF = exp(tmp.aov@bayesFactor$bf)))
}
df.viii.i.iii
tmp <- questionnaires
tmp$pid <- as.factor(tmp$pid)
df.viii.i.iii <- NULL
for(v in c('likeability', 'ability', 'benevolence')) {
tmp$v <- tmp[,v]
tmp.aov <- anovaBF(v ~ advisorPortrait + pid, data = tmp, whichRandom = 'pid', progress = F)
df.viii.i.iii <- rbind(df.viii.i.iii, data.frame(variable = v,
BF = exp(tmp.aov@bayesFactor$bf)))
}
df.viii.i.iii
aov.viii.ii <- manova(cbind(ability, likeability, benevolence) ~ adviceType * timepoint,
data = questionnaires)
summary(aov.viii.ii)
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
t.ix.i <- t.test(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
prettyPrint(t.ix.i)
t.ix.i$method
# If so, we should see that participants preferentially pick agree-in-confidence
# advisor when their initial confidence is high, and agreee-in-uncertainty when
# their initial confidence is low. We can t-test aic pick proportion in
# high-confidence vs aic pick proportion in low-confidence.
tmp <- aggregate(adviceType ~ pid + confidenceCategory,
data = trials[trials$type==trialTypes$choice, ],
FUN = function(x)sum(x==adviceTypes$AiC)/length(x))
t.ix.i <- t.test(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
tB.ix.i <- ttestBF(tmp$adviceType[tmp$confidenceCategory==confidenceCategories$low],
tmp$adviceType[tmp$confidenceCategory==confidenceCategories$high],
paired = T)
print('Choice proportion Agree-in-confidence in low- vs high-confidence trials')
prettyPrint(t.ix.i)
print('Bayesian examination of above (prior = mean diff of 0, sd as empirically observed)')
print(tB.ix.i)
print(paste0('Evidence strength for preferential AiC picking: BF=', round(exp(tB.ix.i@bayesFactor$bf),3)))
aggregate(pid ~ excluded, data = all.participants, FUN = length)
aov.viii.ii <- manova(cbind(ability, likeability, benevolence) ~ adviceType * timepoint + Error(pid),
data = questionnaires)
summary(aov.viii.ii)
aov.viii.ii <- manova(cbind(ability, likeability, benevolence) ~ adviceType * timepoint,
data = questionnaires)
summary(aov.viii.ii)
scores$brieravg
scores$brieravg[1]
scores$brieravg[2]
scores$brieravg$`1`
names(scores$brieravg)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
gg.x.ii
if(!require(scoring)) {
install.packages('scoring')
library(scoring)
}
citation('scoring')
if(!require(digest)) {
install.packages('digest')
library(digest)
}
citation('digest')
# We use the Brier score
tmp <- trials[,c('initialCorrect', 'initialConfidence', 'pid')]
tmp$initialCorrect <- as.numeric(tmp$initialCorrect)
tmp$initialConfidence <- tmp$initialConfidence/100
scores <- brierscore(initialCorrect ~ initialConfidence, data = tmp, group = 'pid')
scores$brieravg
prolificIds <- c('5a87080e17ef3500017099c9',
'59c732215e0158000197769e',
'5aff2de2a415960001f26f36',
'5ad5386e546e150001b69b07',
'5a2449cdbe28e600011b5e68','5785017d160201000103f2f8'
)
if(exists('prolificIds')) {
prolificIdHashes <- sha1(prolificIds)
tmp <- NULL
for(i in length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
}
prolificIdHashes <- sapply(prolificIds,sha1)
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,sha1)
tmp <- NULL
for(i in length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
}
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,sha1)
tmp <- NULL
for(i in length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
if(!is.null(proId))
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
}
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,sha1)
tmp <- NULL
for(i in length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
}
i <- 1
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
participants$id[participants$pid==pid]
prolificIdHashes
i <- 2
pid <- names(scores$brieravg)[i]
participants$id[participants$pid==pid]
as.data.frame(prolificIdHashes)
length(participants$id[i])
participants$id
as.data.frame(participants$id)
as.data.frame(t(participants$id))
participants[,c('id','pid')]
as.data.frame(prolificIdHashes)
sha1('5a87080e17ef3500017099c9')
digest('5a87080e17ef3500017099c9',algo = 'sha1')
sha1('5a87080e17ef3500017099c9', digits = 10)
sha1('5a87080e17ef3500017099c9', digits = 9)
sha1('5a87080e17ef3500017099c9', digits = 11)
sha1('5a87080e17ef3500017099c9', digits = 12)
sha1('5a87080e17ef3500017099c9', digits = 13)
sha1('5a87080e17ef3500017099c9', digits = 14)
sha1('5a87080e17ef3500017099c9', digits = 15)
sha1('5a87080e17ef3500017099c9', digits = 16)
sha1('5a87080e17ef3500017099c9', digits = 17)
sha1('5a87080e17ef3500017099c9', digits = 18)
sha1('5a87080e17ef3500017099c9', digits = 19)
sha1('5a87080e17ef3500017099c9', digits = 20)
sha1('5a87080e17ef3500017099c9', digits = 4)
sha1('5a87080e17ef3500017099c9', digits = 5)
sha1('5a87080e17ef3500017099c9', digits = 6)
sha1('5a87080e17ef3500017099c9', digits = 7)
sha1('5a87080e17ef3500017099c9', digits = 8)
sha1('5a87080e17ef3500017099c9', digits = 9)
sha1('5a87080e17ef3500017099c9', digits = 10)
sha1('')
sha256('5a87080e17ef3500017099c9')
sha1('5a87080e17ef3500017099c9')
target <- 'abbb35d960a1248e22371cff4143978c4de8e62d'
for(d in 1:20)
for(z in 1:20)
if(sha1('5a87080e17ef3500017099c9', digits = d, zapsmall = z) == target)
print(paste('d =',d, 'z=',z))
?digest
digest('5a87080e17ef3500017099c9', algo='sha1', serialize = F)
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
tmp <- NULL
for(i in length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
}
as.data.frame(prolificIdHashes)
participants[,c('id','pid')]
names(scores$brieravg))
names(scores$brieravg)
i<-5
pid <- names(scores$brieravg)[i]
participants$id[participants$pid==pid]
prolificIdHashes %in% participants$id[participants$pid==pid]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
length(proId)>0
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
tmp
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
tmp <- NULL
for(i in length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
}
tmp
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
tmp <- NULL
for(i in length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
for(i in length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
tmp <- NULL
for(i in 1:length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- prolificIdHashes[prolificIdHashes %in% participants$id[participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
}
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoiceBonuses.R')
tmp
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
tmp <- NULL
for(i in 1:length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- names(prolificIdHashes)[prolificIdHashes %in% participants$id[participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
}
!(prolificIds %in% tmp$prolificId)
prolificIds[!(prolificIds %in% tmp$prolificId)]
df.iv
prolificIdHashes[!(prolificIds %in% tmp$prolificId)]
all.participants[all.participants$id == "afaf6e171f0573a1b1257993a019afbdfcc54f4f",pid]
all.participants$pid[all.participants$excluded!=F]
all.participants$id[all.participants$excluded!=F]
all.participants$id[all.participants$pid == 6]
hist(all.trials$initialConfidence[all.trials$pid==6])
hist(all.trials$confidenceCategory[all.trials$pid==6])
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
tmp <- NULL
for(i in 1:length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- names(prolificIdHashes)[prolificIdHashes %in% all.participants$id[all.participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
}
tmp
}
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
tmp <- NULL
for(i in 1:length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- names(prolificIdHashes)[prolificIdHashes %in% all.participants$id[all.participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
else
print(paste0('PID',pid,'has no prolific hash associated'))
}
tmp
}
# We use the Brier score
tmp <- all.trials[,c('initialCorrect', 'initialConfidence', 'pid')]
tmp$initialCorrect <- as.numeric(tmp$initialCorrect)
tmp$initialConfidence <- tmp$initialConfidence/100
scores <- brierscore(initialCorrect ~ initialConfidence, data = tmp, group = 'pid')
scores$brieravg
if(exists('prolificIds')) {
prolificIdHashes <- sapply(prolificIds,digest,algo='sha1',serialize=F)
tmp <- NULL
for(i in 1:length(names(scores$brieravg))) {
pid <- names(scores$brieravg)[i]
proId <- names(prolificIdHashes)[prolificIdHashes %in% all.participants$id[all.participants$pid==pid]]
if(length(proId)>0)
tmp <- rbind(tmp, data.frame(pid,
prolificId = proId,
brieravg = scores$brieravg[i]))
else
print(paste('PID',pid,'has no prolific hash associated'))
}
tmp
}
markers <- quantile(tmp)
markers <- quantile(tmp$brieravg)
markers
rev(markers)
markers <- quantile(tmp$brieravg)
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers > tmp$brieravg[i])[1]
}
tmp
markers <- quantile(tmp$brieravg)
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
}
tmp
markers
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
tmp$reward[i] <- 200 - 200/length(markers)*(quantile-1)
}
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
tmp$reward[i] <- 200 - 200/length(markers)*(tmp$quantile[i]-1)
}
tmp
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
tmp$reward[i] <- 200 - 200/length(markers-1)*(tmp$quantile[i]-1)
}
tmp
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
tmp$reward[i] <- 200 - 200/length(markers+1)*(tmp$quantile[i]-1)
}
tmp
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
tmp$reward[i] <- 200 - 200/length(markers-1)*(tmp$quantile[i]-1)
}
tmp
200/length(markers-1)
(tmp$quantile[i]-1)
40*4
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
tmp$reward[i] <- 200 - 200/length(markers)*(tmp$quantile[i])
}
tmp
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
tmp$reward[i] <- 200 - 200/(length(markers)-1)*(tmp$quantile[i]-1)
}
tmp
for(i in 1:nrow(tmp)) {
tmp$quantile[i] <- which(markers >= tmp$brieravg[i])[1]
tmp$reward[i] <- round(2 - 2/(length(markers)-1)*(tmp$quantile[i]-1),2)
}
tmp[,c('prolificId','reward')]
participants$timeStart
sapply(participants$timeStart,time)
sapply(participants$timeStart,as.POSIXct)
sapply(participants$timeStart,as.POSIXlt)
sapply(participants$timeStart,as.POSIXlt, 'GMT')
x <- participants$timeStart[1]
x
as.POSIXct(x)
as.Date(x)
as.POSIXct(x, origin='1970-01-01')
anytime::anytime(x)
install.packages('anytime')
anytime::anytime(x)
typeof(x)
as.POSIXct(x[[1]])
typeof(drop(x))
x[[1]]
x <- x[[1]]
as.POSIXct(x)
as.POSIXct(x, origin='1970-01-01')
anytime::anytime(x)
anytime::anydate(x)
anytime::anytime(x/1000)
as.POSIXct(x/1000, origin='1970-01-01')
# For convenience the long participant Id is shortened to a simple number:
participants$timeStart <- sapply(participants$timeStart, function(x)as.POSIXct(x[[1]]/1000, origin='1970-01-01'))
participants$timeStart
participants$timeStart[1]
participants$timeEnd[1]
participants$timeEnd[1][[1]]
participants$timeEnd[1][[1]]/1000
as.POSIXct(participants$timeEnd[1][[1]]/1000)
as.POSIXct(participants$timeEnd[1][[1]]/1000, origin='1970-01-01')
sapply(participants$timeEnd,function(x)as.POSIXct(x[[1]]/1000, origin='1970-01-01'))
sapply(participants$timeEnd,function(x)x[[1]]/1000)
sapply(sapply(participants$timeEnd,function(x)x[[1]]/1000),as.POSIXct,origin='1970-01-01')
sapply(sapply(participants$timeEnd,function(x)x[[1]]/1000),anytime::anytime)
source('F:/www/vhosts/localhost/ExploringSocialMetacognition/analysis/advisorChoice.R')
x <- 1:100
x <- x%%5
x
x <- factor(x)
x
x <- recode(x, "0='zero';1='one';2='two';3='three';4='high'")
x <- car::recode(x, "0='zero';1='one';2='two';3='three';4='high'")
x
which(x==high)
which(x=='high')
which(x=="high")
ifelse(x=="high",1,0)
