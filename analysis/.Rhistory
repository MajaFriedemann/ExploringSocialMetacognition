for (x in unique(okayIds$condition)) {
i <- 0
for (p in exclusions$pid[exclusions$excluded == F]) {
if (okayIds$condition[okayIds$pid %in% p] == x) {
if (i >= n) {
exclusions$excluded[exclusions$pid == p] <- "excess"
} else {
i <- i + 1
}
}
}
}
okayIds$condition <- factor(okayIds$condition, labels = c("fb_AgrFirst",
"fb_AccFirst",
"¬fb_AgrFirst",
"¬fb_AccFirst"))
tmp <- left_join(exclusions, okayIds, by = "pid")
kable(t(table(tmp$condition, tmp$excluded)))
AdvisedTrial <- AdvisedTrial[AdvisedTrial$pid %in%
exclusions$pid[exclusions$excluded == F], ]
decisions <- decisions[decisions$pid %in%
exclusions$pid[exclusions$excluded == F], ]
PP <- PP[PP$pid %in% exclusions$pid[exclusions$excluded == F], ]
# Drop extraneous factor levels
for (n in ls()) {
dirty <- F
x <- get(n)
if ("data.frame" %in% class(x)) {
for (i in 1:ncol(x)) {
if (is.factor(x[[i]])) {
x[[i]] <- factor(x[[i]]) # renew level assignment
dirty <- T
}
}
}
if (dirty) {
assign(n, x)
}
}
# bind feedback property from participants
advisors <- advisors[advisors$pid %in% PP$pid, ]
advisors <- left_join(advisors, unique(PP[c("pid", "feedback")]), "pid")
advisors$pid <- factor(advisors$pid)
# drop practice advisors
advisors <- advisors[advisors$idDescription != "Practice", ]
# Calculate the proportion of trials each breakdown in PP accounts for
PP$proportion <- sapply(1:nrow(PP),
function(i)
2 * PP$number[i] /
sum(PP$number[PP$pid == PP$pid[i]]))
# Pad out the proportions with 0s
for (p in unique(PP$pid)) {
for (d in unique(PP$decision))
for (m in markerList)
for (a in advisorNames)
if (nrow(PP[PP$pid == p &
PP$decision == d &
PP$responseMarker == m, ]) == 0)
PP <- safeBind(list(PP,
tibble(pid = p,
responseMarker = m,
feedback = PP$feedback[PP$pid == p][1],
decision = d,
firstAdvisor = a,
number = 0,
excluded = PP$excluded[PP$pid == p][1],
proportion = 0)))
}
#' Means of v for each marker after converting df entries to participant means
#' @params v column
#' @params df dataframe containing v
markerBreakdown <- function(v, df, hideMarkerTotal = F, missingValue = NA, ...) {
v <- substitute(v)
fun <- function(x) {
if (!nrow(x))
return(missingValue)
eq <- as.formula(paste(ensym(v), "~ + pid"))
tmp <- aggregate(eq, x, mean, ...)
mean(tmp[, ncol(tmp)])
}
# rename total fields
n <- function(x, alt = NA) if (length(x) == 1) x else alt
out <- list()
for (d in uniqueTotal(df$decision)) {
if (length(d) != 1)
next()
for (f in uniqueTotal(df$feedback)) {
tmp <- tibble(decision = n(d), feedback = n(f))
for (m in uniqueTotal(markerList)) {
if (length(m) != 1 && hideMarkerTotal)
next()
x <- fun(df[df$decision %in% d &
df$feedback %in% f &
df$responseMarker %in% m, ])
if (is.na(n(m)))
tmp$mean <- x
else
tmp[paste0("mean|m=", m)] <- x
}
out[[d]] <- rbind(out[[d]], tmp)
}
}
out
}
#' Return a version of df with only the trials with a single advisor,
#' and with all advice columns accessible as advisor0x where x is the
#' name of the advisor column.
#' @param df data frame to process
singleAdvisorTrials <- function(df) {
# Find the number of advisors by counting advisorXadvice columns
df$advisorCount <- 0
for (r in 1:nrow(df)) {
i <- 0
while (T) {
if (!length(grep(paste0("advisor", i), names(df)))) {
break()
}
i <- i + 1
}
df$advisorCount[r] <- i
}
# Only keep trials with a single advisor
out <- df[df$advisorCount == 1, ]
# fill in missing column names using the advisor's description + varname
advCols <- unique(reFirstMatch(paste0("(?:",
paste(advisorNames, collapse = "|"),
")\\.(\\S+)$"), names(df)))
advCols <- advCols[!(advCols %in% unique(reFirstMatch("advisor0(\\S+)$",
names(df))))]
for (i in 1:nrow(out)) {
for (v in advCols) {
out[i, paste0("advisor0", v)] <-
out[i, paste0(out$advisor0idDescription[i], ".", v)]
}
}
out
}
block2 <- singleAdvisorTrials(AdvisedTrial) # in this design block2 is the same as the main AdvisedTrial dataframe
block2Decisions <- singleAdvisorTrials(decisions) # likewise for block2Decisions and decisions
offBrand <- AdvisedTrial[AdvisedTrial$advisor0offBrand, ]
tmp <- decisions
tmp$RT <- ifelse(tmp$decision == "first",
tmp$responseTimeEstimate - tmp$timeResponseOpen,
tmp$responseTimeEstimate - tmp$timeResponseOpenFinal)
x <- aggregate(RT ~ decision + pid, tmp, mean)
y <- x[x$decision == "last", ]
x <- x[x$decision == "first", ]
w <- 1.5
ggplot(tmp, aes(x = "", y = RT / 1000, colour = pid)) +
geom_point(position = position_jitterdodge(jitter.width = w/4, dodge.width = w),
alpha = 0.25) +
stat_summary(geom = "point", size = 3, shape = 3,
position = position_dodge(width = w),
aes(group = pid), fun.y = mean, colour = "black", alpha = 1) +
stat_summary(geom = "errorbar", width = 0, aes(group = pid), colour = "black",
fun.data = mean_cl_normal, alpha = 1,
position = position_dodge(width = w)) +
stat_summary(geom = "point", size = 3, aes(group = 1), fun.y = mean) +
stat_summary(geom = "errorbar", aes(group = 1), fun.data = mean_cl_normal,
width = w) +
facet_grid(~decision) +
theme(legend.position = 'none') +
labs(x = "", y = "RT (s)",
subtitle = "Dots show individual trials, crosses show means and 95%CIs for individuals.")
ggplot(PP[!is.na(PP$responseMarker), ],
aes(x = responseMarker, y = proportion)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_grid(feedback + firstAdvisor ~ decision) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "response marker width (years)",
y = "p(marker used)")
w <- 1
ggplot(block2Decisions, aes(x = decision, y = responseError)) +
geom_boxplot(fill = NA, outlier.color = NA, size = 1.5, colour = "grey85",
alpha = 0.25) +
geom_point(alpha = .25, aes(colour = pid),
position = position_jitterdodge(jitter.width = .9, dodge.width = w)) +
stat_summary(geom = "line", aes(colour = pid, group = pid), fun.y = mean) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1) +
stat_summary(geom = "point", colour = "black", aes(group = pid), shape = 3,
position = position_dodge(width = w), fun.y = mean) +
stat_summary(geom = "errorbar", width = 0, aes(group = pid), colour = "black",
position = position_dodge(width = w), fun.data = mean_cl_normal) +
facet_grid(feedback ~ firstAdvisor, labeller = label_both) +
scale_linetype_manual(values = c("dotted")) +
labs(x = "decision",
y = "|target - response marker centre| (years)")
err <- md.ttest(AdvisedTrial$Accurate.error[!is.na(AdvisedTrial$Accurate.error)],
AdvisedTrial$Agreeing.error[!is.na(AdvisedTrial$Agreeing.error)],
labels = c("*M*|acc", "*M*|agr"))
dis <- md.ttest(AdvisedTrial$Accurate.distance[!is.na(AdvisedTrial$Accurate.distance)],
AdvisedTrial$Agreeing.distance[!is.na(AdvisedTrial$Agreeing.distance)],
labels = c("*M*|acc", "*M*|agr"))
err.ob <- md.ttestBF(offBrand$Accurate.error[!is.na(offBrand$Accurate.error)],
offBrand$Agreeing.error[!is.na(offBrand$Agreeing.error)],
labels = c("*M*|acc", "*M*|agr"))
dis.ob <- md.ttestBF(offBrand$Accurate.distance[!is.na(offBrand$Accurate.distance)],
offBrand$Agreeing.distance[!is.na(offBrand$Agreeing.distance)],
labels = c("*M*|acc", "*M*|agr"))
offBrand$woa <- ifelse(is.na(offBrand$Agreeing.woa),
offBrand$Accurate.woa,
offBrand$Agreeing.woa)
ggplot(offBrand, aes(x = advisor0idDescription, y = woa)) +
geom_boxplot(fill = NA, outlier.color = NA, size = 1.5, colour = "grey85",
alpha = 0.25) +
stat_summary(geom = "line", aes(colour = pid, group = pid), fun.y = mean) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1) +
stat_summary(geom = "point", aes(group = pid, colour = pid), fun.y = mean) +
facet_grid(firstAdvisor ~ feedback, labeller = label_both) +
scale_linetype_manual(values = c("dotted")) +
scale_y_continuous(limits = c(0, 1)) +
labs(x = "advisor",
y = "WoA")
tmp <- offBrand[, c("advisor0idDescription", "pid", "woa", "feedback",
"firstAdvisor")]
names(tmp)[1] <- "advisor"
df <- aggregate(woa ~ pid + feedback + advisor + firstAdvisor,
tmp, mean, na.rm = T)
df$feedback <- factor(df$feedback)
# remove incomplete cases
for (p in unique(df$pid)) {
if (nrow(df[df$pid == p, ]) != 2) {
print(paste("Dropping incomplete case pid =", p))
df <- df[df$pid != p, ]
}
}
# refactor pid
df$pid <- factor(df$pid)
r <- ezANOVA(df, woa, pid,
within = advisor,
between = list(feedback, firstAdvisor),
detailed = T,
return_aov = T,
type = 2)
r
df <- df[order(df$pid), ]
tmp <- df[df$advisor == "Accurate",
c("pid", "feedback", "firstAdvisor")]
tmp$AccPref <- df$woa[df$advisor == "Accurate"] -
df$woa[df$advisor == "Agreeing"]
r <- md.ttest(tmp$AccPref[tmp$feedback == T],
tmp$AccPref[tmp$feedback != T],
labels = c("*M*|fb", "*M*|¬fb"))
cat(r)
r <- md.ttest(tmp$AccPref[tmp$firstAdvisor == "Accurate"],
tmp$AccPref[tmp$firstAdvisor != "Accurate"],
labels = c("*M*|Acc", "*M*|Agr"))
cat(r)
# examine by feedback type
r <- md.ttest(tmp$AccPref[tmp$feedback == T &
tmp$firstAdvisor == "Accurate"],
tmp$AccPref[tmp$feedback == T &
tmp$firstAdvisor != "Accurate"],
labels = c("*M*|fb,Acc", "*M*|fb,Agr"))
cat(r)
cat("\n\n")
r <- md.ttest(tmp$AccPref[tmp$feedback != T &
tmp$firstAdvisor == "Accurate"],
tmp$AccPref[tmp$feedback != T &
tmp$firstAdvisor != "Accurate"],
labels = c("*M*|¬fb,Acc", "*M*|¬fb,Agr"))
cat(r)
# list packages
packageNames <- (.packages())
# don't include very core package
packageNames <- packageNames[!(packageNames %in%
rownames(installed.packages(
priority = "base")))]
# but do include the base package
packageNames <- c("base", packageNames)
out <- NULL
for (p in packageNames) {
out <- rbind(out, data.frame('Package' = p,
'Citations' = paste(format(citation(p),
style = 'textVersion'),
collapse = '<br/><br/>')))
}
kable(out)
cat(paste('Time stamp:', Sys.time(), '\n'))
cat('Runtime \n')
proc.time()
cat('\n\n')
sessionInfo()
cat(err)
ggplot(PP[!is.na(PP$responseMarker), ],
aes(x = decision, y = proportion)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_grid(feedback + firstAdvisor ~ responseMarker) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "decision",
y = "p(marker used)")
ggplot(PP,
aes(x = decision, y = proportion)) +
geom_violin(alpha = .25, colour = NA, fill = "grey75") +
geom_boxplot(fill = NA, outlier.color = NA) +
stat_summary(geom = "line", fun.y = mean,
aes(group = 1, linetype = "mean"), size = 1.5) +
geom_line(alpha = .5, aes(colour = pid, group = pid)) +
geom_point(alpha = .5, aes(colour = pid)) +
facet_grid(feedback + firstAdvisor ~ responseMarker) +
scale_linetype_manual(values = c("dashed")) +
labs(x = "decision",
y = "p(marker used)")
ggplot(block2, aes(x = "", y = responseErrorFinal - responseError)) +
geom_boxplot(outlier.color = NA, fill = NA) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid),
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseErrorFinal - responseError)) +
geom_boxplot(outlier.color = NA, fill = NA) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid),
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseErrorFinal - responseError)) +
geom_boxplot(outlier.color = NA, fill = NA) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseErrorFinal - responseError)) +
geom_boxplot(outlier.color = NA, fill = NA, colour = "grey80") +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseErrorFinal - responseError)) +
geom_boxplot(outlier.color = NA, fill = NA, colour = "grey80",
size = 1.3) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseErrorFinal - responseError)) +
geom_violin(fill = "grey80", colour = NA) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseErrorFinal - responseError)) +
geom_violin(fill = "grey90", colour = NA) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseError - responseErrorFinal)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_violin(fill = "grey90", colour = NA) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseError - responseErrorFinal)) +
geom_violin(fill = "grey90", colour = NA) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseError - responseErrorFinal)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_violin(fill = "grey90", colour = NA) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(firstAdvisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseError - responseErrorFinal)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_violin(fill = "grey90", colour = NA) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(advisor ~ feedback) +
labs(x = "", y = "error reduction")
ggplot(block2, aes(x = "", y = responseError - responseErrorFinal)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_violin(fill = "grey90", colour = NA) +
geom_point(aes(colour = pid), alpha = .5,
position = position_jitterdodge(jitter.width = .25,
dodge.width = w)) +
stat_summary(geom = "point", fun.y = mean, aes(group = pid), shape = 3,
position = position_dodge(width = w)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = pid),
position = position_dodge(width = w), width = 0) +
stat_summary(geom = "point", fun.y = mean, aes(group = 1)) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, aes(group = 1),
width = w) +
facet_grid(advisor0idDescription ~ feedback) +
labs(x = "", y = "error reduction")
offBrand$woa <- ifelse(is.na(offBrand$Agreeing.woa),
offBrand$Accurate.woa,
offBrand$Agreeing.woa)
AdvisedTrial$woa <- ifelse(is.na(AdvisedTrial$Agreeing.woa),
AdvisedTrial$Accurate.woa,
AdvisedTrial$Agreeing.woa)
AdvisedTrial$woaRaw <- ifelse(is.na(AdvisedTrial$Agreeing.woaRaw),
AdvisedTrial$Accurate.woaRaw,
AdvisedTrial$Agreeing.woaRaw)
offBrand$woa <- ifelse(is.na(offBrand$Agreeing.woa),
offBrand$Accurate.woa,
offBrand$Agreeing.woa)
offBrand$woaRaw <- ifelse(is.na(offBrand$Agreeing.woaRaw),
offBrand$Accurate.woaRaw,
offBrand$Agreeing.woaRaw)
round(mean(AdvisedTrial$woa != AdvisedTrial$woaRaw), 2)
mean(is.na(AdvisedTrial$woa == AdvisedTrial$woaRaw))
is.na(AdvisedTrial$woaRaw)
unique(round(AdvisedTrial$woaRaw))
round(mean(offBrand$woa != offBrand$woaRaw), 2)
grep("advisor", names(block2), value = T)
cat(err)
err
